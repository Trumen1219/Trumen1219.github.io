<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nuxt3</title>
    <link href="/2023/04/15/nuxtjs/"/>
    <url>/2023/04/15/nuxtjs/</url>
    
    <content type="html"><![CDATA[<h1 id="Nuxt3"><a href="#Nuxt3" class="headerlink" title="Nuxt3"></a>Nuxt3</h1><h2 id="一、Nuxt3简介和开发环境搭建"><a href="#一、Nuxt3简介和开发环境搭建" class="headerlink" title="一、Nuxt3简介和开发环境搭建"></a>一、Nuxt3简介和开发环境搭建</h2><p>Nuxt3是Vue3全家桶的一员，让你能轻松实现SSR网页的制作。Nuxt3比Nuxt2新增加了12项最新的特性，包括可以完全使用Vue3的所有语法，并且对TypeScript的完美支持。</p><h3 id="1-Nuxt3的简介"><a href="#1-Nuxt3的简介" class="headerlink" title="1.Nuxt3的简介"></a>1.Nuxt3的简介</h3><p>Nuxt3是基于Vue3发布的SSR框架，也是Vue全家桶系列的一员。如果你了解Nuxt2，应该也了解Nuxt3的使命和用途。但是如果你不了解，你需要先知道两个概念。</p><ul><li><p>SPA应用：也就是单页应用，这些多是在客户端的应用，不能进行SEO优化（搜索引擎优化）。</p></li><li><p>SSR应用：在服务端进行渲染，渲染完成后返回给客户端，每个页面有独立的URL，对SEO友好。</p></li></ul><p>所以如果你开发的应用是企业网站、商品展示 、博客这类型的展示型网站，就需要使用搜索引擎喜欢的SSR应用。</p><p>当我们明白这两个概念后，再来看Nuxt3的使命。因为Vue开发的应用默认是单页应用（SPA应用），但如果你想针对于搜索优化，就需要使用Vue的SSR模式开发，而Nuxt3就是Vue的SSR开发的框架。</p><h3 id="2-Nuxt3-的安装"><a href="#2-Nuxt3-的安装" class="headerlink" title="2.Nuxt3 的安装"></a>2.Nuxt3 的安装</h3><p>安装node</p><p>安装vue</p><p>创建一个nuxt项目：<strong>npx nuxi init nuxt3-test</strong></p><p>注意：npx是npm从5.2版开始增加的命令，所以说你的 npm 最小版本也要是5.2版本。查看npm版本的命令如下。</p><p>npm -v</p><p>Nuxt3安装成功页面 上面这段提示，也告诉我们了接下来的三个步骤。</p><p><strong>cd nuxt3-test</strong></p><p><strong>npm install</strong>来安装项目依赖包。</p><p><strong>npm run dev</strong>来运行项目。</p><h3 id="3-Nuxt3的优势介绍"><a href="#3-Nuxt3的优势介绍" class="headerlink" title="3.Nuxt3的优势介绍"></a>3.Nuxt3的优势介绍</h3><p>当我们动手操作完了，我们再简单介绍一下Nuxt3对比Nuxt2的优势或者说作了那些改进。</p><p>更轻量：以现代浏览器为基础的情况下，服务器部署和客户端产物最多减小75倍。</p><p>更快：用动态服务端代码来优化冷启动。</p><p>Hybird：增量动态生成和其他高级模式现在都成为可能。</p><p>Suspense: 导航前后可在任何组件中获取数据。</p><p>Composition API : 使用Composition API 和 Nuxt3的composables 实现真正的可复用性。</p><p>Nuxt CLI ： 权限的零依赖体验，助你轻松搭建项目和集成模块。</p><p>Nuxt Devtools ：专属调试工具，更多的信息和快速修复，在浏览器中高效工作。</p><p>Nuxt Kit ：全新的基于 TypeScript 和跨版本兼容的模块开发。</p><p>Webpack5 ： 更快的构建速度和更小的构建包，并且零配置。</p><p>Vite：用Vite作为你的打包器，体验轻量级的快速HMR。</p><p>Vue3 ： 完全支持Vue3语法，这一点特别关键。</p><p>TypeScript：由原生TypeScript和ESM构成，没有额外配置步骤。</p><h2 id="二、-Nuxt3的基础目录结构"><a href="#二、-Nuxt3的基础目录结构" class="headerlink" title="二、 Nuxt3的基础目录结构"></a>二、 Nuxt3的基础目录结构</h2><p>Nuxt3的目录结构</p><p>默认的项目里就如下几个文件和目录</p><ul><li>.nuxt               &#x2F;&#x2F; 自动生成的目录，用于展示结果</li><li>node_modules        &#x2F;&#x2F; 项目依赖包存放目录</li><li>.gitignore          &#x2F;&#x2F; Git的配置目录，比如一些文件不用Git管理就可以在这个文件中配置</li><li>app.vue             &#x2F;&#x2F; 项目入口文件，你可以在这里配置路由的出口</li><li>nuxt.config.ts      &#x2F;&#x2F; nuxt项目的配置文件 ，这个里边可以配置Nuxt项目的方方面面</li><li>package-lock.json   &#x2F;&#x2F; 锁定安装时包的版本，以保证其他人在 npm install时和你保持一致</li><li>package.json        &#x2F;&#x2F; 包的配置文件和项目的启动调式命令配置</li><li>README.md           &#x2F;&#x2F; 项目的说明文件</li><li>tsconfig.json       &#x2F;&#x2F; TypeScript的配置文件</li></ul><p>随着我们的开发目录也会越来越多，比如常用的还有下面三个目录。</p><ul><li>pages               &#x2F;&#x2F; 开发的页面目录</li><li>components          &#x2F;&#x2F; 组件目录</li><li>assets              &#x2F;&#x2F; 静态资源目录</li><li>layouts             &#x2F;&#x2F; 项目布局目录</li></ul><h2 id="三、编写Hello-World程序"><a href="#三、编写Hello-World程序" class="headerlink" title="三、编写Hello World程序"></a>三、编写Hello World程序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;NuxtWelcome /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>其中**<NuxtWelcome />**就是一个框架自带的组件，我们直接删除就可以，不用纠结删除这个组件。</p><p>删除后，在 \components 目录下新建一个文件，叫做HelloWorld.vue 然后编写下面的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;&quot;&gt;<br>    &lt;h1&gt;Hello World&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script setup&gt;<br>import &#123;&#125; from &quot;vue&quot;;<br>&lt;/script&gt;<br>&lt;style scoped&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>然后再回到app.vue文件中直接写入这个 HelloWorld组件。【注意这里组件的引入方式是通过小写并连接起来引入的】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;hello-world /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="四、Nuxt3页面和约定路由的使用"><a href="#四、Nuxt3页面和约定路由的使用" class="headerlink" title="四、Nuxt3页面和约定路由的使用"></a>四、Nuxt3页面和约定路由的使用</h2><h3 id="1、Nuxt3创建页面"><a href="#1、Nuxt3创建页面" class="headerlink" title="1、Nuxt3创建页面"></a>1、Nuxt3创建页面</h3><p>Nuxt3的一个特点就是约定式开发，讲究的是约定大于配置。用Nuxt3就要遵守Nuxt3的规则一样，框架都已经为你做好各种配置了，你只要遵守规则就可以了。 </p><p>当你了解什么是“约定式开发”后，再来看如何创建一个Nuxt3的页面。</p><p>我们按照框架约定新建一个pages 的文件夹，然后新建一个文件Demo1.vue 。注意，上面这两个步骤，就是约定开发，你必须这么作，否则框架就不认为你是一个页面。</p><ul><li>VSCode自定义代码片段</li></ul><p>这里再分享一个小技巧，比如每次新建一个页面，都会有很多相同的代码，这时候就可以使用VSCode的用户代码片段 功能。</p><p>这个功能可以在VSCode界面的左下角的齿轮图标中找到。 找到后新建一个Nuxt的片段就可以了。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;nuxt&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;prefix&quot;</span>:<span class="hljs-string">&quot;nuxt&quot;</span>,<br>    <span class="hljs-string">&quot;body&quot;</span>:[<br>        <span class="hljs-string">&quot;&lt;template&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;  &lt;div class=\&quot;\&quot;&gt;&lt;/div&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/template&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;script setup&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;import &#123;&#125; from &#x27;vue&#x27;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;/script&gt;&quot;</span>,<br>        <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;&lt;style scoped&gt;&lt;/style&gt;&quot;</span>,<br>    ],<br>    <span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;nuxt3 Components&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建好之后，我们再次回到VSCode中的Demo1.vue页面，直接输入 nuxt 回车后，就会生成一段代码了。</p><p><a href="https://postimg.cc/rD18gJH9"><img src="https://i.postimg.cc/kgZBJYFL/image.png" alt="image.png"></a></p><p>新的页面建好了，再补充一下页面内容。</p><template>  <div class=""><h1>Demo01</h1></div></template><p><strong>约定路由</strong></p><p>当一个页面建立好以后，如何能访问到这个页面 ? 也是一个不能忽视的问题。既然是约定开发，肯定是有一个约定的。</p><p> 首先第一步，我们需要在项目根目录下的app.vue文件中，使用 <Nuxtpage> 标签，这就相当于路由的出口了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hello-world</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtPage</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtPage</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>比如我们现在这个页面，想要访问到，其实只要在地址栏输入下面的地址就可以了。</p><p><a href="http://localhost:3000/demo1">http://localhost:3000/demo1</a></p><p>但是如果你使用原来的<a href="http://localhost:3000就又访问，会显示404，这时候你可以新建一个">http://localhost:3000就又访问，会显示404，这时候你可以新建一个</a> 在pages文件夹下index.vue 页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Index Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这时候在访问<a href="http://localhost:3000就可以访问到页面了。">http://localhost:3000就可以访问到页面了。</a></p><h3 id="2、NuxtLink标签的使用"><a href="#2、NuxtLink标签的使用" class="headerlink" title="2、NuxtLink标签的使用"></a>2、NuxtLink标签的使用</h3><p>Nuxt框架不鼓励我们使用<a> 标签进行跳转，而是使用<NuxtLink></NuxtLink>标签进行跳转。比如我们要从 index.vue页面跳转到demo1.vue页面，就可以使用下面的代码进行跳转。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Index Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>这个页面写完后，可以到浏览器中预览一下效果。基本就可以看到NuxtLink标签的作用了。这节课我们学习了三个知识，我们进行总结一下。</p><p>Nuxt3是约定大于配置的开发。</p><p>VSCode 自定义用户代码片段的方法</p><p>约定路由和<NuxtLink>标签的使用方法</p><h2 id="五、Nuxt3动态路由的使用"><a href="#五、Nuxt3动态路由的使用" class="headerlink" title="五、Nuxt3动态路由的使用"></a>五、Nuxt3动态路由的使用</h2><p>单参数的传递</p><p>单参数的传递只要在页面的文件名中用[ ]扩起来就可以了。比如新建一个页面，叫做 demo2-[id].vue。</p><p>-| pages&#x2F;<br>—| index.vue<br>—| demo2-[id].vue</p><p>也就是说我们使用[ ]的形式就可以设置一个页面的传参。参数接收可以使用 $route.params.id的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>获取的id:&#123;&#123; $route.params.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>我们去首页制作一个链接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Index Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo2-38&quot;</span>&gt;</span>Demo2.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这时候再到浏览器预览一下，调整后能得到ID，可以了。</p><p>在script里获取参数</p><p>上面只是在页面中获取了参数，实际作用并不大。工作中获取参数后，都要进行业务逻辑的处理，所以在<code>&lt;script&gt;</code>标签里获取参数，才是真实的开发需求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>获取的id:&#123;&#123; id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> id = <span class="hljs-title function_">ref</span>(route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>上面的代码通过useRoute( ) 获得了route,然后通过ref让template可用(id)。</p><p>多参数的获取</p><p>有人说是不是再写一个括号就可以传递多一个参数了，这种是不行的。如果你要传递是两个参数。你需要建立一个文件夹，然后在文件夹上使用[ ]来确定参数。比如我们要传递一个name的参数过来。就需要把目录和文件建立成这样。</p><p>-|  pages&#x2F;<br>—| index.vue<br>—| goods-[name]&#x2F;<br>—–| demo2-[id].vue<br>然后修改一些demo2-[id].vue的文件，修改获取的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>获取的id:&#123;&#123; id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>获取的name:&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> id = <span class="hljs-title function_">ref</span>(route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> name = <span class="hljs-title function_">ref</span>(route.<span class="hljs-property">params</span>.<span class="hljs-property">name</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>再到index.vue 修改链接，传递两个参数。</p><p><NuxtLink to="/goods-trumen/demo2-38">Demo2.vue</NuxtLink></p><p>完成后再到浏览器中查看结果，可以看到已经接收到了两个参数。 这节课主要学习了Nuxt3中的动态路由，包括：单参数的传递、多参数的传递和在Script标签里获取参数的方法。</p><h2 id="六、Nuxt3-嵌套路由的使用"><a href="#六、Nuxt3-嵌套路由的使用" class="headerlink" title="六、Nuxt3 嵌套路由的使用"></a>六、Nuxt3 嵌套路由的使用</h2><p>掌握了动态路由后，我们还需要对嵌套路由有所了解。嵌套路由就是路由是两级，但是程序员的页面是一个。也就是说有父级页面，也有子集页面。类似我们的页面嵌套。</p><ul><li><p>如何建立一个嵌套路由?</p></li><li><p>嵌套路由的建立非常容易，用一句话解释为：目录和文件名同名，就制作了一个嵌套路由。</p></li><li><p>制作一个嵌套路由页面一般需要三步：</p></li><li><p>建立嵌套路由的文件夹（约定大于配置）</p></li><li><p>创建和文件夹相同名称的文件（父页面）</p></li><li><p>在新建文件夹下任意创建子页面</p></li></ul><p>|–pages<br>|—-parent&#x2F;<br>|——child.vue<br>|—-parent.vue</p><p>先在\pages目录下，新建一个文件夹 parent ，然后在pages目录下再建立一个parent.vue的文件。文件建立好之后，编写代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Parent Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  &lt;!-- 子页面的出口--&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NuxtChild</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtChild</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这里的<NuxtChild>就是嵌套路由的出口，所以如果是嵌套路由，就必须要加上这个标签。这是Nuxt的一个内置组件。 有了父页面之后，在新建的parent文件夹下，再建立一个 child.vue子页面。然后编写代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Child Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后为了看到效果，我们还需要一个路由链接过来。直接到index.vue增加路由链接。</p><p><NuxtLink to="/parent/child">&#x2F;parent&#x2F;child</NuxtLink><br /></p><p>多个子页面的制作</p><p>在\pages\parent\文件夹下面再新建一个文件 two.vue。然后编写代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Two Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>写完后再到index.vue页面，增加导航路由。</p><p><NuxtLink to="/parent/two">&#x2F;parent&#x2F;two</NuxtLink><br /></p><p>然后去浏览器查看结果。</p><h2 id="七、-Nuxt3布局模板-让开发高效起来"><a href="#七、-Nuxt3布局模板-让开发高效起来" class="headerlink" title="七、 Nuxt3布局模板 让开发高效起来"></a>七、 Nuxt3布局模板 让开发高效起来</h2><p>布局模板的作用就是你先定义好一个布局页面，然后提取一些通用的UI或代码到可重用的模板中，提高代码复用性，从而降低代码的复杂度，让代码重用性提高。</p><p>简单说就是把一些通用的UI代码代码提出来，然后放在一个模板里，使用这个模板的每个页面都拥有这些代码UI了。</p><p><strong>创建布局模板和使用模板</strong></p><p>比如现在新建一个文件夹\layouts然后再里边写编写一个 defalut.vue文件，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    我是布局模板，default.vue</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>上边这段代码就相当于你创建了一个布局模板。有了这个模板后，可以在任何你想要使用的页面中用<NuxtLayout>标签为页面赋予模板中的内容。比如我们想在每个页面中都赋予这个模板中的内容，就可以在 app.vue 页面中使用这个标签。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NuxtLayout</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hello-world</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">NuxtPage</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">NuxtPage</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLayout</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>这样每个页面都会有布局模板中的效果，因为app.vue是每个页面的出口。</p><p><strong>增加多个插槽</strong></p><p>修改default.vue布局模板，增加第二个插槽，一个叫做one，一个叫做two。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    我是布局模板，default.vue</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span></span><br><span class="language-xml">    ---------</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;two&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>这样编写，一个模板中就有了两个插槽，你可以在页面中通过&lt;template #xxx&gt;的形式来指定对应的模板插槽。 在index.vue中使用多个 <template> 配合模板实现多插槽。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NuxtLayout</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">one</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Index Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/goods-jspang/demo2-38&quot;</span>&gt;</span>Demo2.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/parent/child&quot;</span>&gt;</span>/parent/child<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/parent/two&quot;</span>&gt;</span>/parent/two<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">two</span>&gt;</span> 我是two中的内容 <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLayout</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意上面的页面就精确的对应了模板的插槽。如果页面都非常相似，可以好好的利用这个模板布局。</p><p>这个插槽也可以是多个，只要名字对应正确就可以实现。</p><p>个人小感想:</p><p>布局模板是非常好的一个创意，布局模板再加上组件化，可以大大提高代码的维护性和复用性。所以你想写出漂亮的代码，可以从这两方面多专研。</p><h2 id="八、-Nuxt3-组件的编写"><a href="#八、-Nuxt3-组件的编写" class="headerlink" title="八、 Nuxt3 组件的编写"></a>八、 Nuxt3 组件的编写</h2><p>Nuxt3中创建一个组件</p><p>Nuxt3的所有自定义组件，必须写在<code>components</code>目录下，写在这个目录下他会自动加载到页面中，而不用我们自己不断的重复引入到每个页面中。</p><p>比如现在要创建一个<TheFooter/> 的组件，我们在项目根目录建立一个文件夹<code>components</code> ，然后建立一个文件<code>TheFooter.vue</code>。</p><p>&#x2F;&#x2F;目录结构<br>-|components<br>—-|TheFooter.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Footer Box<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>这段代码只有一个<code>&lt;h1&gt;</code> 标签，在页面中显示出了 The Footer Box 。写好组件后，你可以到任何的页面（page）中进行使用。比如在首页使用他们。 打开<code>/pages/Index.vue</code>页面，然后在最下面加入这个组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NuxtLayout</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">one</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Index Page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/demo1&quot;</span>&gt;</span>Demo1.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/goods-jspang/demo2-38&quot;</span>&gt;</span>Demo2.vue<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/parent/child&quot;</span>&gt;</span>/parent/child<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">NuxtLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/parent/two&quot;</span>&gt;</span>/parent/two<span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLink</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">two</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是two中的内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">TheFooter</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">NuxtLayout</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这时候你到浏览器中就可以看到我们刚写的<code>&lt;TheFooter/&gt;</code> 组件起作用了。</p><p>在布局模板中使用组件</p><p>底部，其实是每个页面都需要包括的组件，拿我们可以直接把这个组件放到<code>布局模板</code>里是非常合适的选择。在布局模板中使用组件和在普通页面中使用组件没有太大的差别，直接使用就可以了。</p><p>这里我们就在<code>\layouts\default.vue</code>布局模板中使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    我是布局模板，default.vue</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span></span><br><span class="language-xml">    ---------<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;two&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TheFooter</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>这时候每个使用了<code>default.vue</code>这个布局模板的页面就会有<code>&lt;TheFooter /&gt;</code>这个组件的存在了。</p><p>组件名称的约定</p><p>我说了很多会了Nuxt3是约定大于配置的开发模式，所以我们要了解Nuxt3框架对于组件名字的约定。比如按照以前的经验，这个<code>&lt;TheFooter/&gt;</code> 组件，习惯写成 <the-footer /> 我们测试一下，如果你这样写在页面里也是生效的。</p><p>&#x2F;layouts&#x2F;default.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    我是布局模板，default.vue</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span></span><br><span class="language-xml">    ---------<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;two&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TheFooter</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">the-footer</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>但是个人建议，你尽量使用大写，因为这样可以区分那些是自定义组件，那些是原生的HTML标签。</p><p>我说了这是个人建议，但不是必须的。你也可以编写一个<code>the-header.vue</code> 的组件，然后用 <the-header/> 的形式使用这个组件也是完全可以的。</p><p>例如下面的两段代码。 在<code>/components</code>文件夹下面，新建一个页面 <code>the-header.vue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>The Header Box<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>然后回到layouts文件夹下的defalut.vue下使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">the-header</span> /&gt;</span></span><br><span class="language-xml">    我是布局模板，default.vue</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span> /&gt;</span></span><br><span class="language-xml">    ---------<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;two&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">TheFooter</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">the-footer</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>也是完全可以使用的。由此看来Nuxt3对于组件的使用还是非常方便的，你只要符合自己的习惯就好。</p><p>小节总结：<br>主要简单学习了Nuxt3中组件的创建和使用方法。从学习中可以总结道Nuxt3的组件使用非常方便，不用重复的不断引入，可以使用在页面中，也可以使用在布局模板中。而且对于书写的名字也有很宽泛的随意性。</p><h2 id="九、Nuxt3-多层级组件、懒加载组件的使用"><a href="#九、Nuxt3-多层级组件、懒加载组件的使用" class="headerlink" title="九、Nuxt3-多层级组件、懒加载组件的使用"></a>九、Nuxt3-多层级组件、懒加载组件的使用</h2><h3 id="1-多层级组件的引用"><a href="#1-多层级组件的引用" class="headerlink" title="1.多层级组件的引用"></a>1.多层级组件的引用</h3><p>多层级组件看似好像很复杂，其实多层级组件就是把一个组件放在一个文件夹里。</p><p>在实际工作中组件会非常多，所以会把组件分门别类的放置。那这种有层级的组件，我们要如何引用？</p><p>比如在<code> components</code>文件夹下面，新建一个 <code>test</code>文件夹，然后在test文件夹下面再创建一个 <code>MyButton.vue</code>文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>MyButton<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>写完这个组件后，最关键的一步，就是在页面里如何引用到这个组件。方法很简单，只要在这个页面的前面加上文件夹的名称就可以了。我们的目录结构如下：</p><p>–|components<br>—-|test<br>——|MyButton.vue</p><p>那引用组件的方法就是这样的。</p><p><strong><TestMyButton /></strong></p><p>如果有很多层级，我们也依照这个规律，加入前缀就可以实现多层级组件的引用了。</p><p>这种设计的目的是让框架可以应对复杂项目和多组件的需求，让我们的组件更加有条例。</p><h3 id="2-组件的懒加载"><a href="#2-组件的懒加载" class="headerlink" title="2.组件的懒加载"></a>2.组件的懒加载</h3><p>如果在组件名前面加上Lazy前缀，则可以按需懒加载该组件。懒加载组件的目的是在项目打包的时候包更小。简单理解可以理解为只有在组件显示在页面上时才进行加载。</p><p> 比如我们现在要做一个文本，这个文本只有在<code> show</code>的值为 true的时候才会显示。然后其他时候他不显示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;lazyText v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;show&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>这时候我们就可以使用懒加载组件。如果不总是需要该组件，这将特别有用。</p><p>在<code>components</code>文件夹下，新建一个 <code>LazyText.vue</code>的文件，然后编写代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Lazy Text Content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>有了组件之后，我们在新建一个页面<code>demo2.vue</code>。然后用一个按钮来控制这个组件的显示和隐藏。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">lazyText</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span>显示/隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  show.<span class="hljs-property">value</span> = show.<span class="hljs-property">value</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然后到浏览器看一下效果，这种就是懒加载组件的使用。</p><p>这种组件也可以用来优化页面的打开速度，比如你有一个几百行的长列表。直接加载会给服务器造成很大压力，如果在其他内容已经完成后，过1-2秒再加载这个长列表，就会给用户很好的体验。也会减少服务器的压力。</p><h2 id="十、Nuxt3-模块化代码-Composable文件夹的试用"><a href="#十、Nuxt3-模块化代码-Composable文件夹的试用" class="headerlink" title="十、Nuxt3 模块化代码 Composable文件夹的试用"></a>十、Nuxt3 模块化代码 Composable文件夹的试用</h2><p>在开发中我们经常会有一些通用的业务逻辑代码，需要模块化管理，这时候就可以试用Composable 这个文件夹来编写。</p><p>比如我们常用的显示当前时间，这种常用的通用代码，就可以编写成一个单独的代码段，然后在每个页面进行使用。</p><p>Composable中创建time.ts的编写</p><p>新建一个文件夹composables 然后在文件夹里边，新建一个文件time.ts ，然后编写下面的代码。这段代码你一定编写过，所以就不给大家讲解里边的具体含义了。你可以直接复制这段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTime</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-keyword">const</span> timezone = <span class="hljs-number">8</span>;<br>  <span class="hljs-keyword">const</span> offset_GMT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTimezoneOffset</span>();<br>  <span class="hljs-keyword">const</span> nowDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>  <span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(nowDate + offset_GMT * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> + timezone * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>  <span class="hljs-keyword">const</span> date = today.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">twoDigits</span>(today.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-title function_">twoDigits</span>(today.<span class="hljs-title function_">getDate</span>());<br>  <span class="hljs-keyword">const</span> time = <span class="hljs-title function_">twoDigits</span>(today.<span class="hljs-title function_">getHours</span>()) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-title function_">twoDigits</span>(today.<span class="hljs-title function_">getMinutes</span>()) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-title function_">twoDigits</span>(today.<span class="hljs-title function_">getSeconds</span>());<br>  <span class="hljs-keyword">const</span> timeString =<span class="hljs-string">&#x27;当前时间：&#x27;</span> + date + <span class="hljs-string">&#x27;  &#x27;</span> + time;<br>  <span class="hljs-keyword">return</span> timeString;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">twoDigits</span>(<span class="hljs-params">val</span>) &#123;<br>  <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span> + val;<br>  <span class="hljs-keyword">return</span> val;<br>&#125;<br></code></pre></td></tr></table></figure><p>写完之后，如何在页面中使用呢？在pages 文件夹下面，新建一个\pages\demo3.vue 的文件，然后你就可以直接在这个页面中使用刚才写的获得时间的方法了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>&#123;&#123; time &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> time = <span class="hljs-title function_">ref</span>(<span class="hljs-title function_">getTime</span>());</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>打开浏览器就可以获得当前时间了。 你可以把任何你在项目中经常使用的代码，封装到这个文件夹里，实现代码的复用。这个文件夹的功能和组件很相似，只是组件是UI部分的代码复用，而这个是业务逻辑代码的复用。</p><ul><li>composables的引入规则</li></ul><p>composables 文件夹的引入规则是，只有顶层文件会被引入。也就是说我们如果在这个文件下再新建一个文件夹，是不会被引入到页面中实现代码复用的。 比如下面的文件格式就没办法引入。</p><p>–|composables<br>—-|test<br>——|test.ts</p><p>但是有一种是例外的，就是我们可以写成下面的这种形式。</p><p>–|composables<br>—-|test<br>——|index.ts</p><p>我们这里测试一下，新建一个\test 文件夹，然后在它的下面再创建一个index.ts 文件。写入下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">test</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;trumen.com&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后回到Demo3.vue 页面使用test( ) 方法，结果是可以使用这个方法的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>&#123;&#123; time &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> time = <span class="hljs-title function_">ref</span>(<span class="hljs-title function_">getTime</span>());</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">test</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>我们在\test 文件夹下面，再新建一个test.ts 文件，然后编写代码，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">testTwo</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>你会发现，这种形式是不能直接引入到页面当中进行使用的，会直接报错<code>testTwo is not defined</code>.也就是找不到这个方法。</p><p>小节总结</p><p>这节主要学习了Nuxt3中业务逻辑代码的复用。你可以把每个页面都使用的代码放在composables 文件夹中，然后按需使用就好。</p><p>但是也要有个度，虽没有依据，如果这种方法多起来，会造成页面性能的下降。毕竟每个方法都会引导页面中。</p><h2 id="十一、Nuxt3中的数据请求"><a href="#十一、Nuxt3中的数据请求" class="headerlink" title="十一、Nuxt3中的数据请求"></a>十一、Nuxt3中的数据请求</h2><p>Nuxt3中提供了四种方法：<strong>useAsyncData</strong> 、<strong>useFetch</strong> 、<strong>useLazyFetch</strong> 、<strong>useLazyAsyncData</strong> 。</p><p>提供的四个方法，都是获取后台数据的，但是使用场景和使用方法有所不同。</p><p>本节练习使用的请求URL：<a href="http://121.36.81.61:8000/getTenArticleList">http://121.36.81.61:8000/getTenArticleList</a> （可以获得博客上的10条文章目录）</p><h3 id="1、useAsyncData的使用"><a href="#1、useAsyncData的使用" class="headerlink" title="1、useAsyncData的使用"></a>1、<strong>useAsyncData的使用</strong></h3><p>使用useAsyncData 异步获取数据，它可以使用在页面中，组件和插件中。我们先通过这个方法来获取一下服务端的数据。 在pages文件夹下，新建一个页面，然后编写下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>&#123;&#123;list&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">useAsyncData</span>(<span class="hljs-string">&quot;getList&quot;</span>, <span class="hljs-function">() =&gt;</span></span></span><br><span class="language-javascript"><span class="language-xml">  $fetch(<span class="hljs-string">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> list = <span class="hljs-title function_">ref</span>(res)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//const list = ref(res.data._rawValue.data)得到数据</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="hljs-comment">//$fetch( )方法是nuxt3提供的内置方法，我们直接可以使用。</span><br></code></pre></td></tr></table></figure><p>写完后，可以打开浏览器的调试面包，在终端里可以看到返回值是一个对象，对象里有四个属性。</p><ul><li><p>data: 返回的数据，我们需要的服务器数据就在这个属性里。</p></li><li><p>error：是否存在错误，如果存在错误，可以在这个属性中获得，返回的是一个对象。</p></li><li><p>pending：这次请求的状态，返回的是布尔值。</p></li><li><p>refresh：这个返回的是一个函数，可以用来刷新 handler函数返回的数据。</p><ul><li><p>这个方法的一个特点是，它可以进行很多选项的配置，但是在真实开发中，其实我们用的不多。</p></li><li><p>最常用的就是lazy 选项，比如我们设置成true 就是需要数据都返回后，才会显示出来 ，简单说就是会阻塞页面。默认是false。</p></li><li><p>比如要设置lazy为true，就可以这样写。因为我们的数据太少，所以基本看不出来效果。</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">useAsyncData</span>(<br>  <span class="hljs-string">&quot;getList&quot;</span>,<br>  <span class="hljs-function">() =&gt;</span> $fetch(<span class="hljs-string">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>),<br>  &#123;<br>    <span class="hljs-attr">lazy</span>: <span class="hljs-literal">true</span>,<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><p>这个可配置的选项option 其实还是挺多的，有七项。如果想详细了解的，可以到官方去看一下，地址：</p><p><a href="https://v3.nuxtjs.org/api/composables/use-async-data">https://v3.nuxtjs.org/api/composables/use-async-data</a></p><p>但这些选项在开发中很少被配置，一般都使用默认值。所以Nuxt3又提供了一个简单的方法useFetch 。</p><h3 id="1、useFetch的使用"><a href="#1、useFetch的使用" class="headerlink" title="1、useFetch的使用"></a>1、<strong>useFetch</strong>的使用</h3><p>useFetch 可以理解为所有的都选择默认配置的useAsyncData 方法。比如还是上面的请求，我们就可以写成下面的形式。</p><p>const res &#x3D; await useFetch(“<a href="http://121.36.81.61:8000/getTenArticleList">http://121.36.81.61:8000/getTenArticleList</a>“);</p><p>这样我们依然可以获取数据，当然也是可以传递参数和配置请求方法的。比如我们要设置请求方法是get，传递id是1, 就可以写成下面的形式。</p><p>const res &#x3D; await useFetch(“<a href="http://121.36.81.61:8000/getTenArticleList">http://121.36.81.61:8000/getTenArticleList</a>“, {<br>  method: “get”,<br>  id: 1,<br>});</p><p>现在我们要把获取到的数据，显示在页面上。修改一下程序，定义变量，然后用ref来赋值就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>&#123;&#123; list &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">useFetch</span>(<span class="hljs-string">&quot;http://121.36.81.61:8000/getTenArticleList&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> list = <span class="hljs-title function_">ref</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">_rawValue</span>.<span class="hljs-property">data</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这样就可以在页面上看到这些从后端得到的数据了。在实际开发中，我们会把这个数组循环输出，并制作一个精美的列表。</p><p>当我们会使用了useAsyncData 和 useFetch 这两个方法后，useLazyAsyncData 和useLazyFetch 也自然会使用了。他们只是把配置选项中的Lazy 设置成了true， 也就是会阻塞页面。 </p><h2 id="十二、Nuxt3-middleware路由中间件"><a href="#十二、Nuxt3-middleware路由中间件" class="headerlink" title="十二、Nuxt3 middleware路由中间件"></a>十二、Nuxt3 middleware路由中间件</h2><p>Nuxt3提供了路由中间件的概念，你可以在整个应用使用它，目的是在导航到某一个页面之前，执行一些代码。最常见的路由守卫就可以用这个实现。</p><h3 id="1-中间件的基本格式"><a href="#1-中间件的基本格式" class="headerlink" title="1.中间件的基本格式"></a>1.中间件的基本格式</h3><p>我们先写一个最简单的中间件，就是在控制台打印来的页面，和要去的页面。目的是通过最简单的实例来了解中间件的基本格式。 </p><p>在项目根目录，新建一个middleware的文件夹，然后在文件下边新建一个文件default.global.ts 的文件。</p><p>其中的.global代表这个中间件是全局的，也就是在每次跳转都会执行下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtRouteMiddleware</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;要去那个页面:&quot;</span>+to.<span class="hljs-property">path</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;来自那个页面:&quot;</span>+<span class="hljs-keyword">from</span>.<span class="hljs-property">path</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>写完之后，我们可以到浏览器看一下效果。如果一切正常，你可以看到，这时候你在每次跳转时，都会在终端中打出结果。</p><p>当然我们可以继续编写代码，看看to 和from里到底都有什么属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtRouteMiddleware</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;要去那个页面:&quot;</span>+to.<span class="hljs-property">path</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(to)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;来自那个页面:&quot;</span>+<span class="hljs-keyword">from</span>.<span class="hljs-property">path</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">from</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>可以看到里边的内容是非常多的，特别是to的时候，你可以根据这些来进行编程。</p><h3 id="2-通过中间件-设置路由守卫"><a href="#2-通过中间件-设置路由守卫" class="headerlink" title="2.通过中间件 设置路由守卫"></a>2.通过中间件 设置路由守卫</h3><p>当我们了解路由中间件的基本写法后，在增加一些难度，来模仿一下路由守卫。</p><p>比如我们要访问的页面是<code>http://localhost:3000/demo1</code>，现在设置路由守卫，不允许访问，而是跳回到首页。那代码就可以写成下面的样子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtRouteMiddleware</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/demo1&#x27;</span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;禁止访问这个页面&#x27;</span>)<br>     <span class="hljs-title function_">abortNavigation</span>()  <span class="hljs-comment">//停止当前导航，可以使用error进行报错</span><br>     <span class="hljs-keyword">return</span>  <span class="hljs-title function_">navigateTo</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这时候再到浏览器访问demo1 页面，已经不能访问了，但其他页面是可以访问的。</p><h3 id="3-只对一个页面起作用"><a href="#3-只对一个页面起作用" class="headerlink" title="3.只对一个页面起作用"></a>3.只对一个页面起作用</h3><p>上面都是对所有路由起作用的，如果只想中间件对一个特殊页面起作用，也是可以的。只要去掉.global的后缀就是可以的。 </p><p>在middleware 文件夹下，新建一个页面，default.ts，并编写下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineNuxtRouteMiddleware</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>这时候它对任何页面都是不起作用的，你需要再去对应的页面里注册一下。去pages文件夹，新建一个文件demo7.vue。然后需要注册这个页面使用这个中间件，代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Demo7 Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">definePageMeta</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">middleware</span>: [<span class="hljs-string">&quot;default&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// or middleware: &#x27;auth&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这样就对这个页面注册了一个专属的导航中间件。</p><h2 id="十三、补充-Nuxt3-安装失败的时候如何处理"><a href="#十三、补充-Nuxt3-安装失败的时候如何处理" class="headerlink" title="十三、补充-Nuxt3 安装失败的时候如何处理"></a>十三、补充-Nuxt3 安装失败的时候如何处理</h2><p>今天我重新安装了公司的系统，系统安装完成后，准备再安装Nuxt3新目录，发现Nuxt3在挂了代理的情况下，依然无法安装成功，会出现下面的错误。</p><p><strong>npx nuxi init nuxt-app</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\Demo&gt;npx nuxi init nuxt-app<br>npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.<br>Need to install the following packages:<br>  nuxi<br>Ok to proceed? (y) y<br>Nuxt CLI v3.0.0-27398533.8edd481 <br> WARN  could not fetch remote https://github.com/nuxt/starter                          <br> WARN  Make sure you have installed git correctly<br></code></pre></td></tr></table></figure><ul><li>下载Nuxt3的文件包<br>在多次尝试失败的情况下，我决定先去Github打包下载Nuxt的基本文件，然后再用yarn命令进行安装。</li></ul><p>于是我再Nuxt3的官方Github上找到了这样的网址。</p><p><a href="https://github.com/nuxt/starter/tree/v3">https://github.com/nuxt/starter/tree/v3</a><br>打开网址可以看到，这个就是最简单的Nuxt3项目的目录，这时候你可以Clone下来，但我发现Clone还是会报错，意思是无法找到仓库位置。那这时候我只能用最原始的下载ZIP（Download ZIP）的方式了。</p><p>下载完成后，再使用yarn命令进行安装。</p><ul><li>yarn install</li></ul><p>稍等一会，就可以安装成功了。安装成功以后，再使用</p><ul><li>yarn dev</li></ul><p>开启服务后，再浏览器中输入 <a href="http://localhost:3000/">http://localhost:3000/</a> ,就可以看到结果了。 这样我们就解决了无法用官方给出的方法安装的问题了。本视频只是个补充视频，希望可以帮助到安装失败的用户，进行安装。</p><h2 id="十四、Nuxt3-中SEO相关的配置"><a href="#十四、Nuxt3-中SEO相关的配置" class="headerlink" title="十四、Nuxt3 中SEO相关的配置"></a>十四、Nuxt3 中SEO相关的配置</h2><p>使用Nuxt3框架解决的主要问题就是要对搜索引擎友好,那为什么搜索引擎可以搜到我的网站那？这要归功于HTML中的Mate标签和title 标签。</p><p>title 和 meta 标签的作用</p><p>title标签：主要是为了告诉搜索引擎我们的网站标题是什么，然后搜索引擎才会根据你提供的的title给你打上tag，用户在搜索的时候才会搜索到你。</p><p>meta标签：这个标签根据name的不同有很多中，和SEO相关的主要是name&#x3D;description 和name&#x3D;keywords 这两种，如果不设置这两个标签，对SEO的效果就会有所影响。 </p><p>所以我们在开发需要SEO的网站时，对这两个标签一定要进行设置。当然你可以用两种方法对meta标签进行设置，</p><p>这节我们就讲两个方法。 1.使用useHead( )方法 2.直接在模板中使用标签</p><p>Nuxt3中的useHead 和useMeta</p><p>Nuxt3中提供了 useHead方法来设置SEO需要的内容，用它可以设置HTML中Head的全部内容，所以这也包括meta标签的内容，基本的使用方法也是很简单。</p><p>在根目录中下的 page文件夹下，新建一个文件<code>demo1.vue</code>，然后使用 useHead( )方法来设置头部信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Demo8 Page<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">useHead</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot; 博客&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">viewport</span>: <span class="hljs-string">&quot;width=device-width,initial-scale=1,maximum-scale=1 &quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">charset</span>: <span class="hljs-string">&quot;utf-8&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">meta</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;博客&quot;</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;keywords&quot;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;trumen&quot;</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  ],</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果你这时候报错，说明你按照的不是最新的Nuxt版本，可以直接安装最新的版本，我这里就在最新的版本上使用了useHead( ) 方法。</p><p>使用template中的标签定义Head</p><p>除了使用useHead( ) 方法外，你还可以直接使用<template> 中的的<head>来定义SEO相关的属性。</p><p>我们在&#x2F;pages 文件夹下面，新建一个demo1.vue 的文件，然后编写下面的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;title&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> title = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;博客&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>从代码中可以看到，我们直接使用了<Head>标签，然后在里边还可以使用<Title>标签和<Meta>标签，可以设置这两个标签后，关于SEO的设置就都可以作了。</p><p> 我们使用Nuxt的意义就在于可以有很好的SEO效果，所以在你开发的时候，一定要对页面进行标题、描述和关键词的设置和编写。 </p><h2 id="十五、Nuxt3中Cookie的设置"><a href="#十五、Nuxt3中Cookie的设置" class="headerlink" title="十五、Nuxt3中Cookie的设置"></a>十五、Nuxt3中Cookie的设置</h2><p>在网页制作时，经常需要临时保存一些信息到Cookie中，而不是全部都保存到数据库中，这样作能减轻服务器的压力。这节就学习一下Nuxt3中的Cookie操作。</p><h3 id="1-cookie的作用"><a href="#1-cookie的作用" class="headerlink" title="1.cookie的作用"></a>1.cookie的作用</h3><p>先来了解一下Cookie的作用，Cookie最常见的开发作用就是临时记录用户个人信息，比如我们登录了一个网站，然后提醒下次记住信息，下次再浏览这个网站时，就不用登录了。</p><p>这就是cookie起的作用，当我们登录一次后，把登录信息记录在了cookie里，但是这个记录是有时效性的，通过属性可以进行设置。比如你连续7天没登录，那cookie就过期了，再浏览这个网站就需要重新登录了。</p><h3 id="2-useCookie-方法的使用"><a href="#2-useCookie-方法的使用" class="headerlink" title="2.useCookie( )方法的使用"></a>2.useCookie( )方法的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cookie = <span class="hljs-title function_">useCookie</span>(name, options)<br></code></pre></td></tr></table></figure><p>制作登录太复杂，我们这属于是入门的教程，所以就用Cookie制作一个计数器，让你了解Cookie的使用方法。这里要使用的函数就是useCookie ,代码如下。<br>在pages 文件夹下，新建一个页面demo3.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counter:&#123;&#123; counter &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>Reset<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useCookie</span>(<span class="hljs-string">&quot;counter&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">counter.<span class="hljs-property">value</span> = counter.<span class="hljs-property">value</span> || <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reset</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  counter.<span class="hljs-property">value</span> = <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  counter.<span class="hljs-property">value</span> = counter.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这段代码的意思，我创建了一个叫做counter的Cookie值，然后取得Cookie值，放到页面上，如果没有Cookie值的时候，就初始化Counter的Cookie值为0。然后我又作了两个按钮，一个是直接将Cookie值设置为0，一个是每点击一次Cookie加1。</p><p>代码编写完成后，可以到浏览器中查看一下效果，你也可以按F12打开浏览器的调试模式，找到Application 标签，再找到Cookie 选项，就可以看到里边的Cookie值了，这也很好的证明我们的Cookie值设置成功了。</p><p>常用的相关属性</p><p>useCookie( )函数，第一个参数是设置Cookie值的名字，第二个参数为选项option,我们接着来看有那些可选择配置的Cookie参数。（注意：我这里只说两个常用的）</p><p>maxAge&#x2F;expires</p><p>这两个参数都是设置Cookie的有效时长的，如果两个参数你都不设置，那Cookie的值在关闭浏览器的时候将会被清空。两个参数的不同是，maxAge的值是一个数字Number,而expires的值是一个日期对象Date object.<br>比如我们希望设置Cookie的过气时间是一个小时，也就是3600秒，那我们的配置就需要这样写。</p><p>const counter &#x3D; useCookie(“counter”,{<br>  maxAge:3600,<br>});</p><p><strong>httpOnly</strong></p><p>这算是一个安全设置，如果把httpOnly设置为true，可以对最常见的XSS攻击起到防范作用。</p><p>什么是HttpOnly？ HttpOnly是包含在http返回头Set-Cookiew里面的一个附件的flag，所以它是后端服务器对cookie设置的一个附件属性，在生成cookie时使用HttpOnly标志有助于减轻客户端脚本访问收保护cookie的风险。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useCookie</span>(<span class="hljs-string">&quot;counter&quot;</span>,&#123;<br>  <span class="hljs-attr">htttpOnly</span>:<span class="hljs-literal">true</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>secure</strong></p><p>这也是一个安全设置，如果你的网址不是HTTPS的，并且把secure的值设置为true，那Cookie的值就不会传递给服务端。总的来说还是一个为了服务器安全的设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useCookie</span>(<span class="hljs-string">&quot;counter&quot;</span>,&#123;<br>  <span class="hljs-attr">secure</span>:<span class="hljs-literal">true</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>这个需要配置HTTPS 所以不太好演示，这里也就不演示了。</p><p>其余的还有domain ,path ,sameSite ,encode,decode 这些属性设置，其实都跟安全有关，因为Cookie的设置确实需要考虑安全性，所以根据服务端和app的需求，尽量设置多的安全性参数</p>]]></content>
    
    
    
    <tags>
      
      <tag>Nuxt3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pinia</title>
    <link href="/2023/04/01/Pinia/"/>
    <url>/2023/04/01/Pinia/</url>
    
    <content type="html"><![CDATA[<h1 id="1-pinia介绍"><a href="#1-pinia介绍" class="headerlink" title="1.pinia介绍"></a>1.pinia介绍</h1><p>一个全新的用于Vue的状态管理库，下一个版本的Vuex，也就是Vuex5.0。</p><p>之前的vuex主要用于vue2,选项式API；如果想要在vue3中使用vuex，需要使用它的版本4（只是一个过渡的选择，还有缺陷）。故Vue3伴随着组合式API诞生后。设计了全新的Vuex：pinia(也就是vuex5)</p><ul><li><p>pinia的模块更像一个hooks，不需要嵌套，模块之间可以互相引用，让代码组织更灵活</p></li><li><p>符合Vue3 的 Composition api的风格，可以直接结合vue3的API定义状态，没有嵌套模块</p></li><li><p>没有mutations，只有 state、getters、actions</p></li><li><p>vue2和vue3都可以支持</p></li><li><p>支持TypeScript</p></li><li><p>支持Vue DevTools，devtools同样可以追踪到状态的修改</p></li></ul><p>等等…….</p><p>pinia从使用角度和vuex几乎是一样的，比vuex等简单了。</p><p>vuex有四个核心概念：state、getters、mutations、actions.</p><p>pinia有三个：state、getters、actions(同步异步都支持)</p><hr><p>vuex当前最新版本是4.x</p><ul><li><p>vuex4用于vue3</p></li><li><p>vuex3用于vue2</p></li></ul><p>pinia当前最新版本是2.x</p><ul><li><p>既支持vue2也支持vue3</p></li><li><p>可以认为就是vuex5,因为它的作者是官方的开发人员。。。</p></li></ul><h1 id="2-pinia的使用"><a href="#2-pinia的使用" class="headerlink" title="2.pinia的使用"></a>2.pinia的使用</h1><h2 id="一、初始化配置"><a href="#一、初始化配置" class="headerlink" title="一、初始化配置"></a>一、初始化配置</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>npm init vite@latest</p><p>(详见Vite 官方中文文档)</p><h3 id="2-安装-Pinia"><a href="#2-安装-Pinia" class="headerlink" title="2. 安装 Pinia"></a>2. 安装 Pinia</h3><p>npm install pinia</p><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><h3 id="1-创建-Pinia-实例并挂载"><a href="#1-创建-Pinia-实例并挂载" class="headerlink" title="1. 创建 Pinia 实例并挂载"></a>1. 创建 Pinia 实例并挂载</h3><p><strong>src&#x2F;main.js</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./style.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-comment">// 创建 Pinia 实例</span><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><br><span class="hljs-comment">// 挂载到Vue根实例</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(pinia).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>如果使用的是Vue2，还需要安装一个插件，并将创建一个pinia注入到应用的root：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; createPinia, <span class="hljs-title class_">PiniaVuePlugin</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">PiniaVuePlugin</span>)<br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-comment">// 其他选项...</span><br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// 注意同一个pinia实例可以在多个Vue应用中使用</span><br>  pinia,<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-定义-Store"><a href="#2-定义-Store" class="headerlink" title="2.定义 Store"></a>2.定义 Store</h3><p> store 是使用<strong>defineStore()</strong> 定义的，第一个参数是整个应用中store的唯一名称(id)</p><p> 建议：</p><p>可以为defineStore()的返回值任意命名，但是最好使用use加上store的名称和Store，例如：useUserStore、useCartStore、useProductStore</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>  <span class="hljs-comment">// 具体代码...</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-Store中的选项"><a href="#3-Store中的选项" class="headerlink" title="3. Store中的选项"></a>3. Store中的选项</h3><p>类似于Vue的选项API，也可以传递一个带有state、actions和getters属性的选项对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Eduardo&#x27;</span> &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">doubleCount</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">count</span> * <span class="hljs-number">2</span>,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>    &#125;,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>然而，state就类似于组件的 data ，用来存储全局状态的，getters就类似于组件的 computed，用来封装计算属性，有缓存功能，actions类似于组件的 methods，用来封装业务逻辑，修改 state。</p><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><p>如果你要在组件中使用，就需要先将<strong>store</strong>引入进来，并在**setup()**中声明调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; useMainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../store&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> mainStore = <span class="hljs-title function_">useMainStore</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mainStore.<span class="hljs-property">count</span>); <span class="hljs-comment">// 这样就可以在组件中获取到Store中的count了</span><br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.foo &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>那么，这样就会产生一个问题，每次都需要mainStore，这样就很麻烦。</p><p>如果你对ES6了解的话可能会想到解构出来。但是这样取出来的数据是有问题的，它已经丢失了响应式，也就是一次性的。</p><p>就像上面这段代码，解构出来的数据就已经失去了响应式，如果之后对数据的修改Vue是无法监测到数据变化的。</p><p>解决办法：这里就需要使用Pinia为我们提供的**storeToRefs()**API这就类似Vue3中的toRefs()</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> mainStore = <span class="hljs-title function_">useMainStore</span>();<br><span class="hljs-keyword">const</span> &#123; count, foo &#125; = <span class="hljs-title function_">storeToRefs</span>(mainStore);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      count,<br>      foo,<br>    &#125;<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-状态更新和Actions"><a href="#5-状态更新和Actions" class="headerlink" title="5.状态更新和Actions"></a>5.状态更新和Actions</h3><p>Actions相当于组件中的方法。它们可以使用defineStore()中的actions属性来定义，并且它们非常适合定义业务逻辑</p><p>那么接下来怎么修改数据呢？这里有四种方法来修改。</p><p>例如：这里我们需要修改state中的count、foo、arr</p><p><strong>store中</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useMainStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-attr">arr</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>  &#125;),<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>组件中</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; arr &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChangeState&quot;</span>&gt;</span>修改数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">...</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChangeState</span> = (<span class="hljs-params"></span>) =&gt;&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    ...</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>方法一：最简单的方式修改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">mainStore.<span class="hljs-property">count</span>++;<br>mainStore.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></td></tr></table></figure><p>方法二：如果需要修改多个数据，建议使用 $patch批量更新</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">mainStore.$patch(&#123;<br>  <span class="hljs-attr">count</span>: mainStore.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  <span class="hljs-comment">// 由于是以对象形式传递的，显然如果要给数组追加元素不是一个很好的选择</span><br>  <span class="hljs-attr">arr</span>: [...mainStore.<span class="hljs-property">arr</span>, <span class="hljs-number">4</span>],<br>&#125;);<br></code></pre></td></tr></table></figure><p>方法三：更好的批量更新的方法：$patch也可以传递一个函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">mainStore.$patch(<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这里接收的形参就是state</span><br>  state.<span class="hljs-property">count</span>++;<br>  state.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>  state.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>方法四：逻辑比较多的时候可以封装到 actions 里面</p><p>组件中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">mainStore.<span class="hljs-title function_">changeState</span>(); <span class="hljs-comment">// 在修改数据的方法中可以直接调用这个封装在actions里面的函数</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useMainStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>  ...<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// 注意：不能使用箭头函数定义，因为使用箭头函数会导致 this 指向错误</span><br>    <span class="hljs-title function_">changeState</span>(<span class="hljs-params">num</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += num;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><br>      <span class="hljs-comment">// this.$patch(&#123;&#125;) // 这里如果批量更新和方法二、三一样</span><br>      <span class="hljs-comment">// this.$patch((state) =&gt; &#123;&#125;);</span><br>    &#125;,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-Getters使用"><a href="#6-Getters使用" class="headerlink" title="6.Getters使用"></a>6.Getters使用</h3><p>Getters完全等同于Store state的计算值。</p><p>可以使用defineStore()中的getters属性来定义它们，并且它们将state作为第一个参数接收，以鼓励使用箭头函数。</p><p>如果你使用的是普通函数的话，这个参数是可选的不接收也可以使用this，</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useMainStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">100</span>,<br>  &#125;),<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-comment">// 函数接收一个可选的参数，是 state 对象</span><br>    <span class="hljs-comment">/* count10(state) &#123;</span><br><span class="hljs-comment">            console.log(&#x27;count10 被调用了&#x27;);</span><br><span class="hljs-comment">            return state.count * 10;</span><br><span class="hljs-comment">        &#125;, */</span><br><br>    <span class="hljs-comment">// 🔴 如果是在ts中的话，this的类型是推导不出来的，所以需要手动指定</span><br>    <span class="hljs-comment">/* count10: number() &#123;</span><br><span class="hljs-comment">            console.log(&#x27;count10 被调用了&#x27;);</span><br><span class="hljs-comment">            return this.count * 10;</span><br><span class="hljs-comment">        &#125;, */</span><br>    <span class="hljs-attr">count10</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">count</span> * <span class="hljs-number">10</span>,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><p><strong>src&#x2F;store&#x2F;index.js</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-comment">// 1、定义容器</span><br><span class="hljs-comment">// 参数1：容器名称 ID ，必须唯一，将来 Pinia 会把所有的容器挂载到根容器</span><br><span class="hljs-comment">// 参数2：选项对象</span><br><span class="hljs-comment">// 返回值：一个函数，调用得到容器实例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useMainStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;main&#x27;</span>, &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类似于组件的 data，用来存储全局状态的</span><br><span class="hljs-comment">     * 1、必须是函数：这样是为了在服务端渲染的时候避免交叉请求导致数据的状态污染</span><br><span class="hljs-comment">     * 2、必须是箭头函数：这是为了更好的 TS 类型推导</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        <span class="hljs-attr">arr</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    &#125;),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类似于组件的 computed，用来封装计算属性，有缓存功能</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-comment">// 函数接收一个可选的参数，是 state 对象</span><br>        <span class="hljs-comment">/* count10(state) &#123;</span><br><span class="hljs-comment">            console.log(&#x27;count10 被调用了&#x27;);</span><br><span class="hljs-comment">            return state.count * 10;</span><br><span class="hljs-comment">        &#125;, */</span><br><br>        <span class="hljs-comment">//  如果是在ts中的话，this的类型是推导不出来的，所以需要手动指定(加:number)</span><br>        <span class="hljs-comment">/* count10() &#123;</span><br><span class="hljs-comment">            console.log(&#x27;count10 被调用了&#x27;);</span><br><span class="hljs-comment">            return this.count * 10;</span><br><span class="hljs-comment">        &#125;, */</span><br>        <span class="hljs-attr">count10</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> state.<span class="hljs-property">count</span> * <span class="hljs-number">10</span>,<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类似于组件的 methods，用来封装业务逻辑，修改 state</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-comment">//注意：不能使用箭头函数定义，因为使用箭头函数会导致 this 指向错误</span><br>        <span class="hljs-title function_">changeState</span>(<span class="hljs-params">num</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += num;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br><br>            <span class="hljs-comment">// this.$patch(&#123;&#125;)</span><br>            <span class="hljs-comment">// this.$patch((state) =&gt; &#123;&#125;);</span><br>        &#125;,<br>    &#125;,<br>&#125;);<br><span class="hljs-comment">// 2、使用容器中的 state</span><br><br><span class="hljs-comment">// 3、修改 state</span><br><br><span class="hljs-comment">// 4、容器中的 action 的使用</span><br><br></code></pre></td></tr></table></figure><p><strong>src&#x2F;components&#x2F;HelloWord.vue</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.foo &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.arr &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.count10 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.count10 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; mainStore.count10 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChangeState&quot;</span>&gt;</span>修改数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> &#123; useMainStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../store&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> mainStore = <span class="hljs-title function_">useMainStore</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mainStore.<span class="hljs-property">count</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 这是有问题的，因为这样拿到的数据不是响应式的，是一次性的</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// Pinia 其实就是把 state 数据都做了 reactive 处理了</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// const &#123; count, foo &#125; = mainStore;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 解决办法就是使用 storeToRefs</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 把解构出来的数据做 ref 响应式代理</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> &#123; count, foo &#125; = <span class="hljs-title function_">storeToRefs</span>(mainStore);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleChangeState</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法一：最简单的方式就是这样</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// mainStore.count++;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// mainStore.foo = &#x27;hello&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法二：如果需要修改多个数据，建议使用 $patch 批量更新</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">/* mainStore.$patch(&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        count: mainStore.count + 1,</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        foo: &#x27;hello&#x27;,</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        arr: [...mainStore.arr, 4],</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">    &#125;); */</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法三 更好的批量更新的方法：$patch 也可以传入一个函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">/* mainStore.$patch((state) =&gt; &#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        state.count++;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        state.foo = &#x27;hello&#x27;;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        state.arr.push(4);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">    &#125;); */</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法四：逻辑比较多的时候可以封装到 actions 里面</span></span></span><br><span class="language-javascript"><span class="language-xml">    mainStore.<span class="hljs-title function_">changeState</span>(<span class="hljs-number">10</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>pinia和vue-detools<br><a href="https://postimg.cc/Zvc3SwZc"><img src="https://i.postimg.cc/6TshCPmD/image.png" alt="image.png"></a></p><h1 id="3-”实战”"><a href="#3-”实战”" class="headerlink" title="3.”实战”"></a>3.”实战”</h1><h2 id="一、环境初始化"><a href="#一、环境初始化" class="headerlink" title="一、环境初始化"></a>一、环境初始化</h2><h3 id="1-创建项目-1"><a href="#1-创建项目-1" class="headerlink" title="1.创建项目"></a>1.创建项目</h3><p>npm create vite</p><p>然后跟着提示一步步走，使用ts<br>2.安装pinia<br>二、基本使用<br>1.创建pinia示例并挂载<br>2.基本使用<br>打开App.vue，砍掉没用的，我们直接使用项目中HelloWorld.vue组件<br>下面是HelloWorld.vue的内容<br>从以上几种修改store数据的方式，可以看出pinia的使用非常的简便+灵活，也非常的Composition API。推荐使用后两种方式。<br>三、购物车案例<br>1.准备工作<br>需求说明<br>商品列表<br>展示商品列表<br>添加到购物车<br>购物车<br>展示购物车商品列表<br>展示总价格<br>订单结算<br>展示结算状态<br>页面模板<br>数据接口<br>2.开始开发<br>定义Store<br>以下代码学习点：<br>as类型断言<br>如何在actions中写异步操作<br>下面的代码，有以下学习点：<br>type类型合并与过滤<br>跨容器通信的极致优雅操作<br>重写组件<br>src\components\ProductList.vue<br>Vue<br>复制代码<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br><template><br>  <ul><br>    <li v-for="item in productsStore.all"><br>       - <br>      <br><br>      &lt;button :disabled&#x3D;”!item.inventory” @click&#x3D;”cartStore.addProductToCart(item)”&gt;添加到购物车</button><br>    </li><br>  </ul><br></template></p><script lang="ts" setup>import { useCartStore } from '../store/cart';import { useProdunctsStore } from '../store/products'const productsStore = useProdunctsStore()const cartStore = useCartStore()productsStore.loadAllProducts() // 加载所有数据</script><p>src\components\ShoppingCart.vue<br>Vue<br>复制代码<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br><template><br>  <div class="cart"><br>    <h2>我的购物车</h2><br>    <p><br>      <i>请添加一些商品到购物车</i><br>    </p><br>    <ul><br>      <li v-for="item in cartStore.cartProducts"> -  × </li><br>    </ul><br>    <p>商品总价： </p><br>    <p><br>      &lt;button @click&#x3D;”cartStore.checkOut”&gt;结算</button><br>    </p><br>    <p v-show="cartStore.checkoutStatus">结算.</p><br>  </div><br></template></p><script lang="ts" setup>import { useCartStore } from '../store/cart'const cartStore = useCartStore()</script>]]></content>
    
    
    
    <tags>
      
      <tag>Pinia</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React</title>
    <link href="/2023/03/01/React/"/>
    <url>/2023/03/01/React/</url>
    
    <content type="html"><![CDATA[<h1 id="1-React-入门概述"><a href="#1-React-入门概述" class="headerlink" title="1. React 入门概述"></a>1. React 入门概述</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p>用于动态构建用户界面的 JavaScript 库(只关注于视图)</p><pre><code class="hljs">1.发送请求获取数据2.处理数据（过滤，整理格式等）3.操作DOM呈现页面（React做的事情）</code></pre><p>React是一个将数据渲染为HTML视图的开源JavaScript库</p><h2 id="1-2-原生JavaScript的缺点"><a href="#1-2-原生JavaScript的缺点" class="headerlink" title="1.2 原生JavaScript的缺点"></a>1.2 原生JavaScript的缺点</h2><pre><code class="hljs">1. 原生JavaScript操作DOM繁琐，效率低（DOM-API操作UI）2. 使用JavaScript直接操作DOM，浏览器会进行大量的重绘重排3. 原生JavaScript没有组件化编码方案，代码复用率很低</code></pre><p>【补充】浏览器重绘重排</p><p>浏览器重绘(repaint)重排(reflow)与优化[浏览器机制]</p><p><strong>重绘</strong>(repaint)：当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘</p><p><strong>重排</strong>(reflow)：当DOM的变化影响了元素的几何信息(DOM对象的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排</p><p>##【补充】模块化与组件化</p><pre><code class="hljs">• 模块    1. 理解：向外提供特定功能的js程序, 一般就是一个js文件    2. 为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。    3. 作用：复用js, 简化js的编写, 提高js运行效率    • 组件    1. 理解：用来实现局部功能效果的代码和资源的集合(html/css/js/image等等)    2. 为什么要用组件： 一个界面的功能更复杂    3. 作用：复用编码, 简化项目编码, 提高运行效率    </code></pre><p>模块化：当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</p><p>组件化：当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</p><h2 id="1-3-React的特点"><a href="#1-3-React的特点" class="headerlink" title="1.3 React的特点"></a>1.3 React的特点</h2><pre><code class="hljs">1. 采用组件化模式、声明式编码，提高开发效率及组件复用率2. 在 React Native中可以使用React语法进行移动端开发3. 使用虚拟DOM+Diff算法，尽量减少与真实DOM的交互</code></pre><h2 id="1-4-React高效的原因"><a href="#1-4-React高效的原因" class="headerlink" title="1.4. React高效的原因"></a>1.4. React高效的原因</h2><pre><code class="hljs">1. 使用虚拟(virtual)DOM, 不总是直接操作页面真实DOM。2. DOM Diffing算法, 最小化页面重绘。</code></pre><h1 id="2-Hello-React"><a href="#2-Hello-React" class="headerlink" title="2. Hello React"></a>2. Hello React</h1><h2 id="2-1-相关库介绍"><a href="#2-1-相关库介绍" class="headerlink" title="2.1 相关库介绍"></a>2.1 相关库介绍</h2><pre><code class="hljs">• 旧版本 16.8.4 (March 5, 2019)• 新版本 有不一样的会说明1. react.js：React核心库。2. react-dom.js：提供操作DOM的React扩展库。3. babel.min.js：解析JSX语法代码转为JS代码的库。</code></pre><h2 id="【补充】babel-js的作用"><a href="#【补充】babel-js的作用" class="headerlink" title="【补充】babel.js的作用"></a>【补充】babel.js的作用</h2><pre><code class="hljs">1. 浏览器不能直接解析JSX代码, 需要babel转译为纯JS的代码才能运行2. 只要用了JSX，都要加上type=&quot;text/babel&quot;, 声明需要babel来处理</code></pre><h2 id="2-2-使用JSX创建虚拟DOM"><a href="#2-2-使用JSX创建虚拟DOM" class="headerlink" title="2.2 使用JSX创建虚拟DOM"></a>2.2 使用JSX创建虚拟DOM</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs react">const VDOM= &lt;h1&gt;Hello,React&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h2 id="2-3-渲染虚拟DOM-元素"><a href="#2-3-渲染虚拟DOM-元素" class="headerlink" title="2.3 渲染虚拟DOM(元素)"></a>2.3 渲染虚拟DOM(元素)</h2><pre><code class="hljs">1. 语法: </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs react">ReactDOM.render(virtualDOM, containerDOM)<br></code></pre></td></tr></table></figure><pre><code class="hljs">2. 作用: 将虚拟DOM元素渲染到页面中的真实容器DOM中显示3. 参数说明     1. 参数一: 纯js或jsx创建的虚拟dom对象        2. 参数二: 用来包含虚拟DOM元素的真实dom元素对象(一般是一个div)</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>hello_react<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"> <span class="hljs-comment">/* 此处一定要写babel */</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//1.创建虚拟DOM</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello,React<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-comment">/* 此处一定不要写引号，因为不是字符串 */</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="2-4-页面显示"><a href="#2-4-页面显示" class="headerlink" title="2.4 页面显示"></a>2.4 页面显示</h2><img width="451" alt="image" src="https://user-images.githubusercontent.com/117837871/216939381-0451d71f-c024-46bf-8fb1-ff25e775c093.png"><h1 id="3-创建虚拟DOM的两种方式"><a href="#3-创建虚拟DOM的两种方式" class="headerlink" title="3. 创建虚拟DOM的两种方式"></a>3. 创建虚拟DOM的两种方式</h1><h2 id="3-1-纯JS方式-一般不用"><a href="#3-1-纯JS方式-一般不用" class="headerlink" title="3.1 纯JS方式(一般不用)"></a>3.1 纯JS方式(一般不用)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javaScript">&lt;div id=<span class="hljs-string">&quot;test&quot;</span>&gt;&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"> </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//1.创建虚拟DOM</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;title&#x27;</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="hljs-string">&#x27;Hello,React&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span></span><br></code></pre></td></tr></table></figure><h2 id="3-2-JSX方式"><a href="#3-2-JSX方式" class="headerlink" title="3.2 JSX方式"></a>3.2 JSX方式</h2><pre><code class="hljs">JSX方式就是js创建虚拟DOM的语法糖</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;test&quot;</span>&gt;&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span> &gt;</span><span class="language-javascript"> <span class="hljs-comment">/* 此处一定要写babel */</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//1.创建虚拟DOM</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (  <span class="hljs-comment">/* 此处一定不要写引号，因为不是字符串 */</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-javascript"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello,React<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-javascript"><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span></span><br><span class="language-javascript"><span class="language-xml">    )</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>![image](<span class="hljs-attr">https</span>:<span class="hljs-comment">//user-images.githubusercontent.com/117837871/216940180-3b28dbc4-3910-4119-845f-4f3b124ecc95.png)</span><br></code></pre></td></tr></table></figure><h1 id="4-虚拟DOM与真实DOM"><a href="#4-虚拟DOM与真实DOM" class="headerlink" title="4. 虚拟DOM与真实DOM"></a>4. 虚拟DOM与真实DOM</h1><p>打印输出虚拟DOM和真实DOM进行比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (  <span class="hljs-comment">/* 此处一定不要写引号，因为不是字符串 */</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello,React<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>)<br><span class="hljs-comment">// 渲染虚拟DOM到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>constTDOM= <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;虚拟DOM&#x27;</span>,<span class="hljs-variable constant_">VDOM</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;真实DOM&#x27;</span>,<span class="hljs-variable constant_">TDOM</span>);<br><span class="hljs-keyword">debugger</span>;<br></code></pre></td></tr></table></figure><p>看看虚拟DOM身上有哪些属性<br><img width="433" alt="image" src="https://user-images.githubusercontent.com/117837871/216941884-1eb6f1e5-c9f2-429b-b6e0-38214ffd8a06.png"></p><p>看看真实DOM身上有哪些属性<br><img width="448" alt="image" src="https://user-images.githubusercontent.com/117837871/216941911-7af3b347-61b2-4a52-93a3-c98240f22c6d.png"></p><pre><code class="hljs">1. 虚拟DOM本质是Object类型的对象（一般对象）2. 虚拟DOM比较 “轻”，真实DOM比较 “重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性3. 虚拟DOM最终会被React转化为真实DOM，呈现在页面上</code></pre><h1 id="5-JSX入门"><a href="#5-JSX入门" class="headerlink" title="5. JSX入门"></a>5. JSX入门</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><pre><code class="hljs">1. 全称: JavaScript XML2. React定义的一种类似于XML的JS扩展语法: JS + XML本质是React.createElement(component, props, ...children)方法的语法糖3. 作用: 用来简化创建虚拟DOM     1. 写法：var ele = &lt;h1&gt;Hello JSX!&lt;/h1&gt;        2. 注意1：它不是字符串, 也不是HTML/XML标签        3. 注意2：它最终产生的就是一个JS对象    4. 标签名任意: HTML标签或其它标签5. 标签属性任意: HTML标签属性或其它</code></pre><h2 id="5-2-基本语法规则"><a href="#5-2-基本语法规则" class="headerlink" title="5.2 基本语法规则"></a>5.2 基本语法规则</h2><pre><code class="hljs">1. 定义虚拟DOM时，不要写引号。2. 标签中混入JS表达式时要用 &#123; &#125;。3. 样式的类名指定不要用 class，要用 className。（因为class是ES6中类的关键字，所以不让用）4. 内联样式，要用 style=&#123;&#123; key:value &#125;&#125; 的形式去写。5. 只有一个根标签6. 标签必须闭合7. 标签首字母     1. 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。    2. 若大写字母开头，React就去渲染对应的组件，若组件没有定义，则报错。    </code></pre><h2 id="【补充】-区分js表达式与js语句"><a href="#【补充】-区分js表达式与js语句" class="headerlink" title="【补充】 区分js表达式与js语句"></a>【补充】 区分js表达式与js语句</h2><pre><code class="hljs">1. 表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方，下面这些都是表达式：    1. a        2. a+b        3. demo(1) // 函数调用表达式        4. arr.map()        5. function test () &#123;&#125;    2. 语句(代码)，下面这些都是语句(代码)：【控制语句，控制代码走向，而不是产生值】    1. if()&#123; &#125;        2. for()&#123; &#125;        3. switch( )&#123;case:xxxx&#125;    </code></pre><h2 id="5-3-总结"><a href="#5-3-总结" class="headerlink" title="5.3 总结"></a>5.3 总结</h2><pre><code class="hljs">1. 遇到 &lt; 开头的代码, 以标签的语法解析: html同名标签转换为html同名元素, 其它标签需要特别解析2. 遇到以 &#123; 开头的代码，以JS语法解析: 标签中的js表达式必须用&#123; &#125;包含</code></pre><h1 id="【React】面向组件编程-基本理解和使用-组件三大核心属性state-props-refs-事件处理-非受控组件-受控组件-高阶函数"><a href="#【React】面向组件编程-基本理解和使用-组件三大核心属性state-props-refs-事件处理-非受控组件-受控组件-高阶函数" class="headerlink" title="【React】面向组件编程 - 基本理解和使用 - 组件三大核心属性state-props-refs - 事件处理 - 非受控组件 - 受控组件 - 高阶函数"></a>【React】面向组件编程 - 基本理解和使用 - 组件三大核心属性state-props-refs - 事件处理 - 非受控组件 - 受控组件 - 高阶函数</h1><h2 id="1-基本理解和使用"><a href="#1-基本理解和使用" class="headerlink" title="1 . 基本理解和使用"></a>1 . 基本理解和使用</h2><h3 id="1-1-函数式组件"><a href="#1-1-函数式组件" class="headerlink" title="1.1 函数式组件"></a>1.1 函数式组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建函数式组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyCompontent</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">//这里的this是undefined，因为babel编译后开启了严格模式</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用函数定义的组件（适用于简单组件的定义）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCompontent</span>/&gt;</span></span>,docement.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/117837871/217765611-333f4b51-104d-478c-a907-c875c5ba30e0.png" alt="image"></p><pre><code class="hljs">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？React解析组件标签，找到了MyComponent组件。发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</code></pre><p>【补充】严格模式中的this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayThis</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-title function_">sayThis</span>() <span class="hljs-comment">// Window &#123;...&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayThis2</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-string">&#x27;use strict&#x27;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-title function_">sayThis2</span>() <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>如果不开启严格模式，直接调用函数，函数中的this指向window</p><p>如果开启了严格模式，直接调用函数，函数中的this是undefined</p><h3 id="1-2-类式组件"><a href="#1-2-类式组件" class="headerlink" title="1.2 类式组件"></a>1.2 类式组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建类式组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCompontent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.compontent</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span><br>    <span class="hljs-comment">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span><br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyCompontent</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.test&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/117837871/217765681-3219dbba-ba4e-430b-89ab-491304411957.png" alt="image"><br><img src="https://user-images.githubusercontent.com/117837871/217765719-0818ccdb-4d40-40c7-84ba-1556b6028719.png" alt="image"></p><pre><code class="hljs">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？React解析组件标签，找到了MyComponent组件。发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</code></pre><p>【补充】关于ES6中类的注意事项</p><p>类中的构造器不是必须要写的，要对实例进行一些初始化的操作，如添加指定属性时才写。</p><p>如果A类继承了B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的。</p><p>类中所定义的方法，都放在了类的原型对象上，供实例去使用。</p><h3 id="1-3-注意"><a href="#1-3-注意" class="headerlink" title="1.3 注意"></a>1.3 注意</h3><p>组件名必须首字母大写</p><p>虚拟DOM元素只能有一个根元素</p><p>虚拟DOM元素必须有结束标签</p><p>重点关注下渲染类组件标签的基本流程</p><ul><li>React内部会创建组件实例对象</li><li>调用render()得到虚拟DOM, 并解析为真实DOM</li><li>插入到指定的页面元素内部</li></ul><h2 id="2-组件实例的三大核心属性1-state-状态"><a href="#2-组件实例的三大核心属性1-state-状态" class="headerlink" title="2. 组件实例的三大核心属性1: state 状态"></a>2. 组件实例的三大核心属性1: state 状态</h2><h3 id="2-1-理解"><a href="#2-1-理解" class="headerlink" title="2.1 理解"></a>2.1 理解</h3><p>state是组件对象最重要的属性, 值是对象(可以包含多个key-value的组合)</p><p>组件被称为”状态机”, 通过更新组件的state来更新对应的页面显示(重新渲染组件)</p><h3 id="2-2-应用"><a href="#2-2-应用" class="headerlink" title="2.2 应用"></a>2.2 应用</h3><p>需求: 定义一个展示天气信息的组件</p><p>默认展示天气炎热 或 凉爽</p><p>点击文字切换天气</p><h4 id="2-2-1-手动切换版"><a href="#2-2-1-手动切换版" class="headerlink" title="2.2.1 手动切换版"></a>2.2.1 手动切换版</h4><p>类式组件，在构造器中 初始化状态，在render中通过this.state 读取状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Copmpontent</span>&#123;<br>    <span class="hljs-title function_">contructor</span>(<span class="hljs-params">prop</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(prop);<br>        <span class="hljs-comment">//初始化状态</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">isHot</span>: <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//读取状态</span><br>        <span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;&lt;Weather/&gt;&#x27;</span>,docement.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.test&#x27;</span>));<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/117837871/217765896-b98139ee-c913-4141-9b3f-52c687cd07c8.png" alt="image"></p><p>【补充】原生JavaScript绑定事件监听的三种方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button id=<span class="hljs-string">&quot;btn1&quot;</span>&gt;按钮<span class="hljs-number">1</span>&lt;/button&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;demo()&quot;</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> btn1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn1&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  btn1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;按钮1被点击了&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> btn2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn2&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  btn2.<span class="hljs-property">onclick</span> = <span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;按钮2被点击了&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;按钮3被点击了&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>【补充】类中方法的this指向问题</p><p>类中定义的方法，在内部默认开启了局部的严格模式</p><p>开启严格模式，函数如果直接调用，this不会指向window，而是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>  <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//study方法放在了哪里？——类的原型对象上，供实例使用</span><br>    <span class="hljs-comment">//通过Person实例调用study时，study中的this就是Person实例</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-number">18</span>)<br>p1.<span class="hljs-title function_">study</span>() <span class="hljs-comment">//通过实例调用study方法  Person</span><br><span class="hljs-keyword">const</span> x = p1.<span class="hljs-property">study</span><br><span class="hljs-title function_">x</span>() <span class="hljs-comment">// 直接调用 undefined</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-点击切换版’"><a href="#2-2-2-点击切换版’" class="headerlink" title="2.2.2 点击切换版’"></a>2.2.2 点击切换版’</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><br>  <span class="hljs-comment">// 构造器调用几次？ ———— 1次</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;constructor&#x27;</span>);<br>    <span class="hljs-variable language_">super</span>(props)<br>    <span class="hljs-comment">// 初始化状态</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">wind</span>:<span class="hljs-string">&#x27;微风&#x27;</span>&#125;<br>    <span class="hljs-comment">// 解决 changeWeather 中 this 指向问题</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeWeather</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeWeather</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render&#x27;</span>);<br>    <span class="hljs-comment">//读取状态</span><br>    <span class="hljs-keyword">const</span> &#123;isHot,wind&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-comment">// changeWeather调用几次？ ———— 点几次调几次</span><br>  <span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span><br>    <span class="hljs-comment">// 由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span><br>    <span class="hljs-comment">// 类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;changeWeather&#x27;</span>);<br>    <span class="hljs-comment">// 获取原来的isHot值</span><br>    <span class="hljs-keyword">const</span> isHot = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span><br>    <span class="hljs-comment">// 严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)<br>    <span class="hljs-comment">// console.log(this);</span><br><br>    <span class="hljs-comment">// 严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！</span><br>    <span class="hljs-comment">// this.state.isHot = !isHot //这是错误的写法</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//2.渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Weather</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/117837871/217765963-ceed33e2-9a84-4e6e-b591-ee0873ff1c45.png" alt="image"></p><h4 id="2-2-3-精简代码（实际开发中这样写）"><a href="#2-2-3-精简代码（实际开发中这样写）" class="headerlink" title="2.2.3 精简代码（实际开发中这样写）"></a>2.2.3 精简代码（实际开发中这样写）</h4><p>可以不写构造器，类中直接写赋值语句来初始化状态</p><p>不用bind来绑定this（赋值语句的形式+箭头函数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-comment">// 初始化状态</span><br>  state = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">wind</span>:<span class="hljs-string">&#x27;微风&#x27;</span>&#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> &#123;isHot,wind&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &#125;<br><br>  <span class="hljs-comment">// 自定义方法————要用赋值语句的形式 + 箭头函数</span><br>  <span class="hljs-comment">// 没有放在原型上，而是放在实例上</span><br>  changeWeather = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> isHot = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 2.渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Weather</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p>【补充】类中直接写赋值语句</p><p>在类中直接写赋值语句，等于是给类的实例对象添加属性且赋值</p><h2 id="2-3-注意"><a href="#2-3-注意" class="headerlink" title="#2.3 注意"></a>#2.3 注意</h2><p>组件中render方法中的this为组件实例对象</p><p>组件自定义的方法中this为undefined，如何解决？</p><pre><code class="hljs">a)强制绑定this: 通过函数对象的bind()b)箭头函数 + 赋值语句</code></pre><p>状态数据state，不能直接修改或更新。状态必须通过  setState() 进行更新, 且更新是一种合并，不是替换。</p><h2 id="3-组件实例的三大核心属性2-props"><a href="#3-组件实例的三大核心属性2-props" class="headerlink" title="3. 组件实例的三大核心属性2: props"></a>3. 组件实例的三大核心属性2: props</h2><h3 id="3-1-理解"><a href="#3-1-理解" class="headerlink" title="3.1 理解"></a>3.1 理解</h3><p>每个组件对象都会有props(properties的简写)属性</p><p>组件标签的所有属性都保存在props中</p><h3 id="3-2-作用"><a href="#3-2-作用" class="headerlink" title="3.2 作用"></a>3.2 作用</h3><p>通过标签属性从组件外向组件内传递变化的数据</p><p>注意: 组件内部不可修改props数据，是只读的</p><h3 id="3-3-尝试一下"><a href="#3-3-尝试一下" class="headerlink" title="3.3 尝试一下"></a>3.3 尝试一下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建组件 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//const &#123;name, sex, age&#125; = this.props </span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别：&#123;this.props.sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;this.props.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 渲染组件到页面上</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;yk&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/117837871/217766032-9d58d0cf-c11c-44d5-8a96-8d2d1681b4c0.png" alt="image"></p><h3 id="3-4-使用指南"><a href="#3-4-使用指南" class="headerlink" title="3.4 使用指南"></a>3.4 使用指南</h3><h4 id="3-4-1-内部读取某个属性值"><a href="#3-4-1-内部读取某个属性值" class="headerlink" title="3.4.1 内部读取某个属性值"></a>3.4.1 内部读取某个属性值</h4><p>this.props.name</p><h3 id="3-4-2-扩展属性-将对象的所有属性通过props传递（批量传递标签属性）"><a href="#3-4-2-扩展属性-将对象的所有属性通过props传递（批量传递标签属性）" class="headerlink" title="3.4.2 扩展属性: 将对象的所有属性通过props传递（批量传递标签属性）"></a>3.4.2 扩展属性: 将对象的所有属性通过props传递（批量传递标签属性）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;yk&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br><br><span class="hljs-keyword">const</span> person = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;yk&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123; <span class="hljs-attr">...person</span> &#125;/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p>【补充】展开运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>]<br><br><span class="hljs-comment">// 1. 展开一个数组</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...arr1); <span class="hljs-comment">// 1 3 5 7 9</span><br><br><span class="hljs-comment">// 2. 连接数组</span><br><br><span class="hljs-keyword">let</span> arr3 = [...arr1, ...arr2] <span class="hljs-comment">// [1,3,5,7,9,2,4,6,8,10]</span><br><br><span class="hljs-comment">// 3. 在函数中使用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...numbers</span>) &#123;<br>    <span class="hljs-comment">//求和！preValue前一个数，currentValue当前数</span><br>  <span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">preValue, currentValue</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> preValue + currentValue<br>  &#125;)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">// 4. 构造字面量对象时使用展开语法</span><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-comment">// console.log(...person); // 报错，展开运算符不能展开对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;...person&#125;) <span class="hljs-comment">// &#123;name: &quot;tom&quot;, age: 18&#125;</span><br><span class="hljs-comment">//babel+react使得可以使用展开运算符，但仅仅实用于标签属性的传递，如下⬇️</span><br><span class="hljs-keyword">let</span> person2 = &#123; ...person &#125; <span class="hljs-comment">// 可以拷贝一个对象</span><br>person.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;jerry&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2); <span class="hljs-comment">// &#123;name: &quot;tom&quot;, age: 18&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person); <span class="hljs-comment">// &#123;name: &quot;jerry&quot;, age: 18&#125;</span><br><br><span class="hljs-comment">// 5. 合并对象</span><br><span class="hljs-keyword">let</span> person3 = &#123;<br>  ...person,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;trumen&#x27;</span>,<br>  <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;上海&quot;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person3); <span class="hljs-comment">// &#123;name: &quot;trumen&quot;, age: 18, address: &quot;上海&quot;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-3-对props中的属性值进行类型限制和必要性限制"><a href="#3-4-3-对props中的属性值进行类型限制和必要性限制" class="headerlink" title="3.4.3 对props中的属性值进行类型限制和必要性限制"></a>3.4.3 对props中的属性值进行类型限制和必要性限制</h3><ul><li><ol><li>第一种方式（React v15.5 开始已弃用）</li></ol></li></ul><p>直接写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Person</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTypes</span>.<span class="hljs-property">number</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>第二种方式（新）：使用prop-types库进限制（需要引入prop-types库）</li></ol></li></ul><!-- 引入prop-types，用于对组件标签属性进行限制 --><script type="text/javascript" src="../js/prop-types.js"></script><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//对标签属性进行类型、必要性的限制</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, <span class="hljs-comment">// 限制name必传，且为字符串</span><br>  <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>, <span class="hljs-comment">// 限制sex为字符串</span><br>  <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>, <span class="hljs-comment">// 限制age为数值</span><br>  <span class="hljs-attr">speak</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>, <span class="hljs-comment">// 限制speak为函数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以写在类的里面，前面加static关键字</p><h4 id="3-4-4-默认属性值"><a href="#3-4-4-默认属性值" class="headerlink" title="3.4.4 默认属性值"></a>3.4.4 默认属性值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//指定默认标签属性值</span><br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-comment">// sex默认值为男</span><br>  <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">//age默认值为18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以写在类的里面，前面加static关键字</p><h4 id="3-4-5-组件类的构造函数"><a href="#3-4-5-组件类的构造函数" class="headerlink" title="3.4.5 组件类的构造函数"></a>3.4.5 组件类的构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>  <span class="hljs-variable language_">super</span>(props)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>)<span class="hljs-comment">//打印所有属性</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</li></ul><h3 id="3-5-应用"><a href="#3-5-应用" class="headerlink" title="3.5 应用"></a>3.5 应用</h3><p>需求: 自定义用来显示一个人员信息的组件</p><p>姓名必须指定，且为字符串类型；</p><p>性别为字符串类型，如果性别没有指定，默认为男</p><p>年龄为数字类型，默认值为18</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><br>  <span class="hljs-comment">//对标签属性进行类型、必要性的限制</span><br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, <span class="hljs-comment">//限制name必传，且为字符串</span><br>    <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,<span class="hljs-comment">//限制sex为字符串</span><br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,<span class="hljs-comment">//限制age为数值</span><br>  &#125;<br><br>  <span class="hljs-comment">//指定默认标签属性值</span><br>  <span class="hljs-keyword">static</span> defaultProps = &#123;<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-comment">//sex默认值为男</span><br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">//age默认值为18</span><br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// console.log(this);</span><br>    <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-comment">//props是只读的</span><br>    <span class="hljs-comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test1&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="3-6-函数式组件使用props"><a href="#3-6-函数式组件使用props" class="headerlink" title="3.6 函数式组件使用props"></a>3.6 函数式组件使用props</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span> (props)&#123;<br>  <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = props<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-comment">//对标签属性进行类型、必要性的限制</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, <span class="hljs-comment">//限制name必传，且为字符串</span><br>  <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,  <span class="hljs-comment">//限制sex为字符串</span><br>  <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,  <span class="hljs-comment">//限制age为数值</span><br>&#125;<br><br><span class="hljs-comment">// 指定默认标签属性值</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;<br>  <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-comment">// sex默认值为男</span><br>  <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">// age默认值为18</span><br>&#125;<br><br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test1&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="4-组件三大核心属性3-refs与事件处理"><a href="#4-组件三大核心属性3-refs与事件处理" class="headerlink" title="4. 组件三大核心属性3: refs与事件处理"></a>4. 组件三大核心属性3: refs与事件处理</h2><h3 id="4-1-理解"><a href="#4-1-理解" class="headerlink" title="4.1 理解"></a>4.1 理解</h3><p>组件内的标签可以定义ref属性来标识自己</p><h3 id="4-2-应用"><a href="#4-2-应用" class="headerlink" title="4.2 应用"></a>4.2 应用</h3><p>需求: 自定义组件, 功能说明如下</p><p>点击按钮, 提示第一个输入框中的值</p><p>当第2个输入框失去焦点时, 提示这个输入框中的值</p><h2 id="4-3-编码"><a href="#4-3-编码" class="headerlink" title="4.3 编码"></a>4.3 编码</h2><h3 id="4-3-1-字符串形式的ref（-新版本不推荐使用了-）"><a href="#4-3-1-字符串形式的ref（-新版本不推荐使用了-）" class="headerlink" title="4.3.1 字符串形式的ref（** 新版本不推荐使用了 **）"></a>4.3.1 字符串形式的ref（** 新版本不推荐使用了 **）</h3><ol><li><p>定义</p><input ref="input1"/></li><li><p>使用<br>this.refs.input1</p></li><li><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-comment">//展示左侧输入框的数据</span><br>  showData = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span><br>    <span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>)<br>  &#125;<br>  <span class="hljs-comment">//展示右侧输入框的数据</span><br>  showData2 = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;input2&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span><br>    <span class="hljs-title function_">alert</span>(input2.<span class="hljs-property">value</span>)<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input2&quot;</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.showData2&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;失去焦点提示数据&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-3-2-回调形式的ref"><a href="#4-3-2-回调形式的ref" class="headerlink" title="4.3.2 回调形式的ref"></a>4.3.2 回调形式的ref</h3><ol><li>定义</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input ref=&#123;<span class="hljs-function">(<span class="hljs-params">currentNode</span>)=&gt;</span>&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = currentNode&#125;&#125; /&gt;<br></code></pre></td></tr></table></figure><p>简写一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input ref=&#123; <span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = c &#125; /&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><p>this.input1</p><ol start="3"><li>示例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-comment">//展示左侧输入框的数据</span><br>  showData = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-comment">//从实例自身取</span><br>    <span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span><br>    <span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>)<br>  &#125;<br>  <span class="hljs-comment">//展示右侧输入框的数据</span><br>  showData2 = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;input2&#125; = <span class="hljs-variable language_">this</span><br>    <span class="hljs-title function_">alert</span>(input2.<span class="hljs-property">value</span>)<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">c</span> =&gt;</span> this.input1 = c &#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;<span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.showData2&#125;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.input2 = c &#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;<span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><ol start="4"><li>回调执行次数</li></ol><p><img src="https://user-images.githubusercontent.com/117837871/218298374-9f3931c3-ea0d-45a5-80c2-cd4b15e1a51f.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/117837871/218298384-a6b30e7b-a208-408e-b0ca-27d979d71fe6.png" alt="image"></p><p>内联的回调，渲染时调用一次，每次更新都会执行两次</p><p>类绑定的回调，就在初始渲染时调用一次</p><p>影响不大，日常开发基本都用内联，方便一点</p><h3 id="4-3-3-createRef创建ref容器"><a href="#4-3-3-createRef创建ref容器" class="headerlink" title="4.3.3 createRef创建ref容器"></a>4.3.3 createRef创建ref容器</h3><ol><li>定义</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// React.createRef调用后可以返回一个容器</span><br><span class="hljs-comment">// 该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span><br>myRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>() <br><br>&lt;input ref=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef</span>&#125;/&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><p>this.myRef.current</p><ol start="3"><li>示例</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><br>  myRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>  myRef2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>  <span class="hljs-comment">//展示左侧输入框的数据</span><br>  showData = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>  &#125;<br>  <span class="hljs-comment">//展示右侧输入框的数据</span><br>  showData2 = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.showData2&#125;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef2&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="5-React中的事件处理"><a href="#5-React中的事件处理" class="headerlink" title="5. React中的事件处理"></a>5. React中的事件处理</h2><p>通过onXxx属性指定事件处理函数(注意大小写)</p><p>React使用的是自定义(合成)事件, 而不是使用的原生DOM事件—-为了更好的兼容性</p><p>React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) —-为了的高效</p><p>通过event.target得到发生事件的DOM元素对象—-不要过度使用ref</p><p>发生事件的元素是需要操作的元素时，可以避免使用ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><br>  <span class="hljs-comment">//创建ref容器</span><br>  myRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()<br>  <span class="hljs-comment">// myRef2 = React.createRef()</span><br><br>  <span class="hljs-comment">//展示左侧输入框的数据</span><br>  showData = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>); <span class="hljs-comment">// &lt;button&gt;点我提示左侧的数据&lt;/button&gt;</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//展示右侧输入框的数据</span><br>  showData2 = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.showData2&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="6-收集表单数据"><a href="#6-收集表单数据" class="headerlink" title="6. 收集表单数据"></a>6. 收集表单数据</h2><h3 id="6-1-理解"><a href="#6-1-理解" class="headerlink" title="6.1 理解"></a>6.1 理解</h3><p>包含表单的组件分类</p><p>受控组件</p><p>非受控组件</p><h3 id="6-2-应用"><a href="#6-2-应用" class="headerlink" title="6.2 应用"></a>6.2 应用</h3><p>需求:</p><p>定义一个包含表单的组件</p><p>输入用户名密码后, 点击登录提示输入信息</p><h3 id="6-3-非受控组件"><a href="#6-3-非受控组件" class="headerlink" title="6.3 非受控组件"></a>6.3 非受控组件</h3><p>页面中所有输入类DOM的值，都是现用现取的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">// 阻止表单提交</span><br>    <span class="hljs-keyword">const</span> &#123;username, password&#125; = <span class="hljs-variable language_">this</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`您输入的用户名是 <span class="hljs-subst">$&#123;username.value&#125;</span>，您输入的密码是：<span class="hljs-subst">$&#123;password.value&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot; /&gt;</span><br><span class="language-xml">        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot; /&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 渲染组件</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="6-4-受控组件"><a href="#6-4-受控组件" class="headerlink" title="6.4 受控组件"></a>6.4 受控组件</h2><p>页面中输入类的DOM，随着输入的过程，将数据存储在状态state中，需要用的时候在从状态state中取（有点类似Vue中的双向数据绑定）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-comment">// 初始化状态</span><br>  state = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>  <span class="hljs-comment">// 保存用户名到状态中</span><br>  saveUsername = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">username</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;)<br>  &#125;<br>  <span class="hljs-comment">// 保存密码到状态中</span><br>  savePassword = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">password</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;)<br>  &#125;<br>  <span class="hljs-comment">// 表单提交的回调</span><br>  handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>()<br>    <span class="hljs-keyword">const</span> &#123;username, password&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`您输入的用户名是 <span class="hljs-subst">$&#123;username&#125;</span>，您输入的密码是：<span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveUsername&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span></span><br><span class="language-xml">        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.savePassword&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 渲染组件</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="7-高阶函数与函数的柯里化"><a href="#7-高阶函数与函数的柯里化" class="headerlink" title="7. 高阶函数与函数的柯里化"></a>7. 高阶函数与函数的柯里化</h2><h3 id="7-1-高阶函数"><a href="#7-1-高阶函数" class="headerlink" title="7.1 高阶函数"></a>7.1 高阶函数</h3><p>高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p><p>若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</p><p>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</p><p>常见的高阶函数有：Promise、setTimeout、arr.map()等等</p><h3 id="7-2-函数的柯里化"><a href="#7-2-函数的柯里化" class="headerlink" title="7.2 函数的柯里化"></a>7.2 函数的柯里化</h3><p>函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum1</span>(<span class="hljs-params">a, b, c</span>)&#123;<br>  <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-title function_">sum1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 柯里化后</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a</span>)&#123;<br>  <span class="hljs-keyword">return</span><span class="hljs-function">(<span class="hljs-params">b</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">c</span>)=&gt;</span>&#123;<br>      <span class="hljs-keyword">return</span> a+b+c<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="7-3-利用高阶函数与函数柯里化简写6-4的代码"><a href="#7-3-利用高阶函数与函数柯里化简写6-4的代码" class="headerlink" title="7.3 利用高阶函数与函数柯里化简写6.4的代码"></a>7.3 利用高阶函数与函数柯里化简写6.4的代码</h3><p>必须传一个函数作为onChange事件的回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-comment">//初始化状态</span><br>  state = &#123;<br>    <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//用户名</span><br>    <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//密码</span><br>  &#125;<br><br>  <span class="hljs-comment">//保存表单数据到状态中 （高阶函数+函数柯里化）</span><br>  saveFormData = <span class="hljs-function">(<span class="hljs-params">dataType</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;[dataType]:event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//表单提交的回调</span><br>  handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>    event.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">//阻止表单提交</span><br>    <span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">`你输入的用户名是：<span class="hljs-subst">$&#123;username&#125;</span>,你输入的密码是：<span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">username</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span></span><br><span class="language-xml">        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">password</span>&#x27;)&#125; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">//渲染组件</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="7-4-不用柯里化实现7-3"><a href="#7-4-不用柯里化实现7-3" class="headerlink" title="7.4 不用柯里化实现7.3"></a>7.4 不用柯里化实现7.3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//保存表单数据到状态中</span><br>saveFormData = <span class="hljs-function">(<span class="hljs-params">dataType,event</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;[dataType]:event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;)<br>&#125;<br><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span>(<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">  用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span><br><span class="language-xml">  密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="组件的生命周期-虚拟DOM-DOM-Diffing算法"><a href="#组件的生命周期-虚拟DOM-DOM-Diffing算法" class="headerlink" title="组件的生命周期 - 虚拟DOM - DOM Diffing算法"></a>组件的生命周期 - 虚拟DOM - DOM Diffing算法</h1><h2 id="1-组件的生命周期"><a href="#1-组件的生命周期" class="headerlink" title="1. 组件的生命周期"></a>1. 组件的生命周期</h2><h3 id="1-1-理解"><a href="#1-1-理解" class="headerlink" title="1.1 理解"></a>1.1 理解</h3><p>组件从创建到死亡它会经历一些特定的阶段。</p><p>React组件中包含一系列勾子函数(生命周期回调函数), 会在特定的时刻调用。</p><p>我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作。</p><h3 id="1-2-引入案例"><a href="#1-2-引入案例" class="headerlink" title="1.2 引入案例"></a>1.2 引入案例</h3><p>需求:定义组件实现以下功能：</p><p>让指定的文本做显示 &#x2F; 隐藏的渐变动画</p><p>从完全可见，到彻底消失，耗时2S</p><p>点击“不活了”按钮从界面中卸载组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建组件</span><br><span class="hljs-comment">//生命周期回调函数 &lt;=&gt; 生命周期钩子函数 &lt;=&gt; 生命周期函数 &lt;=&gt; 生命周期钩子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Life</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><br>  state = &#123;<span class="hljs-attr">opacity</span>:<span class="hljs-number">1</span>&#125;<br><br>  death = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-comment">// 清除定时器</span><br>    <span class="hljs-comment">// clearInterval(this.timer)</span><br>    <span class="hljs-comment">// 卸载组件</span><br>    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">unmountComponentAtNode</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br>  &#125;<br><br>  <span class="hljs-comment">// 组件挂载完毕</span><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;componentDidMount&#x27;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">//获取原状态</span><br>      <span class="hljs-keyword">let</span> &#123;opacity&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>      <span class="hljs-comment">//减小0.1</span><br>      opacity -= <span class="hljs-number">0.1</span><br>      <span class="hljs-keyword">if</span>(opacity &lt;= <span class="hljs-number">0</span>) opacity = <span class="hljs-number">1</span><br>      <span class="hljs-comment">//设置新的透明度</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;opacity&#125;)<br>    &#125;, <span class="hljs-number">200</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 组件将要卸载</span><br>  <span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 清除定时器</span><br>    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 初始化渲染、状态更新之后 调用1+n次</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render&#x27;</span>);<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;opacity:this.state.opacity&#125;&#125;</span>&gt;</span>React学不会怎么办？<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.death&#125;</span>&gt;</span>不活了<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class="hljs-comment">//渲染组件</span><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Life</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc4090cc0a5f44248e534fec82ab82d2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="image"></p><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc4090cc0a5f44248e534fec82ab82d2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc4090cc0a5f44248e534fec82ab82d2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image</a></p><h3 id="1-3-生命周期的三个阶段（旧）"><a href="#1-3-生命周期的三个阶段（旧）" class="headerlink" title="1.3 生命周期的三个阶段（旧）"></a>1.3 生命周期的三个阶段（旧）</h3><p><img src="https://user-images.githubusercontent.com/117837871/218704757-f4bd7825-9d5d-4eb6-89fe-2c33532ac4aa.png" alt="image"></p><p>v16.8.4</p><h4 id="1-3-1-初始化阶段"><a href="#1-3-1-初始化阶段" class="headerlink" title="1.3.1 初始化阶段"></a>1.3.1 初始化阶段</h4><p>由**ReactDOM.render()**触发—初次渲染</p><p>1.**constructor()**—— 类组件中的构造函数</p><p>2.<strong>componentWillMount()</strong> —— 组件将要挂载 【即将废弃】</p><p>3.<strong>render()</strong>  —— 挂载组件</p><p>4.<strong>componentDidMount()</strong> —— 组件挂载完成 比较常用：</p><p>一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><br>  <span class="hljs-comment">// 构造器</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;constructor&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Count---constructor&#x27;</span>);<br><span class="hljs-variable language_">super</span>(props)<br><span class="hljs-comment">// 初始化状态</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<span class="hljs-attr">count</span>:<span class="hljs-number">0</span>&#125;<br>  &#125;<br>  <span class="hljs-comment">// state = &#123;count:0&#125;</span><br>  add = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;count&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">count</span>: count+<span class="hljs-number">1</span>&#125;)<br>  &#125;<br>  <br>  <span class="hljs-comment">//组件将要挂载的钩子【即将废弃】</span><br>  <span class="hljs-title function_">componentWillMount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;componentWillMount&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Count---componentWillMount&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 挂载组件</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;render&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Count---render&#x27;</span>);<br>    <span class="hljs-keyword">const</span> &#123;count&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>当前计数值：&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br><br>  <span class="hljs-comment">//组件挂载完毕的钩子</span><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;componentDidMount&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Count---componentDidMount&#x27;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Count</span>/&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/117837871/218704847-ae672973-44d9-44c1-b65c-45a8751596e1.png" alt="image"><br><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7505801778224e368ee9f40edf2d2642~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7505801778224e368ee9f40edf2d2642~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image</a></p><h4 id="1-3-2-更新阶段"><a href="#1-3-2-更新阶段" class="headerlink" title="1.3.2 更新阶段"></a>1.3.2 更新阶段</h4><p>【第一种情况】父组件重新<strong>render</strong>触发</p><p><strong>componentWillReceiveProps()</strong> —— 接收属性参数（非首次）【即将废弃】</p><p>然后调用下面的钩子函数*</p><p>【第二种情况】由组件内部<strong>this.setSate()</strong></p><p><strong>shouldComponentUpdate()</strong> —— 组件是否应该被更新（默认返回true）</p><p>然后调用下面的钩子函数</p><p>【第三种情况】强制更新 <strong>forceUpdate()</strong></p><p><strong>componentWillUpdate()</strong> ——组件将要更新 【即将废弃】</p><p><strong>render()</strong> —— 组件更新</p><p><strong>componentDidUpdate()</strong> —— 组件完成更新</p><h4 id="1-3-3-卸载组件"><a href="#1-3-3-卸载组件" class="headerlink" title="1.3.3 卸载组件"></a>1.3.3 卸载组件</h4><p>由**ReactDOM.unmountComponentAtNode()**触发</p><p><strong>componentWillUnmount()</strong> —— 组件即将卸载</p><h3 id="1-4-生命周期的三个阶段（新）"><a href="#1-4-生命周期的三个阶段（新）" class="headerlink" title="1.4 生命周期的三个阶段（新）"></a>1.4 生命周期的三个阶段（新）</h3><p>![image](<a href="https://user-images.githubusercontent.com/11783">https://user-images.githubusercontent.com/11783</a>  7871&#x2F;218704912-83a52735-9acc-42e0-9cc6-83e6d752122f.png)</p><p>v17.0.1</p><h5 id="1-初始化阶段"><a href="#1-初始化阶段" class="headerlink" title="1. 初始化阶段"></a>1. 初始化阶段</h5><p>由**ReactDOM.render()**触发 —— 初次渲染</p><ul><li><p><strong>constructor()</strong> —— 类组件中的构造函数</p></li><li><p><strong>static getDerivedStateFromProps(props, state)</strong> 从props得到一个派生的状态【新增】</p></li><li><p><strong>render()</strong> —— 挂载组件</p></li><li><p><strong>componentDidMount()</strong> —— 组件挂载完成 比较&#x3D;&#x3D;常用&#x3D;&#x3D;</p></li></ul><h5 id="2-更新阶段"><a href="#2-更新阶段" class="headerlink" title="2. 更新阶段"></a>2. 更新阶段</h5><p>由组件内部<strong>this.setSate()<strong>或父组件</strong>重新render</strong>触发或强制更新<strong>forceUpdate()</strong></p><ul><li><p><strong>getDerivedStateFromProps()</strong> —— 从props得到一个派生的状态  【新增】</p></li><li><p><strong>shouldComponentUpdate()</strong> —— 组件是否应该被更新（默认返回true）</p></li><li><p><strong>render()</strong> —— 挂载组件</p></li><li><p><strong>getSnapshotBeforeUpdate()</strong> —— 在更新之前获取快照【新增】</p></li><li><p><strong>componentDidUpdate(prevProps, prevState, snapshotValue)</strong> —— 组件完成更新</p></li></ul><h5 id="3-卸载组件"><a href="#3-卸载组件" class="headerlink" title="3. 卸载组件"></a>3. 卸载组件</h5><ul><li><p>由ReactDOM.unmountComponentAtNode()触发</p></li><li><p><strong>componentWillUnmount()</strong> —— 组件即将卸载</p></li></ul><h3 id="1-5-重要的勾子"><a href="#1-5-重要的勾子" class="headerlink" title="1.5 重要的勾子"></a>1.5 重要的勾子</h3><p><strong>render</strong>：初始化渲染或更新渲染调用</p><p><strong>componentDidMount</strong>：开启监听, 发送ajax请求</p><p><strong>componentWillUnmount</strong>：做一些收尾工作, 如: 清理定时器</p><h3 id="1-6-即将废弃的勾子"><a href="#1-6-即将废弃的勾子" class="headerlink" title="1.6 即将废弃的勾子"></a>1.6 即将废弃的勾子</h3><p>componentWillMount</p><p>componentWillReceiveProps</p><p>componentWillUpdate</p><p>现在使用会出现警告，下一个大版本需要加上UNSAFE_前缀才能使用，以后可能会被彻底废弃，不建议使用。</p><h2 id="2-虚拟DOM与DOM-Diffing算法"><a href="#2-虚拟DOM与DOM-Diffing算法" class="headerlink" title="2. 虚拟DOM与DOM Diffing算法"></a>2. 虚拟DOM与DOM Diffing算法</h2><h3 id="2-1-基本原理图"><a href="#2-1-基本原理图" class="headerlink" title="2.1 基本原理图"></a>2.1 基本原理图</h3><p><img src="https://user-images.githubusercontent.com/117837871/218704968-244b5f61-9cad-4458-8fcf-fa62ba1e00ab.png" alt="image"></p><p>详细的原理可以看之前在学Vue源码时的关于diff的笔记【Vue源码】图解 diff算法 与 虚拟DOM-snabbdom-最小量更新原理解析-手写源码-</p><h3 id="2-2-关于key的经典面试题"><a href="#2-2-关于key的经典面试题" class="headerlink" title="2.2 关于key的经典面试题"></a>2.2 关于key的经典面试题</h3><p>react&#x2F;vue中的key有什么作用？（key的内部原理是什么？）</p><p>为什么遍历列表时，key最好不要用index?</p><h4 id="2-2-1-虚拟DOM中key的作用"><a href="#2-2-1-虚拟DOM中key的作用" class="headerlink" title="2.2.1 虚拟DOM中key的作用"></a>2.2.1 虚拟DOM中key的作用</h4><p>简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</p><p>详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, 随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</p><p>旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><p>若虚拟DOM中内容没变, 直接使用之前的真实DOM</p><p>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</p><p>旧虚拟DOM中未找到与新虚拟DOM相同的key</p><p>根据数据创建新的真实DOM，随后渲染到到页面</p><h4 id="2-2-2-用index作为key可能会引发的问题"><a href="#2-2-2-用index作为key可能会引发的问题" class="headerlink" title="2.2.2 用index作为key可能会引发的问题"></a>2.2.2 用index作为key可能会引发的问题</h4><p>若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低</p><p>如果结构中还包含输入类的DOM：会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题</p><p>注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</p><p>2.2.3 开发中如何选择key?</p><p>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值</p><p>如果确定只是简单的展示数据，用index也是可以的</p><h1 id="使用create-react-app创建react应用"><a href="#使用create-react-app创建react应用" class="headerlink" title="使用create-react-app创建react应用"></a>使用create-react-app创建react应用</h1><h2 id="1-1-react脚手架"><a href="#1-1-react脚手架" class="headerlink" title="1.1. react脚手架"></a>1.1. react脚手架</h2><p>1.xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目</p><ul><li><p>包含了所有需要的配置（语法检查、jsx编译、devServer…）</p></li><li><p>下载好了所有相关的依赖</p></li><li><p>可以直接运行一个简单效果</p></li></ul><p>2.react提供了一个用于创建react项目的脚手架库: create-react-app</p><p>3.项目的整体技术架构为:  react + webpack + es6 + eslint</p><p>4.使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</p><h2 id="1-2-创建项目并启动"><a href="#1-2-创建项目并启动" class="headerlink" title="1.2. 创建项目并启动"></a>1.2. 创建项目并启动</h2><p>全局安装：<strong>npm install -g create-react-app</strong></p><p>切换到想创项目的目录，使用命令：<strong>create-react-app hello-react</strong></p><p>进入项目文件夹：<strong>cd hello-react</strong></p><p>启动项目：<strong>npm start</strong></p><p><img src="https://user-images.githubusercontent.com/117837871/220043507-be6a541b-0555-45ef-9f6b-3b4d3d7f2933.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/117837871/220043555-34074e8d-6f6e-4465-b3f4-3b66839e455d.png" alt="image"></p><h2 id="1-3-react脚手架项目结构"><a href="#1-3-react脚手架项目结构" class="headerlink" title="1.3. react脚手架项目结构"></a>1.3. react脚手架项目结构</h2><p>public —- 静态资源文件夹</p><pre><code class="hljs">favicon.icon ------ 网站页签图标index.html -------- 主页面logo192.png ------- logo图logo512.png ------- logo图manifest.json ----- 应用加壳的配置文件robots.txt -------- 爬虫协议文件</code></pre><p>src —- 源码文件夹</p><pre><code class="hljs">App.css -------- App组件的样式App.js --------- App组件App.test.js ---- 用于给App做测试</code></pre><p>  index.css —— 样式</p><p>  index.js ——- 入口文件</p><p>  logo.svg ——- logo图</p><p>  reportWebVitals.js — 页面性能分析文件(需要web-vitals库的支持)</p><p>  setupTests.js —- 组件单元测试的文件(需要jest-dom库的支持)</p><p><strong>&gt;&gt;index.html</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- %PUBLIC_URL%代表public文件夹的路径 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 开启理想视口，用于做移动端网页的适配 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;red&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Web site created using create-react-app&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 用于指定网页添加到手机主屏幕后的图标 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    manifest.json provides metadata used when your web app is installed on a</span></span><br><span class="hljs-comment"><span class="language-xml">    user&#x27;s mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/</span></span><br><span class="hljs-comment"><span class="language-xml">  --&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 应用加壳时的配置文件 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;manifest&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    Notice the use of %PUBLIC_URL% in the tags above.</span></span><br><span class="hljs-comment"><span class="language-xml">    It will be replaced with the URL of the `public` folder during the build.</span></span><br><span class="hljs-comment"><span class="language-xml">    Only files inside the `public` folder can be referenced from the HTML.</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">    Unlike &quot;/favicon.ico&quot; or &quot;favicon.ico&quot;, &quot;%PUBLIC_URL%/favicon.ico&quot; will</span></span><br><span class="hljs-comment"><span class="language-xml">    work correctly both with client-side routing and a non-root public URL.</span></span><br><span class="hljs-comment"><span class="language-xml">    Learn how to configure a non-root public URL by running `npm run build`.</span></span><br><span class="hljs-comment"><span class="language-xml">  --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 若浏览器不支持js则展示标签中的内容 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    This HTML file is a template.</span></span><br><span class="hljs-comment"><span class="language-xml">    If you open it directly in the browser, you will see an empty page.</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">    You can add webfonts, meta tags, or analytics to this file.</span></span><br><span class="hljs-comment"><span class="language-xml">    The build step will place the bundled scripts into the &lt;body&gt; tag.</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">    To begin the development, run `npm start` or `yarn start`.</span></span><br><span class="hljs-comment"><span class="language-xml">    To create a production bundle, use `npm run build` or `yarn build`.</span></span><br><span class="hljs-comment"><span class="language-xml">  --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><span class="hljs-keyword">import</span> reportWebVitals <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reportWebVitals&#x27;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br><br><span class="hljs-comment">// If you want to start measuring performance in your app, pass a function</span><br><span class="hljs-comment">// to log results (for example: reportWebVitals(console.log))</span><br><span class="hljs-comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span><br><span class="hljs-title function_">reportWebVitals</span>();<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./logo.svg&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-header&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;logo&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-logo&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          Edit <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>src/App.js<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> and save to reload.</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App-link&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://reactjs.org&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span></span><br><span class="language-xml">          Learn React</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><h2 id="1-4-功能界面的组件化编码流程（通用）"><a href="#1-4-功能界面的组件化编码流程（通用）" class="headerlink" title="1.4. 功能界面的组件化编码流程（通用）"></a>1.4. 功能界面的组件化编码流程（通用）</h2><p>1.拆分组件: 拆分界面,抽取组件</p><p>2.实现静态组件: 使用组件实现静态页面效果</p><p>3.实现动态组件</p><ul><li><p>动态显示初始化数据</p><ul><li><p>数据类型</p></li><li><p>数据名称</p></li><li><p>保存在哪个组件</p></li></ul></li><li><p>交互(从绑定事件监听开始)</p></li></ul><h1 id="2-脚手架版-Hello-React"><a href="#2-脚手架版-Hello-React" class="headerlink" title="2. 脚手架版 Hello React"></a>2. 脚手架版 Hello React</h1><h2 id="2-1-注意事项"><a href="#2-1-注意事项" class="headerlink" title="2.1 注意事项"></a>2.1 注意事项</h2><p>  1.为了区分组件和普通js文件，可以把定义组件的js文件后缀改成jsx</p><p>  2.一个组件一个文件夹</p><p>  3.引入js文件或者jsx文件时，可以不写后缀名</p><p>  4.组件文件夹中的文件可以都命名为index，例如 index.jsx&#x2F;index.css，引入的时候可以直接引到目录名就行了</p><h2 id="2-2-文件目录"><a href="#2-2-文件目录" class="headerlink" title="2.2 文件目录"></a>2.2 文件目录</h2><p><img src="https://user-images.githubusercontent.com/117837871/220043678-0443345f-4ad2-4437-a593-ef3bd9cba086.png" alt="image"></p><h2 id="2-3-代码"><a href="#2-3-代码" class="headerlink" title="2.3 代码"></a>2.3 代码</h2><p><strong>&gt;&gt;index.html</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Hello/Hello&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Welcome</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Welcome/Welcome&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Hello</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Welcome</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Welcome</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Hello.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./Hello.css&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>Hello React<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Hello.css</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">title</span> &#123;<br>  background-<span class="hljs-attr">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Welcome.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./Welcome.css&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Welcome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>Welcome<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Welcome.css</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">demo</span> &#123;<br>  background-<span class="hljs-attr">color</span>: skyblue;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-页面"><a href="#2-4-页面" class="headerlink" title="2.4 页面"></a>2.4 页面</h2><p><img src="https://user-images.githubusercontent.com/117837871/220043748-e4348946-70a0-4c1b-b839-a110a2ef6382.png" alt="image"></p><h1 id="3-VSCode生成代码模板"><a href="#3-VSCode生成代码模板" class="headerlink" title="3. VSCode生成代码模板"></a>3. VSCode生成代码模板</h1><p><img src="https://user-images.githubusercontent.com/117837871/220043789-c8f7da4b-7405-4279-b1fd-f644c920d5dc.png" alt="image"></p><p>rcc+回车 （react class component）</p><p><img src="https://user-images.githubusercontent.com/117837871/220043844-498fe04c-4675-4891-81b3-fcee7c9c1a97.png" alt="image"></p><p>rfc（react function component）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        </span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/117837871/220043913-c6f6f826-a2e6-46d8-b6d6-befc49fc5948.png" alt="image"></p><h1 id="4-样式的模块化"><a href="#4-样式的模块化" class="headerlink" title="4. 样式的模块化"></a>4. 样式的模块化</h1><p>文件名保存为 <strong>index.module.css</strong></p><p>引入文件 <strong>import hello from ‘.&#x2F;index.module.css’</strong></p><p>使用样式 <strong><h2 className={hello.title}> Hello </h2></strong></p><h1 id="TodoList"><a href="#TodoList" class="headerlink" title="TodoList"></a>TodoList</h1><h2 id="1-目标功能界面"><a href="#1-目标功能界面" class="headerlink" title="1. 目标功能界面"></a>1. 目标功能界面</h2><p><img src="https://user-images.githubusercontent.com/117837871/220586710-8cda4354-1d15-44b3-8d2e-1196c43a9679.png" alt="image"></p><h2 id="2-界面模块拆分"><a href="#2-界面模块拆分" class="headerlink" title="2. 界面模块拆分"></a>2. 界面模块拆分</h2><p><img src="https://user-images.githubusercontent.com/117837871/220586632-ce9102cb-724b-472c-b580-74e5c67dd91b.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/117837871/220586897-9993ceae-c17b-4db0-b1fb-f51317040f25.png" alt="image"></p><h2 id="3-主页"><a href="#3-主页" class="headerlink" title="3. 主页"></a>3. 主页</h2><p><strong>&gt;&gt;index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-静态页面搭建"><a href="#4-静态页面搭建" class="headerlink" title="4. 静态页面搭建"></a>4. 静态页面搭建</h2><p><strong>&gt;&gt;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Header&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/List&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Footer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./App.css&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-warp&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">List</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*base*/</span><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn-danger</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#da4f49</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bd362f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn-danger</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bd362f</span>;<br>&#125;<br><br><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>&#125;<br><br><span class="hljs-comment">/*app*/</span><br><span class="hljs-selector-class">.todo-container</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-selector-class">.todo-container</span> <span class="hljs-selector-class">.todo-wrap</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Header&#x2F;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-header&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的任务名称，按回车键确认&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Header&#x2F;index.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*header*/</span><br><span class="hljs-selector-class">.todo-header</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">560px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">28px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">7px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.todo-header</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-attribute">outline</span>: none;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">82</span>, <span class="hljs-number">168</span>, <span class="hljs-number">236</span>, <span class="hljs-number">0.8</span>);<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.075</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">82</span>, <span class="hljs-number">168</span>, <span class="hljs-number">236</span>, <span class="hljs-number">0.6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;List&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../Item&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;List&#x2F;index.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*main*/</span><br><span class="hljs-selector-class">.todo-main</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.todo-empty</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Item&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>xxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;display:</span>&#x27;<span class="hljs-attr">none</span>&#x27;&#125;&#125;&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Item&#x2F;index.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*item*/</span><br><span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">36px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">36px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>  <span class="hljs-attribute">content</span>: initial;<br>&#125;<br><br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">border-bottom</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Footer&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-footer&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已完成0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> / 全部2</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>清除已完成任务<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Footer&#x2F;index.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*footer*/</span><br><span class="hljs-selector-class">.todo-footer</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">6px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">float</span>: right;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-动态组件"><a href="#5-动态组件" class="headerlink" title="5. 动态组件"></a>5. 动态组件</h2><h3 id="5-1-动态初始化页面"><a href="#5-1-动态初始化页面" class="headerlink" title="5.1 动态初始化页面"></a>5.1 动态初始化页面</h3><p>状态驱动组件</p><p>考虑两个问题  要将状态放在哪？ 状态的存储形式是什么？</p><p>可以将状态放在需要使用状态的 父组件 App中，这样Header和List都可以通过props拿到状态数据</p><p>状态的存储形式采用对象数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 初始化状态</span><br>state = &#123;<br>  <span class="hljs-attr">todos</span>: [<br>    &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>    &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;002&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>    &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;003&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;敲代码&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在App.jsx组件中定义状态state，通过标签属性传递给子组件List的props中</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 初始化状态</span><br>  state = &#123;<br>    <span class="hljs-attr">todos</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;001&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;002&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;003&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;敲代码&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,<br>    ]<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span>  &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-warp&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">todos</span>=<span class="hljs-string">&#123;todos&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;List&#x2F;index.jsx</strong></p><p>子组件通过this.props得到父组件传递过来的状态</p><p>通过循环遍历todos得到一个个todo，将他们传递给Item子组件</p><p>通过标签属性的形式，父组件List传递状态到子组件Item中</p><p>指定key 再展开todo传递给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          todos.map((todo) =&gt; &#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;todo.id&#125;</span> &#123;<span class="hljs-attr">...todo</span>&#125;/&gt;</span></span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Item&#x2F;index.jsx</strong></p><p>子组件通过this.props得到父组件传递过来的每个todo的状态</p><p>动态渲染props中获取的状态 name 和 done</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; name, done &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">defaultChecked</span>=<span class="hljs-string">&#123;done&#125;/</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;display:</span>&#x27;<span class="hljs-attr">none</span>&#x27;&#125;&#125;&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-动态添加todo"><a href="#5-2-动态添加todo" class="headerlink" title="5.2 动态添加todo"></a>5.2 动态添加todo</h3><p>子组件要向父组件 传递 得到的输入值</p><p>可以通过调用函数， 传递参数的形式 来传递状态</p><p>App.jsx</p><p>状态在父组件中，修改状态的操作就定义在父组件中</p><p>在父组件中定义一个addTodo函数，然后通过标签传递给子组件</p><p>addTodo函数接受一个参数，这个参数就是要接受的子组件的数据</p><p>通过这个参数，将子组件的数据传给父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 用于添加一个todo，接受的参数是todo对象</span><br>  addTodo = <span class="hljs-function">(<span class="hljs-params">todoObj</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取原todos</span><br>    <span class="hljs-keyword">const</span> &#123; todos &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-comment">// 追加一个todo</span><br>    <span class="hljs-keyword">const</span> newTodos = [todoObj, ...todos]<br>    <span class="hljs-comment">// 更新状态</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">todos</span>: newTodos &#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span>  &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-warp&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">addTodo</span>=<span class="hljs-string">&#123;this.addTodo&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">todos</span>=<span class="hljs-string">&#123;todos&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Header&#x2F;index.js</strong></p><p>生成唯一id的库</p><p>uuid</p><p>nanoid</p><p>npm install nanoid</p><p>父组件通过标签属性传递了一个函数给子组件，子组件可以通过this.props来调用函数</p><p>函数的参数，就是子组件要传递给父组件的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  handleKeyUp = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;keyCode, target&#125; = event<br>    <span class="hljs-keyword">if</span> (keyCode !== <span class="hljs-number">13</span>) <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> (target.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>() === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输入不能为空&#x27;</span>)<br>      <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">addTodo</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-title function_">nanoid</span>(),<br>      <span class="hljs-attr">name</span>: target.<span class="hljs-property">value</span>,<br>      <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span><br>    &#125;)<br>    target.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-header&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onKeyUp</span>=<span class="hljs-string">&#123;this.handleKeyUp&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的任务名称，按回车键确认&quot;</span>/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-鼠标悬浮高亮"><a href="#5-3-鼠标悬浮高亮" class="headerlink" title="5.3 鼠标悬浮高亮"></a>5.3 鼠标悬浮高亮</h2><p>定义一个mouse状态，用来 标识鼠标移入移出</p><p>通过mouse状态的改变，来改变style样式（背景颜色+删除按钮显示与隐藏）</p><p><strong>&gt;&gt;Item&#x2F;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 标识鼠标移入移出</span><br>  state = &#123;<br>    <span class="hljs-attr">mouse</span>: <span class="hljs-literal">false</span><br>  &#125;<br>  <span class="hljs-comment">// 鼠标移入移出的回调</span><br>  handleMouse = <span class="hljs-function">(<span class="hljs-params">flag</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">mouse</span>: flag&#125;)<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; name, done &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">const</span> &#123;mouse&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">mouse</span> ? &#x27;#<span class="hljs-attr">ddd</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">white</span>&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">&#123;this.handleMouse(true)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">&#123;this.handleMouse(false)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">defaultChecked</span>=<span class="hljs-string">&#123;done&#125;/</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;display:</span> <span class="hljs-attr">mouse</span>?&#x27;<span class="hljs-attr">block</span>&#x27;<span class="hljs-attr">:</span>&#x27;<span class="hljs-attr">none</span>&#x27;&#125;&#125;&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-4-勾选-改变-状态"><a href="#5-4-勾选-改变-状态" class="headerlink" title="5.4 勾选 改变 状态"></a>5.4 勾选 改变 状态</h2><p>勾选前面的选中框，要改变到state中的数据</p><p>根据选中的框所属的todo的id找到数据，根据更改后done的值更新相应的done的值</p><p><strong>&gt;&gt;App.jsx</strong></p><p>在父组件中定义一个更新todo的函数，然后传递给子组件</p><p>根据拿到的id和done的值，来更新状态state中相应id数据的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 用于更新一个todo</span><br>  updateTodo = <span class="hljs-function">(<span class="hljs-params">id, done</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; todos &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">const</span> newTodos = todos.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (todo.<span class="hljs-property">id</span> === id) &#123;<br>        <span class="hljs-keyword">return</span> &#123;...todo, <span class="hljs-attr">done</span>: done&#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> todo<br>      &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">todos</span>: newTodos&#125;)<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span>  &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-warp&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">addTodo</span>=<span class="hljs-string">&#123;this.addTodo&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">todos</span>=<span class="hljs-string">&#123;todos&#125;</span> <span class="hljs-attr">updateTodo</span>=<span class="hljs-string">&#123;this.updateTodo&#125;/</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;List&#x2F;index.jsx</strong></p><p>中转 从父组件App中传过来的函数，继续传给它的子组件Item，完成祖孙组件中的通信</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;todos, updateTodo&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          todos.map((todo) =&gt; &#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;todo.id&#125;</span> &#123;<span class="hljs-attr">...todo</span>&#125; <span class="hljs-attr">updateTodo</span>=<span class="hljs-string">&#123;updateTodo&#125;/</span>&gt;</span></span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Item&#x2F;index.jsx</strong></p><p>通过List中转终于拿到祖先组件App中的函数updateTodo</p><p>组件中定义onChange事件的回调函数handleCheck ，【高阶函数+柯里化】</p><p>在回调函数中返回传递过来的函数并传入参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 勾选、取消勾选todo的回调</span><br>  handleCheck = <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">updateTodo</span>(id, event.<span class="hljs-property">target</span>.<span class="hljs-property">checked</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; id, name, done &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">const</span> &#123;mouse&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">mouse</span> ? &#x27;#<span class="hljs-attr">ddd</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">white</span>&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">&#123;this.handleMouse(true)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">&#123;this.handleMouse(false)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">defaultChecked</span>=<span class="hljs-string">&#123;done&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">this.handleCheck</span>(<span class="hljs-attr">id</span>) &#125;/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;display:mouse?</span>&#x27;<span class="hljs-attr">block</span>&#x27;<span class="hljs-attr">:</span>&#x27;<span class="hljs-attr">none</span>&#x27;&#125;&#125;&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-5-对props进行限制"><a href="#5-5-对props进行限制" class="headerlink" title="5.5 对props进行限制"></a>5.5 对props进行限制</h2><p>类型及必要性设置</p><p>自行安装 prop-types 库 npm i prop-types</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;prop-types&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 对接收的props进行类型以及必要性的限制</span><br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">addTodo</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;prop-types&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 对接收的props进行类型以及必要性的限制</span><br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>      <span class="hljs-attr">todos</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">array</span>.<span class="hljs-property">isRequired</span>,<br>      <span class="hljs-attr">updateTodo</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PropTypes</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;prop-types&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 对接收的props进行类型以及必要性的限制</span><br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">updateTodo</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-5-删除一个todo"><a href="#5-5-删除一个todo" class="headerlink" title="5.5 删除一个todo"></a>5.5 删除一个todo</h2><p>选中一个todo，点击删除按钮，删除这个todo</p><p><strong>&gt;&gt;App.jsx</strong></p><p>因为状态数据在父组件中，所以删除todo的函数就定义在App中</p><p>然后将函数传递给子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 用于删除一个todo</span><br>  deleteTodo = <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; todos &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">const</span> newTodos = todos.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> todo.<span class="hljs-property">id</span> !== id<br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">todos</span>:newTodos&#125;)<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span>  &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-warp&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">addTodo</span>=<span class="hljs-string">&#123;this.addTodo&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">todos</span>=<span class="hljs-string">&#123;todos&#125;</span> <span class="hljs-attr">updateTodo</span>=<span class="hljs-string">&#123;this.updateTodo&#125;</span> <span class="hljs-attr">deleteTodo</span>=<span class="hljs-string">&#123;this.deleteTodo&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;List&#x2F;index.jsx</strong></p><p>中转拿到和函数继续传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 对接收的props进行类型以及必要性的限制</span><br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">todos</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">array</span>.<span class="hljs-property">isRequired</span>,<br>    <span class="hljs-attr">updateTodo</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,<br>    <span class="hljs-attr">deleteTodo</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span><br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;todos, updateTodo, deleteTodo&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          todos.map((todo) =&gt; &#123;</span><br><span class="language-xml">            return <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;todo.id&#125;</span> &#123;<span class="hljs-attr">...todo</span>&#125; <span class="hljs-attr">updateTodo</span>=<span class="hljs-string">&#123;updateTodo&#125;</span> <span class="hljs-attr">deleteTodo</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">deleteTodo</span> &#125;/&gt;</span></span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Item&#x2F;index.jsx</strong><br>得到传递到的函数，将id作为函数参数传递给父组件</p><p>定义绑定点击事件 这次没用高阶函数，换了一种写法，效果是一样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 对接收的props进行类型以及必要性的限制</span><br>  <span class="hljs-keyword">static</span> propTypes = &#123;<br>    <span class="hljs-attr">updateTodo</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span>,<br>    <span class="hljs-attr">deleteTodo</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequired</span><br>  &#125;<br>  <span class="hljs-comment">// 删除一个todo的回调</span><br>  handleDelete = <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">`确定删除嘛？`</span>)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">deleteTodo</span>(id)<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; id, name, done &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">const</span> &#123;mouse&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">backgroundColor:</span> <span class="hljs-attr">mouse</span> ? &#x27;#<span class="hljs-attr">ddd</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">white</span>&#x27; &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">&#123;this.handleMouse(true)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">&#123;this.handleMouse(false)&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">defaultChecked</span>=<span class="hljs-string">&#123;done&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">this.handleCheck</span>(<span class="hljs-attr">id</span>) &#125;/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;</span> () =&gt;</span> this.handleDelete(id) &#125; className=&quot;btn btn-danger&quot; style=&#123;&#123;display:mouse?&#x27;block&#x27;:&#x27;none&#x27;&#125;&#125;&gt;删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>##5.6 底部Footer</p><p><strong>&gt;&gt;App.jsx</strong></p><p>在App中将todos传给Footer</p><p>在App中定义全选和全不选的todos来更新状态</p><p>在App中定义清除所有已完成的todo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 用于全选</span><br>  checkAll = <span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取原来的todos</span><br>    <span class="hljs-keyword">const</span> &#123; todos &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-comment">// 过滤数据</span><br>    <span class="hljs-keyword">const</span> newTodos = todos.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;...todo, <span class="hljs-attr">done</span>: done&#125;<br>    &#125;)<br>    <span class="hljs-comment">// 更新状态</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">todos</span>: newTodos&#125;)<br>  &#125;<br>  <span class="hljs-comment">// 清除所有已经完成的</span><br>  clearAllDone = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; todos &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">const</span> newTodos = todos.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> !todo.<span class="hljs-property">done</span><br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">todos</span>: newTodos&#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span>  &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-warp&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">addTodo</span>=<span class="hljs-string">&#123;this.addTodo&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">todos</span>=<span class="hljs-string">&#123;todos&#125;</span> <span class="hljs-attr">updateTodo</span>=<span class="hljs-string">&#123;this.updateTodo&#125;</span> <span class="hljs-attr">deleteTodo</span>=<span class="hljs-string">&#123;this.deleteTodo&#125;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> <span class="hljs-attr">todos</span>=<span class="hljs-string">&#123;todos&#125;</span> <span class="hljs-attr">checkAll</span>=<span class="hljs-string">&#123;this.checkAll&#125;</span> <span class="hljs-attr">clearAllDone</span>=<span class="hljs-string">&#123;this.clearAllDone&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Footer&#x2F;index.jsx</strong><br>拿到todos</p><p>用来计算两个数据doneCount和total，显示在页面中</p><p>定义两个回调函数handleCheckAll和handleClearAllDone</p><p>再从父组件接收两个函数然后调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 全选</span><br>  handleCheckAll = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">checkAll</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">checked</span>)<br>  &#125;<br>  <span class="hljs-comment">// 清除所有已完成的回调</span><br>  handleClearAllDone = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">clearAllDone</span>()<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; todos &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-comment">// 计算已完成</span><br>    <span class="hljs-keyword">const</span> doneCount = todos.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre, todo</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> pre + (todo.<span class="hljs-property">done</span> ? <span class="hljs-number">1</span>: <span class="hljs-number">0</span>) &#125;, <span class="hljs-number">0</span>)<br>    <span class="hljs-comment">// 计算总数</span><br>    <span class="hljs-keyword">const</span> total = todos.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;todo-footer&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleCheckAll&#125;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;doneCount</span> === <span class="hljs-string">total</span> &amp;&amp; <span class="hljs-attr">total</span> !== <span class="hljs-string">0</span> ? <span class="hljs-attr">true:</span> <span class="hljs-attr">false</span> &#125;/&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已完成&#123; doneCount &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> / 全部&#123;total&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClearAllDone&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>清除已完成任务<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>拆分组件、实现静态组件，注意：className、style的写法</p><p>动态初始化列表，如何确定将数据放在哪个组件的state中？</p><p>某个组件使用：放在其 自身 的state中</p><p>某些组件使用：放在他们共同的 父组件 state中（官方称此操作为：状态提升）</p><p>关于父子之间通信：</p><p>【父组件】给【子组件】传递数据：通过props传递</p><p>【子组件】给【父组件】传递数据：通过props传递，要求父提前给子传递一个函数</p><p>注意defaultChecked （只在第一次指定的时候有作用，之后就没作用了）和 checked的区别，类似的还有：defaultValue 和 value<br>状态在哪里，操作状态的方法就在哪里</p><p><img src="https://user-images.githubusercontent.com/117837871/220587169-d8c3072c-e800-46c0-8db2-83abd26f2911.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/117837871/220587280-1a81ccc3-a9b7-4012-aeed-b8959acf65a0.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/117837871/220587310-7b5ec9e9-8c6b-4929-b215-130d49d0e17a.png" alt="image"></p><p>注意defaultChecked （只在第一次指定的时候有作用，之后就没作用了）和 checked的区别，类似的还有：defaultValue 和 value</p><h1 id="用户搜索页面与配置代理"><a href="#用户搜索页面与配置代理" class="headerlink" title="用户搜索页面与配置代理"></a>用户搜索页面与配置代理</h1><p>今天我们使用React做一个需要发起ajax请求的小demo（github用户搜索页面），我们先使用axios实现，最后再实现一个fetch版本的。</p><p>这中间我们还会在React中配置代理来解决跨域问题，还会使用消息订阅与发布模式改进我们的代码。</p><h2 id="1-理解"><a href="#1-理解" class="headerlink" title="1. 理解"></a>1. 理解</h2><p>之前也学习过ajax和axios，可以先看看这两个笔记复习一下ajax</p><p><a href="https://juejin.cn/post/6999604180432191519">【Ajax】HTTP相关问题-GET-POST-XHR使用-jQuery中的ajax-跨域-同源-jsonp-cors</a></p><p><a href="https://juejin.cn/post/7015487317582299144">【Axios】使用json-server 搭建REST API - 使用axios - 自定义axios - 取消请求 - 拦截器</a></p><h3 id="1-1-前置说明"><a href="#1-1-前置说明" class="headerlink" title="1.1. 前置说明"></a>1.1. 前置说明</h3><p>React本身只关注于界面, 并不包含发送<strong>ajax</strong>请求的代码</p><p>前端应用需要通过ajax请求与后台进行交互(json数据)</p><p>React应用中需要集成第三方ajax库(或自己封装)</p><h3 id="1-2-常用的ajax请求库"><a href="#1-2-常用的ajax请求库" class="headerlink" title="1.2. 常用的ajax请求库"></a>1.2. 常用的ajax请求库</h3><p>jQuery: 比较重, 如果需要另外引入不建议使用</p><p>axios: 轻量级, 建议使用</p><pre><code class="hljs">1.封装XmlHttpRequest对象的ajax2.promise风格3.可以用在浏览器端和node服务器端</code></pre><h2 id="2-axios"><a href="#2-axios" class="headerlink" title="2. axios"></a>2. axios</h2><p>安装<strong>npm install axios</strong></p><h3 id="2-1-文档"><a href="#2-1-文档" class="headerlink" title="2.1. 文档"></a>2.1. 文档</h3><p>Github.com&#x2F;axios&#x2F;axios</p><h3 id="2-2-相关API"><a href="#2-2-相关API" class="headerlink" title="2.2. 相关API"></a>2.2. 相关API</h3><p>更多细节可以参考这个笔记的内容 <a href="https://blog.csdn.net/weixin_44972008/article/details/114368528">【axios】使用json-server 搭建REST API - 使用axios - 自定义axios - 取消请求 - 拦截器</a></p><h2 id="3-React中配置代理解决跨域问题"><a href="#3-React中配置代理解决跨域问题" class="headerlink" title="3. React中配置代理解决跨域问题"></a>3. React中配置代理解决跨域问题</h2><h3 id="3-1-配置代理方法"><a href="#3-1-配置代理方法" class="headerlink" title="3.1 配置代理方法"></a>3.1 配置代理方法</h3><p>解决跨域问题，在React开启中间代理</p><p>在项目中的package.json中，最后加上一行”proxy”: “<a href="http://loaclhost:5000/">http://loaclhost:5000</a>“ 写到端口号</p><p>然后重启脚手架</p><p>再次发送请求的时候就直接写自己的3000端口</p><p>3000端口有的资源直接请求3000端口的，3000端口没有的资源就请求代理设置的5000端口</p><p>在package.json中追加如下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;proxy&quot;</span>:<span class="hljs-string">&quot;http://localhost:5000&quot;</span><br></code></pre></td></tr></table></figure><p>说明：</p><pre><code class="hljs">优点：配置简单，前端请求资源时可以不加任何前缀。配置多个代理。工作方式：上述方式配置代理，当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）</code></pre><h3 id="3-2-配置多个代理方法"><a href="#3-2-配置多个代理方法" class="headerlink" title="3.2 配置多个代理方法"></a>3.2 配置多个代理方法</h3><p>配置多个代理，不在 package.json 配置</p><pre><code class="hljs">第一步：创建代理配置文件</code></pre><p>在src下创建配置文件：src&#x2F;setupProxy.js</p><pre><code class="hljs">编写setupProxy.js配置具体代理规则：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-title function_">proxy</span>(<span class="hljs-string">&#x27;/api1&#x27;</span>, &#123;  <span class="hljs-comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span><br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>, <span class="hljs-comment">//配置转发目标地址(能返回数据的服务器地址)</span><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//控制服务器接收到的请求头中host字段的值</span><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span><br><span class="hljs-comment">      changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span><br><span class="hljs-comment">      changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span><br><span class="hljs-comment">      */</span><br>      <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125; <span class="hljs-comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span><br>    &#125;),<br>    <span class="hljs-title function_">proxy</span>(<span class="hljs-string">&#x27;/api2&#x27;</span>, &#123; <br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5001&#x27;</span>,<br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;<br>    &#125;)<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：<br>1.优点：可以配置多个代理，可以灵活的控制请求是否走代理。</p><p>2.缺点：配置繁琐，前端请求资源时必须加前缀。</p><h2 id="4-案例—github用户搜索"><a href="#4-案例—github用户搜索" class="headerlink" title="4. 案例—github用户搜索"></a>4. 案例—github用户搜索</h2><p>之前用Vue也做过这个案例，可以对比着学习 <a href="https://blog.csdn.net/weixin_44972008/article/details/113992327">【Vue】高级系列（七）Vue-cli配置代理 - Ajax实战-demo3-GitHub用户查询-axios-pubsub</a></p><h3 id="4-1-效果"><a href="#4-1-效果" class="headerlink" title="4.1 效果"></a>4.1 效果</h3><p>请求地址: <a href="https://api.github.com/search/users?q=xxxxxx">https://api.github.com/search/users?q=xxxxxx</a></p><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e17bce649e774e089e6b423830c2a28e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e17bce649e774e089e6b423830c2a28e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp</a></p><h3 id="4-2-React-实现"><a href="#4-2-React-实现" class="headerlink" title="4.2 React 实现"></a>4.2 React 实现</h3><h4 id="4-2-1-静态页面拆分实现"><a href="#4-2-1-静态页面拆分实现" class="headerlink" title="4.2.1 静态页面拆分实现"></a>4.2.1 静态页面拆分实现</h4><p><strong>&gt;&gt;App.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Search&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Users</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Users&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Users</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Search&#x2F;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron-heading&quot;</span>&gt;</span>搜索Github用户<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你要搜索的用户名&quot;</span> /&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;User&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/reactjs&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/reactjs&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/reactjs&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/reactjs&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/reactjs&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://avatars.githubusercontent.com/u/6412038?v=3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>reactjs<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;User&#x2F;index.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.album</span> &#123;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50rem</span>; <span class="hljs-comment">/* Can be removed; just added for demo purposes */</span><br>  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">3rem</span>;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">3rem</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f7f7f7</span>;<br>&#125;<br><br><span class="hljs-selector-class">.card</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">33.333%</span>;<br>  <span class="hljs-attribute">padding</span>: .<span class="hljs-number">75rem</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#efefef</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.card</span> &gt; <span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">margin-bottom</span>: .<span class="hljs-number">75rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.card-text</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">85%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-动态交互实现"><a href="#4-2-2-动态交互实现" class="headerlink" title="4.2.2 动态交互实现"></a>4.2.2 动态交互实现</h4><p>由于github访问失败，可以伪造一个服务器返回一些固定的结果，让用户体验更佳 使用express搭建一个服务器</p><p><strong>&gt;&gt;serve.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;axios&quot;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  请求地址： http://localhost:3000/search/users?q=aa</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  后台路由</span><br><span class="hljs-comment">    key： /search/users</span><br><span class="hljs-comment">    value： function () &#123;&#125;</span><br><span class="hljs-comment">*/</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/search/users&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;q&#125; = req.<span class="hljs-property">query</span><br>  <span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://api.github.com/search/users&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;q&#125;<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">json</span>(response.<span class="hljs-property">data</span>)<br>  &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/search/users2&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">json</span>(&#123;<br>    <span class="hljs-attr">items</span>: [<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;yyx990803&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/yyx990803&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>:<br>          <span class="hljs-string">&quot;https://avatars3.githubusercontent.com/u/499550?s=460&amp;u=de41ec9325e8a92e281b96a1514a0fd1cd81ad4a&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;ruanyf&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/ruanyf&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>: <span class="hljs-string">&quot;https://avatars2.githubusercontent.com/u/905434?s=460&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;yyx9908032&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/yyx990803&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>:<br>          <span class="hljs-string">&quot;https://avatars3.githubusercontent.com/u/499550?s=460&amp;u=de41ec9325e8a92e281b96a1514a0fd1cd81ad4a&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;ruanyf2&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/ruanyf&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>: <span class="hljs-string">&quot;https://avatars2.githubusercontent.com/u/905434?s=460&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;yyx9908033&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/yyx990803&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>:<br>          <span class="hljs-string">&quot;https://avatars3.githubusercontent.com/u/499550?s=460&amp;u=de41ec9325e8a92e281b96a1514a0fd1cd81ad4a&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;ruanyf3&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/ruanyf&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>: <span class="hljs-string">&quot;https://avatars2.githubusercontent.com/u/905434?s=460&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;yyx9908034&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/yyx990803&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>:<br>          <span class="hljs-string">&quot;https://avatars3.githubusercontent.com/u/499550?s=460&amp;u=de41ec9325e8a92e281b96a1514a0fd1cd81ad4a&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;ruanyf4&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/ruanyf&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>: <span class="hljs-string">&quot;https://avatars2.githubusercontent.com/u/905434?s=460&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">8</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">login</span>: <span class="hljs-string">&quot;yyx9908035&quot;</span>,<br>        <span class="hljs-attr">html_url</span>: <span class="hljs-string">&quot;https://github.com/yyx990803&quot;</span>,<br>        <span class="hljs-attr">avatar_url</span>:<br>          <span class="hljs-string">&quot;https://avatars3.githubusercontent.com/u/499550?s=460&amp;u=de41ec9325e8a92e281b96a1514a0fd1cd81ad4a&amp;v=4&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">9</span>,<br>      &#125;,<br>    ],<br>  &#125;);<br>&#125;);<br><br><br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">5000</span>, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!err)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动成功&quot;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;请求github真实数据请访问：http://localhost:5000/search/users&quot;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;请求本地模拟数据请访问：http://localhost:5000/search/users2&quot;</span>)<br>  &#125; <br>  <span class="hljs-keyword">else</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;)<br></code></pre></td></tr></table></figure><p>在这里插入图片描述</p><p><strong>src&#x2F;setupProxy.js</strong></p><p>设置代理服务器解决跨域问题src&#x2F;setupProxy.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> proxy = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>) &#123;<br>  app.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-title function_">proxy</span>(<span class="hljs-string">&#x27;/api1&#x27;</span>, &#123;  <span class="hljs-comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span><br>      <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:5000&#x27;</span>, <span class="hljs-comment">//配置转发目标地址(能返回数据的服务器地址)</span><br>      <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//控制服务器接收到的请求头中host字段的值</span><br>      <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125; <span class="hljs-comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span><br>    &#125;)<br>  )<br>&#125;<br><br><span class="hljs-comment">// 【补充】连续解构赋值</span><br><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>:&#123;<span class="hljs-attr">b</span>:&#123;<span class="hljs-attr">c</span>:<span class="hljs-number">1</span>&#125;&#125;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">b</span>.<span class="hljs-property">c</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">a</span>:&#123;<span class="hljs-attr">b</span>:&#123;c&#125;&#125;&#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c) <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">let</span> obj2 = &#123;<span class="hljs-attr">a</span>:&#123;<span class="hljs-attr">b</span>:<span class="hljs-number">1</span>&#125;&#125;<br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">a</span>:&#123;<span class="hljs-attr">b</span>:data&#125;&#125; = obj2 <span class="hljs-comment">// 重命名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.jsx</strong></p><p>将状态数据定义在App中 操作状态的方法放在App中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">users</span>: []<br>  &#125;<br>  saveUsers = <span class="hljs-function">(<span class="hljs-params">users</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; users &#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;users&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> <span class="hljs-attr">saveUsers</span>=<span class="hljs-string">&#123;this.saveUsers&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Users</span> <span class="hljs-attr">users</span>=<span class="hljs-string">&#123;users&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Search&#x2F;index&#x2F;jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  search = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取用户输入(连续解构赋值+重命名)</span><br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">keyWordElement</span>: &#123;<span class="hljs-attr">value</span>: keyWord&#125;&#125; = <span class="hljs-variable language_">this</span><br>    <span class="hljs-comment">// console.log(keyWord)</span><br>    <span class="hljs-comment">// 发送网络请求</span><br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/api1/search/users?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">saveUsers</span>(response.<span class="hljs-property">data</span>.<span class="hljs-property">items</span>)<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;失败&#x27;</span>,error)&#125;<br>    )<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron-heading&quot;</span>&gt;</span>搜索Github用户<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.keyWordElement = c&#125; type=&quot;text&quot; placeholder=&quot;请输入你要搜索的用户名&quot; /&gt;<span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.search&#125;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Users&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          this.props.users.map((userObj) =&gt; &#123;</span><br><span class="language-xml">            return (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;userObj.id&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;userObj.html_url&#125;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;userObj.avatar_url&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            )</span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果展示</p><p>在这里插入图片描述</p><h4 id="4-2-3-优化用户体验"><a href="#4-2-3-优化用户体验" class="headerlink" title="4.2.3 优化用户体验"></a>4.2.3 优化用户体验</h4><p>在Users组件中，应该不止只有用户列表页面，应该还有</p><pre><code class="hljs">1.欢迎使用界面【第一次打开页面】2.搜索加载页面【点击按钮发送请求和接收到响应之间显示】3.搜索失败页面【请求失败显示】</code></pre><p>有四种不同的显示，那就需要不同的状态state来控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 初始化状态</span><br>state = &#123; <br>  <span class="hljs-attr">users</span>: [], <span class="hljs-comment">// users初始值</span><br>  <span class="hljs-attr">isFirst</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否第一次打开页面</span><br>  <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 标识是否处于加载中</span><br>  <span class="hljs-attr">err</span>:<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 请求失败的消息</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 初始化状态</span><br>  state = &#123; <br>    <span class="hljs-attr">users</span>: [], <span class="hljs-comment">// users初始值</span><br>    <span class="hljs-attr">isFirst</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否第一次打开页面</span><br>    <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 标识是否处于加载中</span><br>    <span class="hljs-attr">err</span>:<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 请求失败的消息</span><br>  &#125;<br>  <span class="hljs-comment">// saveUsers = (users) =&gt; &#123;</span><br>  <span class="hljs-comment">//   this.setState(&#123; users &#125;)</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// 更新App的state</span><br>  updateAppState = <span class="hljs-function">(<span class="hljs-params">stateObj</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(stateObj)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> <span class="hljs-attr">updateAppState</span>=<span class="hljs-string">&#123;this.updateAppState&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Users</span> &#123;<span class="hljs-attr">...this.state</span>&#125; /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Search&#x2F;index&#x2F;jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  search = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取用户输入(连续解构赋值+重命名)</span><br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">keyWordElement</span>: &#123;<span class="hljs-attr">value</span>: keyWord&#125;&#125; = <span class="hljs-variable language_">this</span><br>    <span class="hljs-comment">// console.log(keyWord)</span><br>    <span class="hljs-comment">// 发送请求前通知App更新状态</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">updateAppState</span>(&#123;<br>      <span class="hljs-attr">isFirst</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span><br>    &#125;)<br>    <span class="hljs-comment">// 发送网络请求</span><br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/api1/search/users?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&#x27;成功&#x27;)</span><br>        <span class="hljs-comment">// 请求成功，通知App更新状态</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">updateAppState</span>(&#123;<span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">users</span>: response.<span class="hljs-property">data</span>.<span class="hljs-property">items</span>&#125;)<br>        <span class="hljs-comment">// this.props.saveUsers(response.data.items)</span><br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(&#x27;失败&#x27;, error)</span><br>        <span class="hljs-comment">// 请求失败，通知App更新状态</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">updateAppState</span>(&#123;<span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">err</span>: error.<span class="hljs-property">message</span>&#125;)<br>      &#125;<br>    )<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron-heading&quot;</span>&gt;</span>搜索Github用户<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.keyWordElement = c&#125; type=&quot;text&quot; placeholder=&quot;请输入你要搜索的用户名&quot; /&gt;<span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.search&#125;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Users&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;users, isFirst, isLoading, err&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          isFirst ? <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎使用，请输入关键字，随后点击搜索<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> :</span><br><span class="language-xml">          isLoading ? <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> :</span><br><span class="language-xml">          err ? <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span> &#x27;<span class="hljs-attr">red</span>&#x27;&#125;&#125;&gt;</span>&#123;err&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> :</span><br><span class="language-xml">          users.map((userObj) =&gt; &#123;</span><br><span class="language-xml">            return (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;userObj.id&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;userObj.html_url&#125;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;userObj.avatar_url&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            )</span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果展示<br>在这里插入图片描述</p><h2 id="5-消息订阅-发布机制"><a href="#5-消息订阅-发布机制" class="headerlink" title="5. 消息订阅-发布机制"></a>5. 消息订阅-发布机制</h2><p>前面案例中，兄弟组件之间的通信总是要借助父组件才行 现在介绍消息订阅-发布机制来进行兄弟组件之间通信</p><p>介绍PubSubJS库</p><p><a href="https://github.com/mroderick/PubSubJS">PubSubJS</a></p><p>1.工具库: PubSubJS</p><p>2.下载: <strong>npm install pubsub-js</strong>在这里插入图片描述</p><p>使用 在【接收】数据的组件中【订阅】消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PubSub</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span> <span class="hljs-comment">//引入（包名的命名规范中不能出现字母）</span><br><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123; &#125;); <span class="hljs-comment">// 订阅</span><br><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;delete&#x27;</span>, data) <span class="hljs-comment">// 发布消息 携带数据</span><br></code></pre></td></tr></table></figure><p>在案例中使用</p><p>Users组件【接收】数据，所以Users组件【订阅】消息 Search组件 将数据发送出去，【发布】消息</p><p><strong>&gt;&gt;App.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Search</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Users</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Users&#x2F;index.jsx</strong></p><p>User组件中用状态数据state，状态定义在这里，在这里订阅消息 Search组件改变状态数据，在这里发布消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-comment">// 初始化状态</span><br>  state = &#123; <br>    <span class="hljs-attr">users</span>: [], <span class="hljs-comment">// users初始值</span><br>    <span class="hljs-attr">isFirst</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否第一次打开页面</span><br>    <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 标识是否处于加载中</span><br>    <span class="hljs-attr">err</span>:<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">// 请求失败的消息</span><br>  &#125;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 订阅消息</span><br>    <span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">_, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(data)<br>    &#125;)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;users, isFirst, isLoading, err&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          isFirst ? <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎使用，请输入关键字，随后点击搜索<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> :</span><br><span class="language-xml">          isLoading ? <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> :</span><br><span class="language-xml">          err ? <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span> &#x27;<span class="hljs-attr">red</span>&#x27;&#125;&#125;&gt;</span>&#123;err&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> :</span><br><span class="language-xml">          users.map((userObj) =&gt; &#123;</span><br><span class="language-xml">            return (</span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;userObj.id&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noreferrer&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#123;userObj.html_url&#125;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;userObj.avatar_url&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> &#x27;<span class="hljs-attr">width</span>&#x27;<span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">100px</span>&#x27; &#125;&#125;/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            )</span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Search&#x2F;index.jsx</strong></p><p>Search组件改变状态数据，在这里发布消息【一改变状态，就发布消息】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  search = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">keyWordElement</span>: &#123;<span class="hljs-attr">value</span>: keyWord&#125;&#125; = <span class="hljs-variable language_">this</span><br>    <span class="hljs-comment">// 发送请求前通知Users更新状态</span><br>    <span class="hljs-comment">// this.props.updateAppState(&#123;isFirst: false,isLoading: true&#125;)</span><br>    <span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>, &#123;<span class="hljs-attr">isFirst</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span>&#125;)<br>    <span class="hljs-comment">// 发送网络请求</span><br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/api1/search/users?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<br>      <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 请求成功，通知Users更新状态</span><br>        <span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>, &#123;<span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">users</span>: response.<span class="hljs-property">data</span>.<span class="hljs-property">items</span>&#125;)<br>        <span class="hljs-comment">// this.props.updateAppState(&#123;isLoading: false, users: response.data.items&#125;)</span><br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 请求失败，通知Users更新状态</span><br>        <span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>, &#123;<span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">err</span>: error.<span class="hljs-property">message</span>&#125;)<br>        <span class="hljs-comment">// this.props.updateAppState(&#123;isLoading: false, err: error.message&#125;)</span><br>      &#125;<br>    )<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;jumbotron-heading&quot;</span>&gt;</span>搜索Github用户<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.keyWordElement = c&#125; type=&quot;text&quot; placeholder=&quot;请输入你要搜索的用户名&quot; /&gt;<span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.search&#125;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>Fetch</li></ol><p>Axios在前端是对xhr的封装 而Fetch是内置的网络请求方法，不需要单独下载安装</p><p>6.1 文档</p><p>github.github.io&#x2F;fetch&#x2F;</p><p>【相关博文】传统 Ajax 已死，Fetch 永生</p><p>6.2 特点</p><p>fetch: 原生函数，不再使用XmlHttpRequest对象提交ajax请求</p><p>老版本浏览器可能不支持</p><p>6.3 实例演示</p><p>Search&#x2F;index.jsx</p><p>优化前</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>search = <span class="hljs-title function_">async</span>()=&gt;&#123;<br><span class="hljs-comment">//获取用户的输入(连续解构赋值+重命名)</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">keyWordElement</span>:&#123;<span class="hljs-attr">value</span>:keyWord&#125;&#125; = <span class="hljs-variable language_">this</span><br><span class="hljs-comment">//发送请求前通知List更新状态</span><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>,&#123;<span class="hljs-attr">isFirst</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//发送网络请求---使用fetch发送（未优化）</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api1/search/users2?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<br><span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;联系服务器成功了&#x27;</span>);<br><span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>()<br>&#125;,<br><span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;联系服务器失败了&#x27;</span>,error);<br>        <span class="hljs-comment">//返回初始化状态的promise值,不再往下走。</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;)<br>&#125;<br>).<span class="hljs-title function_">then</span>(<br><span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取数据成功了&#x27;</span>,response);&#125;,<br><span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取数据失败了&#x27;</span>,error);&#125;<br>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Search</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>search = <span class="hljs-title function_">async</span>()=&gt;&#123;<br><span class="hljs-comment">//获取用户的输入(连续解构赋值+重命名)</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">keyWordElement</span>:&#123;<span class="hljs-attr">value</span>:keyWord&#125;&#125; = <span class="hljs-variable language_">this</span><br><span class="hljs-comment">//发送请求前通知List更新状态</span><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>,&#123;<span class="hljs-attr">isFirst</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//发送网络请求---使用fetch发送（优化）</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api1/search/users2?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>)<br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br><span class="hljs-comment">// console.log(data);</span><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>,&#123;<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">false</span>, <span class="hljs-attr">users</span>:data.<span class="hljs-property">items</span>&#125;)<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-comment">// console.log(&#x27;请求出错&#x27;,error);</span><br><span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;ykyk&#x27;</span>,&#123;<span class="hljs-attr">isLoading</span>:<span class="hljs-literal">false</span>, <span class="hljs-attr">err</span>:error.<span class="hljs-property">message</span>&#125;)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>总结</li></ol><p>设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办。</p><p>ES6小知识点：解构赋值+重命名</p><p>let obj &#x3D; {a:{b:1}}</p><p>const {a} &#x3D; obj; &#x2F;&#x2F;传统解构赋值</p><p>const {a:{b}} &#x3D; obj; &#x2F;&#x2F;连续解构赋值</p><p>const {a:{b:value}} &#x3D; obj; &#x2F;&#x2F;连续解构赋值+重命名</p><p>消息订阅与发布机制</p><p>先订阅，再发布（理解：有一种隔空对话的感觉）</p><p>适用于任意组件间通信</p><p>要在组件的componentWillUnmount中取消订阅</p><p>fetch发送请求（关注分离的设计思想）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> response= <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`/api1/search/users2?q=<span class="hljs-subst">$&#123;keyWord&#125;</span>`</span>)<br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求出错&#x27;</span>,error);<br>&#125;<br></code></pre></td></tr></table></figure><p>【React】SPA - 路由机制 - react-router5 - 基本路由 - 嵌套路由 - 传递参数 - 路由跳转</p><h1 id="1-相关理解"><a href="#1-相关理解" class="headerlink" title="1. 相关理解"></a>1. 相关理解</h1><h2 id="1-1-SPA的理解"><a href="#1-1-SPA的理解" class="headerlink" title="1.1. SPA的理解"></a>1.1. SPA的理解</h2><p>单页Web应用（single page web application，SPA）</p><p>整个应用只有一个完整的页面。</p><p>点击页面中的链接不会刷新页面，只会做页面的局部更新。</p><p>数据都需要通过ajax请求获取, 并在前端异步展现。</p><h2 id="1-2-路由的理解"><a href="#1-2-路由的理解" class="headerlink" title="1.2. 路由的理解"></a>1.2. 路由的理解</h2><h3 id="1-2-1-什么是路由"><a href="#1-2-1-什么是路由" class="headerlink" title="1.2.1 什么是路由?"></a>1.2.1 什么是路由?</h3><p>一个路由就是一个映射关系(key: value)</p><p>key为路径, value可能是function或component</p><h3 id="1-2-2-路由分类"><a href="#1-2-2-路由分类" class="headerlink" title="1.2.2 路由分类"></a>1.2.2 路由分类</h3><ul><li><ol><li>后端路由</li></ol><ul><li><p>理解： value是function, 用来处理客户端提交的请求。</p></li><li><p>注册路由： router.get(path, function(req, res))</p></li><li><p>工作过程：当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据</p></li></ul></li><li><ol start="2"><li>前端路由</li></ol><ul><li><p>浏览器端路由，value是component，用于展示页面内容。</p></li><li><p>注册路由: <Route path="/test" component={Test}></p></li><li><p>工作过程：当浏览器的path变为&#x2F;test时, 当前路由组件就会变为Test组件</p></li><li><p>主要是通过操作BOM中的history来操作路径</p></li></ul></li></ul><h2 id="1-3-react-router-dom-的理解"><a href="#1-3-react-router-dom-的理解" class="headerlink" title="1.3. react-router-dom 的理解"></a>1.3. react-router-dom 的理解</h2><ul><li><p>React的一个插件库。</p></li><li><p>专门用来实现一个SPA应用。</p></li><li><p>基于React的项目基本都会用到此库。</p></li></ul><h1 id="2-react-router-dom相关API"><a href="#2-react-router-dom相关API" class="headerlink" title="2. react-router-dom相关API"></a>2. react-router-dom相关API</h1><h2 id="2-1-内置组件"><a href="#2-1-内置组件" class="headerlink" title="2.1. 内置组件"></a>2.1. 内置组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">BrowserRouter</span>&gt;<br>&lt;<span class="hljs-title class_">HashRouter</span>&gt;<br>&lt;<span class="hljs-title class_">Route</span>&gt;<br>&lt;<span class="hljs-title class_">Redirect</span>&gt;<br>&lt;<span class="hljs-title class_">Link</span>&gt;<br>&lt;<span class="hljs-title class_">NavLink</span>&gt;<br>&lt;<span class="hljs-title class_">Switch</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="2-2-其它"><a href="#2-2-其它" class="headerlink" title="2.2. 其它"></a>2.2. 其它</h2><p>history 对象</p><p>match 对象</p><p>withRouter 函数</p><h1 id="3-基本路由使用"><a href="#3-基本路由使用" class="headerlink" title="3. 基本路由使用"></a>3. 基本路由使用</h1><h2 id="3-1-效果"><a href="#3-1-效果" class="headerlink" title="3.1. 效果"></a>3.1. 效果</h2><p><a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34f6957bbd4f46efac620ff7d66003a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp">在这里插入图片描述</a></p><h2 id="3-2-准备"><a href="#3-2-准备" class="headerlink" title="3.2. 准备"></a>3.2. 准备</h2><p>下载react-router-dom: npm install react-router-dom</p><p>引入bootstrap.css: <link rel="stylesheet" href="/css/bootstrap.css"></p><h2 id="3-3-路由的基本使用"><a href="#3-3-路由的基本使用" class="headerlink" title="3.3 路由的基本使用"></a>3.3 路由的基本使用</h2><p>1.明确好界面中的导航区、展示区</p><p>2.导航区的a标签改为Link标签 <code>&lt;Link to=&quot;/xxxxx&quot;&gt;Demo&lt;/Link&gt;</code>&#x2F;&#x2F;to里面尽量都小写</p><p>3.展示区写Route标签进行路径的匹配 <code>&lt;Route path=&#39;/xxxx&#39; component=&#123;Demo&#125;/&gt;</code></p><p>4.<code>&lt;App&gt;</code>的最外侧包裹了一个<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code></p><p>(BrowserRouter 将会监听 URL 的变化，当 URL 变更时，它将使浏览器显示相应的页面；所以要在最外侧包裹一个)</p><h2 id="3-4-实现"><a href="#3-4-实现" class="headerlink" title="3.4 实现"></a>3.4 实现</h2><p><strong>&gt;&gt;Index.js</strong></p><p>这里用一个路由器标签将整个App包起来，保证使用的是同一个路由器这里使用BrowserRouter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入react核心库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-comment">//引入ReactDOM</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">BrowserRouter</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-comment">//引入App</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>)<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>,<span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./About&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>React Router Demo<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;/* 原生html中，靠<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>跳转不同的页面 */&#125;</span><br><span class="language-xml">            &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./about.html&quot;</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item active&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> */&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">            &#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;col-xs-6&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="language-xml">                &#123;/* 注册路由 */&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/about&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span> /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    )</span><br><span class="language-xml">  &#125;</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-5-路由组件与一般组件的区别"><a href="#3-5-路由组件与一般组件的区别" class="headerlink" title="3.5 路由组件与一般组件的区别"></a>3.5 路由组件与一般组件的区别</h2><p><code>#号后面的东西不作为数据发送给服务器</code></p><p>一、写法不同</p><ul><li>一般组件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Demo</span>/&gt;<br></code></pre></td></tr></table></figure><ul><li>路由组件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Route</span> path=<span class="hljs-string">&quot;/demo&quot;</span> component=&#123;<span class="hljs-title class_">Demo</span>&#125;/&gt;<br></code></pre></td></tr></table></figure><p>二、存放位置不同</p><ul><li><p>一般组件：components</p></li><li><p>路由组件：pages</p></li></ul><p>三、接收到的props不同</p><ul><li><p>一般组件：写组件标签时传递了什么，就能收到什么</p></li><li><p>路由组件：接收到三个固定的属性</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">history</span>: <br><br>  <span class="hljs-attr">go</span>: ƒ <span class="hljs-title function_">go</span>(n)<br><br>  <span class="hljs-attr">goBack</span>: ƒ <span class="hljs-title function_">goBack</span>() <br><br>  <span class="hljs-attr">goForward</span>: ƒ <span class="hljs-title function_">goForward</span>() <br><br>  <span class="hljs-attr">push</span>: ƒ <span class="hljs-title function_">push</span>(path, state) <br><br>  <span class="hljs-attr">replace</span>: ƒ <span class="hljs-title function_">replace</span>(path, state) <br><br><br><span class="hljs-attr">location</span>:<br><br>  <span class="hljs-attr">pathname</span>: <span class="hljs-string">&quot;/about&quot;</span><br><br>  <span class="hljs-attr">search</span>: <span class="hljs-string">&quot;&quot;</span><br><br>  <span class="hljs-attr">state</span>: <span class="hljs-literal">undefined</span><br><br><br><span class="hljs-attr">match</span>:<br><br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/about&quot;</span><br><br>  <span class="hljs-attr">params</span>: &#123;&#125;<br><br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/about&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-6-NavLink与封装NavLink"><a href="#3-6-NavLink与封装NavLink" class="headerlink" title="3.6 NavLink与封装NavLink"></a>3.6 NavLink与封装NavLink</h2><p>NavLink可以实现路由链接的高亮，通过activeClassName属性指定样式名，默认是”active”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">NavLink</span> activeClassName=<span class="hljs-string">&quot;demo&quot;</span> className=<span class="hljs-string">&quot;list-group-item&quot;</span> to=<span class="hljs-string">&quot;/home&quot;</span>&gt;<span class="hljs-title class_">Home</span>&lt;/<span class="hljs-title class_">NavLink</span>&gt;<br></code></pre></td></tr></table></figure><p>可以自己封装一个NavLink【一般组件】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">NavLink</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNavLink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// console.log(this.props);</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">activeClassName</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> &#123;<span class="hljs-attr">...this.props</span>&#125; /&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>标签体内容是特殊的标签属性通过this.props.children可以获取标签体内容</p><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">MyNavLink</span> to=<span class="hljs-string">&quot;/about&quot;</span>&gt;<span class="hljs-title class_">About</span>&lt;/<span class="hljs-title class_">MyNavLink</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyNavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">MyNavLink</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-7-Switch的使用"><a href="#3-7-Switch的使用" class="headerlink" title="3.7 Switch的使用"></a>3.7 Switch的使用</h2><ul><li><p>通常情况下，path和component是一一对应的关系。<code>&lt;Route path=&#39;/about&#39; component=&#123;About&#125; /&gt;</code></p></li><li><p><strong>Switch</strong>可以提高路由匹配效率(单一匹配)。</p></li></ul><p>这样只要匹配到了第一个就不会再往下匹配了</p><p>引入switch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Switch</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;/</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;/</span>&gt;</span></span> <br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Test&#125;/</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>,&#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">HashRouter</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Router</span>,<span class="hljs-title class_">Route</span>,<span class="hljs-title class_">Link</span>,<span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Main</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Main&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./About&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Topic</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Topic&#x27;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;  &#125;;<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>main<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>about<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/topic&quot;</span>&gt;</span>topic<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">                &#123;/* &#123;this.props.children&#125; */&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                &#123;/* Switch匹配到第一个路由就不会继续匹配了,</span><br><span class="language-xml">                如果不加Route 里不加 exact，那么凡是Link里面 to 的路径包含了/，</span><br><span class="language-xml">                那么就会被匹配到，于是Switch就不继续匹配下去</span><br><span class="language-xml">                </span><br><span class="language-xml">                */&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span>  <span class="hljs-attr">exact</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Main&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span>  <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span>  <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/topic&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Topic&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span><br>            <br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Home</span>;<br></code></pre></td></tr></table></figure><h2 id="3-8-解决多级路径刷新页面样式丢失的问题"><a href="#3-8-解决多级路径刷新页面样式丢失的问题" class="headerlink" title="3.8 解决多级路径刷新页面样式丢失的问题"></a>3.8 解决多级路径刷新页面样式丢失的问题</h2><p>【Pulbic文件夹就是根目录&#x2F;】</p><p>《解决方案》</p><ul><li><p>public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 &#x2F; （常用）【绝对路径】</p></li><li><p>public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 %PUBLIC_URL% （常用）</p></li><li><p>使用HashRouter</p></li></ul><p>问题原因：多级路径下，加载样式时，使用相对路径，在刷新时将多级路由也考虑在内</p><p>&#x2F;&#x2F; 如下，样式路径 ‘.&#x2F;‘ 导致加载资源时，需要参考当前路径，因此多级路由会影响资源的加载<br> <link rel="stylesheet" href="./test.css" /></p><p>解决的三种方法：<br>使用 绝对路径<br>public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 &#x2F; （常用）<br> &#x2F;&#x2F; 加载 根目录下的 test.css ，与当前路由无关<br> <link rel="stylesheet" href="/test.css" /></p><p>使用 %PUBLIC_URL%（此方法只有在react中有效）<br>public&#x2F;index.html 中 引入样式时不写 .&#x2F; 写 %PUBLIC_URL% （常用）<br> &#x2F;&#x2F; 加载 public 文件夹下的 test.css ，与当前路由无关<br> <link rel="stylesheet" href="%PUBLIC_URL%/test.css" /></p><p>原理：使用绝对路径，即固定了是public下的test.css，并不会被变动。</p><p>使用HashRouter<br>ReactDOM.render(<br>    <HashRouter><br>        <App /><br>    </HashRouter><br>    , document.getElementById(‘root’))</p><p>原理：因为 hash 是不会改变路径的，也不会包含在请求URL中，因此不会影响相对路径</p><p>总结：<br>样式丢失的原因是，加载资源时使用相对路径，而相对路径又会参考当前路由路径，因此导致加载不到资源，解决办法则是使用绝对路径等，让其加载资源时不再参考路由路径。</p><h2 id="3-9-路由的严格匹配与模糊匹配"><a href="#3-9-路由的严格匹配与模糊匹配" class="headerlink" title="3.9 路由的严格匹配与模糊匹配"></a>3.9 路由的严格匹配与模糊匹配</h2><p>默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）<br>开启严格匹配：<Route exact={true} path="/about" component={About}/>简写<Route exact path="/about" component={About}/><br>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p><h2 id="3-10-Redirect的使用【重定向】"><a href="#3-10-Redirect的使用【重定向】" class="headerlink" title="3.10 Redirect的使用【重定向】"></a>3.10 Redirect的使用【重定向】</h2><p>一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由</p><p>具体编码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Switch</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;/</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;/</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>/&gt;</span></span><br>&lt;/<span class="hljs-title class_">Switch</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="4-嵌套路由使用"><a href="#4-嵌套路由使用" class="headerlink" title="4. 嵌套路由使用"></a>4. 嵌套路由使用</h1><h2 id="4-1-效果-1"><a href="#4-1-效果-1" class="headerlink" title="4.1 效果"></a>4.1 效果</h2><p>在这里插入图片描述</p><h2 id="4-2-注意"><a href="#4-2-注意" class="headerlink" title="4.2 注意"></a>4.2 注意</h2><p>注册子路由时要写上父路由的path值</p><p>路由的匹配是按照注册路由的顺序进行的</p><h2 id="4-3-实现"><a href="#4-3-实现" class="headerlink" title="4.3 实现"></a>4.3 实现</h2><p><strong>&gt;&gt;Home&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">NavLink</span>,<span class="hljs-title class_">Redirect</span>,<span class="hljs-title class_">Switch</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./News&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Message&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是Home的内容<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/news&quot;</span>&gt;</span>News<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">NavLink</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;list-group-item&quot;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="hljs-tag">&lt;/<span class="hljs-name">NavLink</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home/news&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;News&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#x27;/home/message&#x27;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Message&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home/news&#x27;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-向路由组件传递参数数据"><a href="#5-向路由组件传递参数数据" class="headerlink" title="5. 向路由组件传递参数数据"></a>5. 向路由组件传递参数数据</h1><h2 id="5-1-效果"><a href="#5-1-效果" class="headerlink" title="5.1 效果"></a>5.1 效果</h2><p>在这里插入图片描述</p><h2 id="5-2-具体方法"><a href="#5-2-具体方法" class="headerlink" title="5.2 具体方法"></a>5.2 具体方法</h2><p>方法1. params参数<br>路由链接(携带参数)：&lt;Link to&#x3D;’&#x2F;demo&#x2F;test&#x2F;tom&#x2F;18’}&gt;详情</Link><br>注册路由(声明接收)：<Route path="/demo/test/:name/:age" component={Test}/><br>接收参数：this.props.match.params</p><p><strong>&gt;&gt;Message&#x2F;index.jsx</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Link</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Detail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Detail&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    <span class="hljs-attr">messageArr</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;01&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;消息1&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;02&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;消息2&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;03&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;消息3&#x27;</span> &#125;,<br>    ]<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; messageArr &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;</span><br><span class="language-xml">            messageArr.map((msgObj) =&gt; &#123;</span><br><span class="language-xml">              return (</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;msgObj.id&#125;</span>&gt;</span></span><br><span class="language-xml">                  &#123;/* 向路由组件传递params参数 */&#125;</span><br><span class="language-xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;</span>`/<span class="hljs-attr">home</span>/<span class="hljs-attr">message</span>/<span class="hljs-attr">detail</span>/$&#123;<span class="hljs-attr">msgObj.id</span>&#125;/$&#123;<span class="hljs-attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">              )</span><br><span class="language-xml">            &#125;)</span><br><span class="language-xml">          &#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">        &#123;/* 声明接收params参数 */&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Detail&#125;/</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Detail&#x2F;index.jsx</strong></p><p>在这里插入图片描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Detail</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  state = &#123;<br>    detailData : [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;01&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;你好啊&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;02&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;还不错鸭&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;03&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;显示我吧&#x27;</span> &#125;<br>    ]<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>)<br>    <span class="hljs-comment">// 接收params参数</span><br>    <span class="hljs-keyword">const</span> &#123; id, title &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">match</span>.<span class="hljs-property">params</span><br>    <span class="hljs-keyword">const</span> findResult= <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">detailData</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">dataObj</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> dataObj.<span class="hljs-property">id</span> === id<br>    &#125;)<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ID: &#123;id &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Title: &#123;title &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Content: &#123; findResult.content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript</title>
    <link href="/2023/02/01/typeScript/"/>
    <url>/2023/02/01/typeScript/</url>
    
    <content type="html"><![CDATA[<h1 id="TypeScript基础"><a href="#TypeScript基础" class="headerlink" title="TypeScript基础!"></a>TypeScript基础!</h1><p> 一.TypeScript 是什么  </p><pre><code class="hljs">typescript是JavaScript的超集（js有的TS都有）；ts在js的基础上增加了类型支持</code></pre><p>二.TypeScript 的优势  </p><ul><li><p>ts是静态类型的编程语言，js是动态类型的编程语言<br><em>静态类型：编译期做类型检查   动态类型：执行期做类型检查</em></p></li><li><p>js在代码<strong>执行</strong>的时候的才能发现错误，而ts在<strong>编译</strong>的时候就可以发现</p></li><li><p>js的绝大部分错误都是<strong>类型错误</strong>，用TS可以减少找BUG和改BUG的时间</p></li><li><p>TS在程序任何地方都会有<strong>代码提示</strong></p></li><li><p>TS提高了代码的<strong>可维护性</strong></p></li><li><p>TS支持最新的ECMAScript语法</p></li><li><p>TS类型推断机制，不需要在代码每个地方都标注类型</p></li></ul><p> 三.TypeScript 安装</p><pre><code class="hljs">安装：`npm i -g typescript`版本检查：`tsc -v`运行---&gt;生成js文件tsc xxx.ts</code></pre><p><em>typescript包：将TS转化为JS，因为node&#x2F;浏览器都是只识别JS的</em></p><p>四.TypeScript中的基本类型</p><p>TypeScript中的基本类型：</p><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点；</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型；</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错；</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值；</p></li><li><p>语法：</p></li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span>变量: 类型;<br><span class="hljs-keyword">let</span>变量: 类型=值;<br><span class="hljs-title function_">functionfn</span>(参数: 类型,参数: 类型): 类型&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>自动类型判断</p><ul><li><p>TS拥有自动的类型判断机制</p></li><li><p>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</p></li><li><p>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</p></li></ul></li><li><p>类型：</p></li></ul><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>1, -33, 2.5</td><td>任意数字</td></tr><tr><td>string</td><td>‘hi’, “hi”, hi</td><td>任意字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值true或false</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td></td><td>任意类型</td></tr><tr><td>unknown</td><td></td><td>类型安全的any</td></tr><tr><td>void</td><td>空值（undefined</td><td>没有值（或undefined）</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{name:’孙悟空’}</td><td>任意的JS对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意JS数组</td></tr><tr><td>tuple</td><td>[4,5]</td><td>元素，TS新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A, B}</td><td>枚举，TS中新增类型</td></tr></tbody></table><ul><li><p>number</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">decimal</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">6</span>;  <br><span class="hljs-keyword">let</span> <span class="hljs-attr">hex</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xf00d</span>;  <br><span class="hljs-keyword">let</span> <span class="hljs-attr">big</span>: <span class="hljs-built_in">bigint</span> = <span class="hljs-number">100n</span>;<br></code></pre></td></tr></table></figure></li><li><p>boolean</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">isDone</span>: <span class="hljs-built_in">boolean</span>=<span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><ul><li><p>string</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">color</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;blue&quot;</span>;<br>color = <span class="hljs-string">&#x27;red&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">fullName</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Bob Bobbington`</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">sentence</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123;fullName&#125;</span>;</span><br></code></pre></td></tr></table></figure></li><li><p>字面量</p><ul><li>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>|<span class="hljs-string">&#x27;blue&#x27;</span>|<span class="hljs-string">&#x27;black&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-number">1</span>|<span class="hljs-number">2</span>|<span class="hljs-number">3</span>|<span class="hljs-number">4</span>|<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>any<br>  类型是any的变量可以赋值给任意变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>: <span class="hljs-built_in">any</span>=<span class="hljs-number">4</span>;d=<span class="hljs-string">&#x27;hello&#x27;</span>;d=<span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure></li><li><p>unknown</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">notSure</span>: <span class="hljs-built_in">unknown</span>=<span class="hljs-number">4</span>;<br>   notSure=<span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>实际上就是一个类型安全的any，unknown类型的变量，不能直接赋值给其他变量</li><li>可以通过<br>  （1）  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> e === <span class="hljs-string">&#x27;string&#x27;</span>)&#123;<br>s = e;<br>&#125;<br></code></pre></td></tr></table></figure>  （2）类型断言（用来告诉解析器变量的实际类型）</li></ul></li><li><p>void</p><p>  用来表示空，以函数为例就表示没有返回值的函数，函数内部可return undefined</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">unusable</span>: <span class="hljs-built_in">void</span>=<span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><ul><li><p>never<br>  表示永远不会返回结果</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>object</p><p>  object表示一个js对象</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>: <span class="hljs-built_in">object</span>=&#123;&#125;;<br></code></pre></td></tr></table></figure><pre><code class="hljs">&#123;&#125;用来指定对象中可以包含哪些属性语法：&#123;属性名：属性值，属性名：属性值&#125; 在属性名后面加上？表示属性是可选的</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> b &#123;<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>, age?:<span class="hljs-built_in">number</span>&#125;;<br>b = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;;<br></code></pre></td></tr></table></figure><pre><code class="hljs">[propName:string]:any 表示任意类型的属性</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> c : &#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>,[<span class="hljs-attr">propName</span>:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">any</span>&#125;;<br>c = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;女&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>函数结构的类型声明</p><p>  语法：（形参：类型，形参：类型…）&#x3D;&gt;返回值</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> d :<span class="hljs-function">(<span class="hljs-params">a:<span class="hljs-built_in">number</span> ,b:<span class="hljs-built_in">number</span></span>)=&gt;</span><span class="hljs-built_in">number</span>;<br></code></pre></td></tr></table></figure><ul><li><p>array</p><p>  数组的类型声明：</p><p>  类型[]</p><p>  Array&lt;类型&gt;</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><ul><li><p>tuple</p><p>  元组，元组就是固定长度的数组</p><p>  语法：[类型，类型，类型]</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>x = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">10</span>]; <br></code></pre></td></tr></table></figure><ul><li>enum</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title class_">Red</span>,<br>  <span class="hljs-title class_">Green</span>,<br>  <span class="hljs-title class_">Blue</span>,<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title class_">Red</span> = <span class="hljs-number">1</span>,<br>  <span class="hljs-title class_">Green</span>,<br>  <span class="hljs-title class_">Blue</span>,<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>  <span class="hljs-title class_">Red</span> = <span class="hljs-number">1</span>,<br>  <span class="hljs-title class_">Green</span> = <span class="hljs-number">2</span>,<br>  <span class="hljs-title class_">Blue</span> = <span class="hljs-number">4</span>,<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br></code></pre></td></tr></table></figure><ul><li>对象同时有xx属性【&amp;表示同时】</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> j :&#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>&#125; &amp; &#123;<span class="hljs-attr">age</span>:nember&#125; <br></code></pre></td></tr></table></figure><ul><li>类型的别名</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">type</span> myType = <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">k</span>: myType<br>k = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><ul><li><p>类型断言</p><p>  有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li>第一种</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">unknown</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><pre><code class="hljs">* 第二种</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">unknown</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h1 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h1><h2 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h2><p>  编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript">tsc xxx.<span class="hljs-property">ts</span> -w<br></code></pre></td></tr></table></figure><h2 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h2><p>  如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 <strong>tsconfig.json</strong></p><p>  tsconfig.json是一个JSON文件，添加配置文件后，只需 tsc 命令即可完成对整个项目的编译</p><h2 id="配置选项："><a href="#配置选项：" class="headerlink" title="配置选项："></a>配置选项：</h2><p><strong>include</strong><br>  定义希望被编译文件所在的目录<br>  默认值：[“**&#x2F;*”]</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;include&quot;</span>:[<span class="hljs-string">&quot;src/**/*&quot;</span>, <span class="hljs-string">&quot;tests/**/*&quot;</span>]<br></code></pre></td></tr></table></figure><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p><h2 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h2><p>  定义需要排除在外的目录<br>  默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;./src/hello/**/*&quot;</span>]<br></code></pre></td></tr></table></figure><p>上述示例中，src下hello目录下的文件都不会被编译</p><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>  定义被继承的配置文件</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;./configs/base&quot;</span><br></code></pre></td></tr></table></figure><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p>  指定被编译文件的列表，只有需要编译的文件少时才会用到</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;files&quot;</span>: [<br>    <span class="hljs-string">&quot;core.ts&quot;</span>,<br>    <span class="hljs-string">&quot;sys.ts&quot;</span>,<br>    <span class="hljs-string">&quot;types.ts&quot;</span>,<br>    <span class="hljs-string">&quot;scanner.ts&quot;</span>,<br>    <span class="hljs-string">&quot;parser.ts&quot;</span>,<br>    <span class="hljs-string">&quot;utilities.ts&quot;</span>,<br>    <span class="hljs-string">&quot;binder.ts&quot;</span>,<br>    <span class="hljs-string">&quot;checker.ts&quot;</span>,<br>    <span class="hljs-string">&quot;tsc.ts&quot;</span><br>  ]<br></code></pre></td></tr></table></figure><p>列表中的文件都会被TS编译器所编译</p><h2 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h2><p>  编译选项是配置文件中非常重要也比较复杂的配置选项<br>  在compilerOptions中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项：</p><p>target:设置ts代码编译的目标版本</p><p>可选值：</p></li></ul><p>ES3（默认）、ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p><ul><li><p>lib</p><p>指定代码运行时所包含的库（宿主环境）</p><p>可选值：</p></li></ul><p>ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span>,<br>    <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;ES6&quot;</span>, <span class="hljs-string">&quot;DOM&quot;</span>],<br>    <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>,<br>    <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/aa.js&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>module</p><p>设置编译后代码使用的模块化系统</p><p>可选值：</p></li></ul><p>CommonJS、UMD、AMD、System、ES2020、ESNext、None<br>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;CommonJS&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>outDir</p><p>编译后文件的所在目录</p><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li></ul><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>设置后编译后的js文件将会生成到dist目录</p><ul><li><p>outFile</p><p>将所有的文件编译为一个js文件</p><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p></li></ul><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/app.js&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>rootDir</p><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p><p>示例：</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;rootDir&quot;</span>: <span class="hljs-string">&quot;./src&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>allowJs</p><p>是否对js文件编译</p></li><li><p>checkJs</p><p>是否对js文件进行检查</p></li></ul><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;checkJs&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>removeComments</p><p>是否删除注释<br>默认值：false</p></li><li><p>noEmit</p><p>不对代码进行编译<br>默认值：false</p></li><li><p>sourceMap</p></li></ul><p> 是否生成sourceMap<br> 默认值：false</p><ul><li><p>严格检查</p><ul><li>strict</li></ul></li></ul><p>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</p><pre><code class="hljs">* alwaysStrict</code></pre><p>总是以严格模式对代码进行编译</p><pre><code class="hljs">* noImplicitAny</code></pre><p>禁止隐式的any类型</p><pre><code class="hljs">* noImplicitThis</code></pre><p>禁止类型不明确的this</p><pre><code class="hljs">* strictBindCallApply</code></pre><p>严格检查bind、call和apply的参数列表</p><pre><code class="hljs">* strictFunctionTypes</code></pre><p>严格检查函数的类型</p><pre><code class="hljs">* strictNullChecks</code></pre><p>严格的空值检查</p><pre><code class="hljs">* strictPropertyInitialization</code></pre><p>严格检查属性是否初始化</p><ul><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch</li></ul></li></ul><p>检查switch语句包含正确的break</p><pre><code class="hljs">* noImplicitReturns</code></pre><p>检查函数没有隐式的返回值</p><pre><code class="hljs">* noUnusedLocals</code></pre><p>检查未使用的局部变量</p><pre><code class="hljs">* noUnusedParameters</code></pre><p>检查未使用的参数</p><ul><li><p>高级</p><ul><li><p>allowUnreachableCode<br>检查不可达代码<br>可选值：<br>true，忽略不可达代码<br>false，不可达代码将引起错误</p></li><li><p>noEmitOnError<br> 有错误的情况下不进行编译<br>默认值：false</p></li></ul></li></ul><h1 id="webpack整合"><a href="#webpack整合" class="headerlink" title="webpack整合"></a>webpack整合</h1><p>  通常情况下，实际开发中我们都需要<strong>使用构建工具对代码进行打包</strong>；<br>  TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS；<br>  步骤如下</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>  进入项目根目录，执行命令<strong>npm init -y</strong>，生成<strong>package.json</strong>配置文件</p><h2 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h2><ul><li>命令如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typeScript">npm i -D 【下载开发依赖】webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin<br></code></pre></td></tr></table></figure><p>共安装了7个包:</p><ul><li><p>webpack：构建工具webpack</p></li><li><p>webpack-cli：webpack的命令行工具</p></li><li><p>webpack-dev-server：webpack的开发服务器</p></li><li><p>typescript：ts编译器</p></li><li><p>ts-loader：ts加载器，用于在webpack中编译ts文件</p></li><li><p>html-webpack-plugin：webpack中html插件，用来自动创建html文件</p></li><li><p>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录</p></li></ul><h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><p>根目录下创建webpack的配置文件<strong>webpack.config.js</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>);<br><br><span class="hljs-comment">//webpack中的所有的配置信息都应该写在module.exports中</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>   <span class="hljs-attr">optimization</span>:&#123;<br>       <span class="hljs-attr">minimize</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 关闭代码压缩，可选</span><br>   &#125;,<br><br>   <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.ts&quot;</span>,<span class="hljs-comment">//指定入口文件</span><br><br>   <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;inline-source-map&quot;</span>,<br><br>   <span class="hljs-attr">devServer</span>: &#123;<br>       <span class="hljs-attr">contentBase</span>: <span class="hljs-string">&#x27;./dist&#x27;</span><br>   &#125;,<br>   <br><span class="hljs-comment">//指定打包文件所在目录</span><br>   <span class="hljs-attr">output</span>: &#123;<br>   <span class="hljs-comment">//指定打包文件的目录</span><br>       <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>     <span class="hljs-comment">//打包后文件名</span><br>       <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>       <span class="hljs-attr">environment</span>: &#123;<br>           <span class="hljs-attr">arrowFunction</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 关闭webpack的箭头函数，可选</span><br>       &#125;<br>   &#125;,<br><br>   <span class="hljs-attr">resolve</span>: &#123;<br>       <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.ts&quot;</span>, <span class="hljs-string">&quot;.js&quot;</span>]<br>   &#125;,<br><br><span class="hljs-comment">//指定webpack打包时要使用的模块</span><br>   <span class="hljs-attr">module</span>: &#123;<br>   <span class="hljs-comment">//指定要加载的规则</span><br>       <span class="hljs-attr">rules</span>: [<br>           &#123;<br>           <span class="hljs-comment">//指定规则生效的文件【正则表达式】</span><br>               <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>            <span class="hljs-comment">//要使用的loader</span><br>               <span class="hljs-attr">use</span>: &#123;<br>                   <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;ts-loader&quot;</span>     <br>               &#125;,<br>              <span class="hljs-comment">//要排除的文件</span><br>               <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>           &#125;<br>       ]<br>   &#125;,<br><br>   <span class="hljs-attr">plugins</span>: [<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>           <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;TS测试&#x27;</span><br>       &#125;),<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>html-webpack-plugin：webpack中html插件，用来自动创建html文件</p><ul><li>安装 「npm」html-webpack-plugin</li><li>在webpack.config.json中引入  const xxx &#x3D; require(‘html-webpack-plugin’)</li><li>module.exports中配置webpack插件</li></ul></li><li><p>webpack-dev-server：webpack的开发服务器</p><ul><li>实时更新<img width="760" alt="image" src="https://user-images.githubusercontent.com/117837871/215415260-97b1e423-c284-4342-8f32-4ac77df5e175.png"></li></ul></li></ul><img width="269" alt="image" src="https://user-images.githubusercontent.com/117837871/215415287-f5474538-4127-4797-976f-01a883c8b75a.png"><ul><li>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录<ul><li>安装 「npm」clean-webpack-plugin</li><li>在webpack.config.json中引入  const xxx &#x3D; require(‘clean-webpack-plugin’)</li><li>module.exports中配置webpack插件 <img width="285" alt="image" src="https://user-images.githubusercontent.com/117837871/215415950-603800b1-b0dd-4d08-a366-40d70df8ba5d.png"></li></ul></li></ul><h2 id="配置TS编译选项"><a href="#配置TS编译选项" class="headerlink" title="配置TS编译选项"></a>配置TS编译选项</h2><p>  根目录下创建<strong>tsconfig.json</strong>，配置可以根据自己需要</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typeScript">&#123;<br>   <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>       <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>       <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span><br>       &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改package-json配置"><a href="#修改package-json配置" class="headerlink" title="修改package.json配置"></a>修改package.json配置</h2><p>  修改package.json添加如下配置</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typeScript">&#123;<br>   ...<span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot;&amp;&amp; exit 1&quot;</span>,<br>**<br>       <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span>,<br>       <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span>&#125;,<br>...&#125;<br></code></pre></td></tr></table></figure><h2 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h2><p>  在src下创建ts文件，并在并命令行执行<strong>npm run build</strong>对代码进行编译；</p><p>  或者执行<strong>npm start</strong>来启动开发服务器；</p><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>  除了webpack，开发中还经常需要结合babel来对代码进行转换；</p><p>  以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中；</p><p><em>虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</em></p><p><em>对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；</em></p><ul><li>安装依赖包：</li></ul><p>npm i -D @babel&#x2F;core @babel&#x2F;preset-env babel-loader core-js</p><ul><li><p>共安装了4个包，分别是：</p><ul><li><p>@babel&#x2F;core：babel的核心工具</p></li><li><p>@babel&#x2F;preset-env：babel的预定义环境</p></li><li><p>@babel-loader：babel在webpack中的加载器</p></li><li><p>core-js：core-js用来使老版本的浏览器支持新版ES语法</p></li></ul></li><li><p>修改webpack.config.js配置文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typeScript">...<br><span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>        &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>            <span class="hljs-attr">use</span>: [<br>                &#123;<br>                    <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>                    <span class="hljs-attr">options</span>:&#123;<br>                        <span class="hljs-attr">presets</span>: [<br>                            [<br>                            <span class="hljs-comment">//指定环境的插件</span><br>                                <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>                              <span class="hljs-comment">//配置信息</span><br>                                &#123;<br>                                <span class="hljs-comment">//要兼容的目标浏览器</span><br>                                    <span class="hljs-string">&quot;targets&quot;</span>:&#123;<br>                                        <span class="hljs-string">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;58&quot;</span>,<br>                                        <span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;11&quot;</span><br>                                    &#125;,<br>                                  <span class="hljs-comment">//指定corejs的版本</span><br>                                    <span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                                  <span class="hljs-comment">//使用corejs的方式，usage表示按需加载</span><br>                                    <span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span><br>                                &#125;<br>                            ]<br>                        ]<br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br><br>                &#125;<br>            ],<br>            <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>        &#125;<br>    ]<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>如此一来，使用ts编译后的文件将会再次被babel处理；</p></li></ul><p>使得代码可以在大部分浏览器中直接使用；</p><p>同时可以在配置选项的targets中指定要兼容的浏览器版本；</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><pre><code class="hljs">要想面向对象，操作对象，首先便要拥有对象；要创建对象，必须要先定义类，所谓的类可以理解为对象的模型；</code></pre><p>程序中可以根据类创建指定类型的对象；</p><p>举例来说：</p><p>可以通过Person类来创建人的对象，通过Dog类创建狗的对象，不同的类可以用来创建不同的对象；</p><ul><li>定义类</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> 类名 &#123;<br>    属性名: 类型;<br>    <br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">参数: 类型</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.属性名 = 参数;<br>    &#125;<br>    <br>    方法名()&#123;<br>        ....<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用类：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.<span class="hljs-title function_">sayHello</span>();<br></code></pre></td></tr></table></figure><ul><li>构造函数<br>可以使用constructor定义一个构造器方法；</li></ul><p>注1：<strong>在TS中只能有一个构造器方法！</strong></p><p>例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时也可以直接将属性定义在构造函数中：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span>, <span class="hljs-keyword">public</span> age: <span class="hljs-built_in">number</span></span>) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>上面两种定义方法是完全相同的！</strong></p><p>注2：<strong>子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong></p><p>例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">X</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">num: <span class="hljs-built_in">number</span>, name: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(num);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果在X类中不调用super将会报错！</strong></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><pre><code class="hljs">对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</code></pre><ul><li><p>静态属性（static）：</p><p>  声明为static的属性或方法不再属于实例，而是属于<strong>类的属性</strong>；</p></li><li><p>只读属性（readonly）：</p><p>  如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</p></li><li><p>TS中属性具有三种修饰符：</p><p>  public（默认值），可以在类、子类和对象中修改<br>  protected ，可以在类、子类中修改<br>  private ，可以在类中修改</p></li></ul><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">public</span>：<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 写或什么都不写都是public</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <span class="hljs-comment">// 可以在类中修改</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">super</span>(name, age);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <span class="hljs-comment">//子类中可以修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 可以通过对象修改</span><br><span class="hljs-keyword">protected</span>：<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <span class="hljs-comment">// 可以修改</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>&#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">super</span>(name, age);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <span class="hljs-comment">//子类中可以修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 不能修改</span><br><span class="hljs-keyword">private</span>：<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <span class="hljs-comment">// 可以修改</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span>&#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">super</span>(name, age);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <span class="hljs-comment">//子类中不能修改</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-number">18</span>);<br>p.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;猪八戒&#x27;</span>;<span class="hljs-comment">// 不能修改</span><br></code></pre></td></tr></table></figure><h2 id="属性存取器"><a href="#属性存取器" class="headerlink" title="属性存取器"></a>属性存取器</h2><pre><code class="hljs">对于一些不希望被任意修改的属性，可以将其设置为private直接将其设置为private将导致无法再通过对象修改其中的属性</code></pre><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">_name</span>: <span class="hljs-built_in">string</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;孙悟空&#x27;</span>);<br><span class="hljs-comment">// 实际通过调用getter方法读取name属性</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">name</span>);<br><span class="hljs-comment">// 实际通过调用setter方法修改name属性 </span><br><br>p1.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;猪八戒&#x27;</span>; <br></code></pre></td></tr></table></figure><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><pre><code class="hljs">静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用静态属性（方法）使用static开头</code></pre><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tools</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.1415926</span>;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">num1: <span class="hljs-built_in">number</span>, num2: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-keyword">return</span> num1 + num2<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Tools</span>.<span class="hljs-property">PI</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Tools</span>.<span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>, <span class="hljs-number">456</span>));<br></code></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>在类中，使用this表示当前对象</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br><br>    <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">4</span>);<br>dog.<span class="hljs-title function_">bark</span>();<br></code></pre></td></tr></table></figure><p>通过继承可以在不修改类的情况下完成对类的扩展</p><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`父类中的run方法！`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br><br>    <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`子类中的run方法，会重写父类中的run方法！`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;旺财&#x27;</span>, <span class="hljs-number">4</span>);<br>dog.<span class="hljs-title function_">bark</span>();<br></code></pre></td></tr></table></figure><p>在子类中可以使用super来完成对父类的引用</p><h2 id="抽象类（abstract-class）"><a href="#抽象类（abstract-class）" class="headerlink" title="抽象类（abstract class）"></a>抽象类（abstract class）</h2><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>  <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">run</span>(): <span class="hljs-built_in">void</span>;<br>  <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;动物在叫~&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animals</span>&#123;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;狗在跑~&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;</p><h1 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h1><p>  接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是<strong>没有实值</strong>的，换句话说接口中的所有方法都是抽象方法；</p><p>  接口主要负责定义一个类的结构，接口可以去<strong>限制一个对象的接口</strong>：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>  同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p><p>示例（检查对象类型）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">sayHello</span>():<span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">per: Person</span>)&#123;<br>    per.<span class="hljs-title function_">sayHello</span>();<br>&#125;<br><br><span class="hljs-title function_">fn</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, 我是 <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)&#125;&#125;);<br></code></pre></td></tr></table></figure><p>示例（实现）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span>&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>   <span class="hljs-title function_">sayHello</span>():<span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span>&#123;<br>   <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span></span>) &#123;<br>   &#125;<br><br>   <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;大家好，我是&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h1><p>  定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><p>  此时泛型便能够发挥作用；</p><p>举个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">arg: <span class="hljs-built_in">any</span></span>): <span class="hljs-built_in">any</span>&#123;<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br></code></pre></td></tr></table></figure><p>上例中，test函数有一个参数类型不确定，但是能确定的是其返回值的类型和参数的类型是相同的；</p><p>由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的：</p><p>首先使用any会关闭TS的类型检查，其次这样设置也<strong>不能体现出参数和返回值是相同的类型</strong>；</p><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><h2 id="创建泛型函数"><a href="#创建泛型函数" class="headerlink" title="创建泛型函数"></a>创建泛型函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">function</span> test&lt;T&gt;(<span class="hljs-attr">arg</span>: T): T&#123;<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<T>就是泛型；</p><p>T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型；</p><p>所以泛型其实很好理解，就表示某个类型；</p><p>那么如何使用上边的函数呢？</p><h2 id="使用泛型函数"><a href="#使用泛型函数" class="headerlink" title="使用泛型函数"></a>使用泛型函数</h2><ul><li><p>方式一（直接使用）：<br>test(10)<br>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p></li><li><p>方式二（指定类型）：<br>test<number>(10)<br>也可以在函数后手动指定泛型；</p></li></ul><h2 id="函数中声明多个泛型"><a href="#函数中声明多个泛型" class="headerlink" title="函数中声明多个泛型"></a>函数中声明多个泛型</h2><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">function</span> test&lt;T, K&gt;(<span class="hljs-attr">a</span>: T, <span class="hljs-attr">b</span>: K): K&#123;<br>  <span class="hljs-keyword">return</span> b;<br>&#125;<br><br>test&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><ul><li>类中同样可以使用泛型：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&lt;T&gt;&#123;<br>  <span class="hljs-attr">prop</span>: T;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">prop: T</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">prop</span> = prop;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h2><p>除此之外，也可以对泛型的范围进行约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typeScript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInter</span>&#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> test&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyInter</span>&gt;(<span class="hljs-attr">arg</span>: T): <span class="hljs-built_in">number</span>&#123;<br>  <span class="hljs-keyword">return</span> arg.<span class="hljs-property">length</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用；</p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Question</title>
    <link href="/2023/01/01/Question/"/>
    <url>/2023/01/01/Question/</url>
    
    <content type="html"><![CDATA[<h1 id="object-的哪些属性不能被-stringfy"><a href="#object-的哪些属性不能被-stringfy" class="headerlink" title="object 的哪些属性不能被 stringfy"></a>object 的哪些属性不能被 stringfy</h1><p>在 JavaScript 中，stringify 方法用于将对象转换为字符串。然而，并非所有对象属性都可以被 stringify 方法转换为字符串。以下是一些不能被 stringify 方法转换为字符串的属性:</p><p>函数属性:函数属性不能被 stringify 方法转换为字符串，因为它们不是对象属性。</p><p>循环引用属性:如果对象之间存在循环引用，则 stringify 方法将无法正确处理这些属性，因为它们会导致字符串化过程崩溃。</p><p>只读属性:对象中的只读属性不能被 stringify 方法转换为字符串，因为它们不能被修改。</p><p>内置对象属性:例如 Infinity, NaN, Date.prototype.getTime,以及 Array.prototype.join 等内置对象属性不能被 stringify 方法转换为字符串。</p><p>非 5.1 版本的 DOM 对象属性：在早期的 JavaScript 版本中，stringify 方法无法正确处理 DOM 对象属性，因为这些属性不是对象属性。</p><h1 id="如何通过原型修改第三方类库，来实现自己的功能而不破坏类库？手写一下"><a href="#如何通过原型修改第三方类库，来实现自己的功能而不破坏类库？手写一下" class="headerlink" title="如何通过原型修改第三方类库，来实现自己的功能而不破坏类库？手写一下"></a>如何通过原型修改第三方类库，来实现自己的功能而不破坏类库？手写一下</h1><p>要通过原型修改第三方类库，可以遵循以下步骤:</p><p>读取第三方类库的原型链。假设您正在修改 util.js 类库，您可以使用以下代码读取它的原型链:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);  <br><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>).<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;util.js&#x27;</span>);  <br><span class="hljs-keyword">const</span> utilPrototype = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(p);  <br></code></pre></td></tr></table></figure><p>创建一个新的实例，该实例将继承第三方类库的原型。您可以使用以下代码创建一个新实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> newUtil = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(utilPrototype);  <br></code></pre></td></tr></table></figure><p>修改新实例的原型链，以包含您需要的功能。您可以使用以下代码修改新实例的原型链:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">newUtil.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(utilPrototype.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);  <br></code></pre></td></tr></table></figure><p>将新实例返回给第三方类库。您可以使用以下代码将新实例返回给第三方类库:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);  <br><span class="hljs-keyword">const</span> newUtil = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(utilPrototype);  <br><span class="hljs-keyword">return</span> newUtil;  <br></code></pre></td></tr></table></figure><p>通过这些步骤，可以修改第三方类库的原型链，以实现您需要的功能，而又不会破坏类库本身。请注意，这些步骤仅适用于您需要修改的类库是使用原型继承的。如果您需要修改基于类的类库，请考虑使用构造函数。</p><h1 id="Vue2-中只能有一个根节点，而-Vue3-中支持多个根节点"><a href="#Vue2-中只能有一个根节点，而-Vue3-中支持多个根节点" class="headerlink" title="Vue2 中只能有一个根节点，而 Vue3 中支持多个根节点"></a>Vue2 中只能有一个根节点，而 Vue3 中支持多个根节点</h1><p>其实本质上 Vue3 每个组件还是一个根节点，因为 DOM 树只能是树状结构的，只是 Vue3 在编译阶段新增了判断，如果当前组件不只一个根元素，就添加一个 fragment 组件把这个多根组件的给包起来，相当于这个组件还是只有一个根节点。而 fragment 跟 keep-alive 一样是一个不会被渲染出来的内置组件<br><template><br>    <div>1</div><br>    <div>2</div><br></template></p><h1 id="JavaScript中栈和堆的区别是什么"><a href="#JavaScript中栈和堆的区别是什么" class="headerlink" title="JavaScript中栈和堆的区别是什么"></a>JavaScript中栈和堆的区别是什么</h1><p>在理解堆与栈这两个概念时，需要放到具体的场景下去理解。一般情况下有两层含义：</p><p>（1）内存操作场景下，堆与栈表示两种内存的管理方式。</p><p>（2）数据结构场景下，堆与栈表示两种常用的数据结构。</p><p>1、内存操作场景</p><p>栈由操作系统自动分配和释放，用于存放简单的数据段，占据固定大小的空间，比如基本数据类型（Number、String、Boolean……）和函数的参数值等。</p><p>堆由开发人员自主分配和释放，若不主动释放，程序结束时由浏览器回收，用于存储引用类型（引用类型的变量实际上保存的不是变量本身，而是指向内存空间的 指针）。</p><p>JavaScript中的数据类型</p><p>2、数据结构场景</p><p>JavaScript存在栈和队列概念，通过数组的方式，模仿实现堆栈。</p><p>栈：栈是一种运算受限的线性表，其限制是指只仅允许在表的一端进行插入和删除操作，这一端被称为栈顶（Top），相对地，把另一端称为栈底（Bottom）。把新元素放到栈顶元素的上面，使之成为新的栈顶元素称作进栈、入栈或压栈（Push）；把栈顶元素删除，使其相邻的元素成为新的栈顶元素称作出栈或退栈（Pop）。通过数组的push()、pop()方法实现栈。</p><p>堆：堆其实是一种优先队列，也就是说队列中存在优先级，比如队列中有很多待执行任务，执行时会根据优先级找优先度最高的先执行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Question</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3-Study</title>
    <link href="/2023/01/01/Vue3-Study/"/>
    <url>/2023/01/01/Vue3-Study/</url>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/6280b990-ff19-11ea-85f6-6fac77c0c9b3.png" alt="Vue3"></p><h1 id="关于Vue3"><a href="#关于Vue3" class="headerlink" title="关于Vue3"></a>关于Vue3</h1><h2 id="一-Vue3简介"><a href="#一-Vue3简介" class="headerlink" title="一.Vue3简介"></a>一.Vue3简介</h2><p>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</p><p>耗时2年多、2600+次提交、30+个RFC、600+次PR、99位贡献者</p><p>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></p><h2 id="二-Vue3带来了什么"><a href="#二-Vue3带来了什么" class="headerlink" title="二.Vue3带来了什么"></a>二.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p></li></ul><p>……</p><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p></li></ul><p>……</p><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><p>Vue3可以更好的支持TypeScript</p><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><p>Composition API（组合API）</p><p>setup配置</p><p>ref与reactive</p><p>watch与watchEffect</p><p>provide与inject</p><p>……</p><p><strong>新的内置组件</strong></p><p>Fragment</p><p>Teleport</p><p>Suspense</p><p>其他改变</p><p><strong>新的生命周期钩子</strong></p><p>data 选项应始终被声明为一个函数</p><p>移除keyCode支持作为 v-on 的修饰符</p><p>……</p><h2 id="三-创建Vue3-0工程"><a href="#三-创建Vue3-0工程" class="headerlink" title="三.创建Vue3.0工程"></a>三.创建Vue3.0工程</h2><h3 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h3><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><p>查看@vue&#x2F;cli版本，确保@vue&#x2F;cli版本在4.5.0以上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">## 查看@vue/cli版本，确保@vue/cli版本在<span class="hljs-number">4.5</span><span class="hljs-number">.0</span>以上<br>vue --version<br>## 安装或者升级你的@vue/cli<br>npm install -g @vue/cli<br>## 创建<span class="hljs-title class_">Vue</span>项目，选择<span class="hljs-title class_">Vue3</span><br>vue create vue_test<br>## 启动<br>cd vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><p>【还可以使用可视化界面创建：输入命令  vue ui 】</p><h3 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h3><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><p>什么是vite？—— 新一代前端构建工具。</p><p>优势如下：</p><ul><li><p>开发环境中，无需打包操作，可快速的冷启动。</p></li><li><p>轻量快速的热重载（HMR）。</p></li><li><p>真正的按需编译，不再等待整个应用编译完成。</p></li></ul><p>传统构建 与 vite构建对比图</p><p><a href="https://postimg.cc/D8zLssjh"><img src="https://i.postimg.cc/5NB3hS8X/image.png" alt="image.png"></a></p><p>传统构建模式，是将所有资源都打包好，再上线</p><p><a href="https://postimg.cc/Fk0rkTMp"><img src="https://i.postimg.cc/nrPC55Ty/image.png" alt="image.png"></a></p><p>而Vite有点按需加载的意思了。</p><p>《创建工程》</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm init vite-app &lt;project-name&gt;<br>进入工程目录<br>cd &lt;project-name&gt;<br>安装依赖<br>npm install<br>运行<br>npm run dev<br></code></pre></td></tr></table></figure><p>【vite的构建速度更快】</p><h3 id="3-分析工程结构"><a href="#3-分析工程结构" class="headerlink" title="3.分析工程结构"></a>3.分析工程结构</h3><p>构造函数需要new  ； 工厂函数直接使用</p><p><strong>&gt;&gt;main.js</strong></p><p>Vue2项目中的main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>:<span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(app),<br>&#125;)<br>vm.$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Vue3项目中的main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>《对比》</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入的不再是Vue构造函数了，引入的是一个名为createApp的工厂函数</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">// 创建应用实例对象——app(类似于之前Vue2中的vm，但app比vm更“轻”)</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(app)<br><span class="hljs-comment">// 挂载</span><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;App.vue</strong></p><p>【vue3 template中可无根标签】</p><h3 id="4-常用-Composition-API"><a href="#4-常用-Composition-API" class="headerlink" title="4.常用 Composition API"></a>4.常用 Composition API</h3><p>在Vue2中，我们使用的是Options API ，配置项式的API，我们要创建一个Vue实例，然后在里面传入一个配置对象，里面要写data、methods、watch等的东西，而Vue3提出了全新的 Composition API，组合式API，我们不用直接创建Vue实例，而是创建一个app，然后按需引入需要的API，来进行使用…</p><h4 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h4><p>使用传统Options API（配置式API）中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><p><a href="https://postimg.cc/jDtYqHRH"><img src="https://i.postimg.cc/vZ6YzhjN/image.png" alt="image.png"></a></p><p><a href="https://postimg.cc/Mn2VnGLb"><img src="https://i.postimg.cc/W1tnfF6K/image.png" alt="image.png"></a></p><h4 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h4><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><p><a href="https://postimg.cc/7bXqCtQB"><img src="https://i.postimg.cc/hPRv5H8q/image.png" alt="image.png"></a></p><p><a href="https://postimg.cc/566WX4z0"><img src="https://i.postimg.cc/VLFfH5Lj/image.png" alt="image.png"></a></p><h5 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h5><ul><li><p>理解：Vue3.0中一个新的配置项，值为一个函数。</p></li><li><p>setup是所有Composition API（组合API）“ 表演的舞台 ”。</p></li><li><p>组件中所用到的：数据、方法等等，均要配置在setup中。</p></li><li><p>setup函数的两种返回值：</p><ul><li><p>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）【return内简写name:name&#x3D;&#x3D;&#x3D;&gt;name】</p></li><li><p>若返回一个渲染函数：则可以自定义渲染内容。（了解）</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  &lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>性别：&#123;&#123;gender&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sayInfo&quot;</span>&gt;</span>显示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// import &#123;h&#125; from &#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//此处只是测试一下setup，暂时不考虑响应式的问题。</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;YK菌&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> gender = <span class="hljs-string">&quot;男&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayInfo</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">`你好<span class="hljs-subst">$&#123;name&#125;</span>，你太厉害了吧`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      name,age, gender,sayInfo</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// return ()=&gt; h(&#x27;h1&#x27;,&#x27;Good Job&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果返回的是渲染函数</p><p>那你在template里写的模板都不奏效了，页面渲染的就是你写的h函数中的内容</p><ul><li><p>注意点：</p><ul><li><p>尽量不要与Vue2.x配置混用</p><ul><li><p>Vue2.x配置（data、methos、computed…）中可以访问到setup中的属性、方法。</p></li><li><p>但在setup中不能访问到Vue2.x配置（data、methos、computed…）。</p></li><li><p>如果有重名, setup优先。</p></li></ul></li><li><p>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</p></li></ul></li></ul><p>上面的数据不是响应式的数据，我们修改它，页面不会有更新，如何定义响应式的数据呢？</p><h5 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h5><p>作用: 定义一个响应式的数据</p><p>语法: <strong>const xxx &#x3D; ref(initValue)</strong></p><ul><li><p>创建一个包含响应式数据的引用对象（reference对象，简称ref对象）。</p></li><li><p>JS中操作数据： <strong>xxx.value</strong></p></li><li><p>模板中读取数据: 不需要.value，直接：**<div></div>**</p></li></ul><p>备注：</p><ul><li><p>接收的数据可以是：基本类型、也可以是对象类型。</p></li><li><p>基本类型的数据：响应式依然是靠<strong>Object.defineProperty()的get与set</strong>完成的。</p></li><li><p>对象类型的数据：内部 “ 求助 ” 了Vue3.0中的一个新函数—— <strong>reactive函数</strong>。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：&#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>职业： &#123;&#123; job.type &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>工资：&#123;&#123; job.salary &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sayInfo&quot;</span>&gt;</span>显示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeInfo&quot;</span>&gt;</span>修改信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> name = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;trumen&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> age = <span class="hljs-title function_">ref</span>(<span class="hljs-number">18</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> job = <span class="hljs-title function_">ref</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;前端工程师&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">salary</span>: <span class="hljs-string">&quot;10K&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayInfo</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">`你好<span class="hljs-subst">$&#123;name.value&#125;</span>，薪水<span class="hljs-subst">$&#123;job.value.salary&#125;</span>`</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeInfo</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      name.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;lily&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      age.<span class="hljs-property">value</span> = <span class="hljs-number">48</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      job.<span class="hljs-property">value</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;工程师&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      job.<span class="hljs-property">value</span>.<span class="hljs-property">salary</span> = <span class="hljs-string">&quot;200K&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      name,</span></span><br><span class="language-javascript"><span class="language-xml">      age,</span></span><br><span class="language-javascript"><span class="language-xml">      job,</span></span><br><span class="language-javascript"><span class="language-xml">      sayInfo,</span></span><br><span class="language-javascript"><span class="language-xml">      changeInfo,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>通过看源码可以知道调用ref会返回一个RefImpl的实例对象，RefImpl类中有getter和setter可以检测到数据的变化</p><h5 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h5><p>作用: 定义一个<strong>对象类型</strong>的响应式数据（基本类型不要用它，要用ref函数）</p><p>语法：<strong>const 代理对象&#x3D; reactive(源对象)<strong>接收一个对象（或数组），返回一个</strong>代理对象（Proxy的实例对象，简称proxy对象）</strong></p><p>reactive定义的响应式数据是“深层次的”。</p><p>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123; yk.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：&#123;&#123; yk.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>职业： &#123;&#123; yk.job.type &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>工资：&#123;&#123; yk.job.salary &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>爱好：&#123;&#123; yk.hobby &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试数据：&#123;&#123; yk.job.a.b.c &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeInfo&quot;</span>&gt;</span>修改信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> yk = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;YK菌&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">hobby</span>: [<span class="hljs-string">&quot;写博客&quot;</span>, <span class="hljs-string">&quot;学习&quot;</span>, <span class="hljs-string">&quot;看书&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">job</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;前端工程师&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">salary</span>: <span class="hljs-string">&quot;30K&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">a</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">b</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">c</span>: <span class="hljs-number">666</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeInfo</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;三十年后的YK菌&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">age</span> = <span class="hljs-number">48</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">job</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;工程师&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">job</span>.<span class="hljs-property">salary</span> = <span class="hljs-string">&quot;200K&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">job</span>.<span class="hljs-property">a</span>.<span class="hljs-property">b</span>.<span class="hljs-property">c</span> = <span class="hljs-number">888</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 直接通过数组下标修改，可以触发响应式</span></span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">hobby</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;写小说&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      yk,</span></span><br><span class="language-javascript"><span class="language-xml">      changeInfo,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h5><p>Vue2.x的响应式</p><p>实现原理</p><ul><li><p>对象类型：通过**Object.defineProperty()**对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, <span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br>    get () &#123;&#125;, <br>    set () &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>存在问题</p><ul><li><p>新增属性、删除属性, 界面不会更新。</p></li><li><p>直接通过下标修改数组, 界面不会自动更新。</p></li></ul><p>解决方案</p><p>使用<strong>Vue.set、Vue.delete</strong>或者<strong>vm.$set、vm.$delete</strong>这些API</p><p>模拟Vue2中实现响应式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//源数据</span><br><span class="hljs-keyword">let</span> person = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-comment">//模拟Vue2中实现响应式</span><br><span class="hljs-keyword">let</span> p = &#123;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(p,<span class="hljs-string">&#x27;name&#x27;</span>,&#123;<br><span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//有人读取name时调用</span><br><span class="hljs-keyword">return</span> person.<span class="hljs-property">name</span><br>&#125;,<br><span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123; <span class="hljs-comment">//有人修改name时调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人修改了name属性，我发现了，我要去更新界面！&#x27;</span>)<br>person.<span class="hljs-property">name</span> = value<br>&#125;<br>&#125;)<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(p,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//有人读取age时调用</span><br><span class="hljs-keyword">return</span> person.<span class="hljs-property">age</span><br>&#125;,<br><span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123; <span class="hljs-comment">//有人修改age时调用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人修改了age属性，我发现了，我要去更新界面！&#x27;</span>)<br>person.<span class="hljs-property">age</span> = value<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>Vue3.0的响应式</p><p>上面例子中看到数组可以通过下标进行修改，我们再测试下增加属性和删除属性在Vue3中好不好使</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123; yk.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;yk.age&quot;</span>&gt;</span>年龄：&#123;&#123; yk.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;yk.gender&quot;</span>&gt;</span>性别：&#123;&#123; yk.gender &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>职业： &#123;&#123; yk.job.type &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>工资：&#123;&#123; yk.job.salary &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>爱好：&#123;&#123; yk.hobby &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试数据：&#123;&#123; yk.job.a.b.c &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeInfo&quot;</span>&gt;</span>修改信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addGender&quot;</span>&gt;</span>增加性别<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteAge&quot;</span>&gt;</span>删除年龄<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 数据</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> yk = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;trumen&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">hobby</span>: [<span class="hljs-string">&quot;写博客&quot;</span>, <span class="hljs-string">&quot;学习&quot;</span>, <span class="hljs-string">&quot;看书&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">job</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;前端工程师&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">salary</span>: <span class="hljs-string">&quot;30K&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">a</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">b</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">c</span>: <span class="hljs-number">666</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeInfo</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;lily&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">age</span> = <span class="hljs-number">48</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">job</span>.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;工程师&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">job</span>.<span class="hljs-property">salary</span> = <span class="hljs-string">&quot;200K&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">a</span>.<span class="hljs-property">b</span>.<span class="hljs-property">c</span> = <span class="hljs-number">888</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">hobby</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;写小说&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">addGender</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      yk.<span class="hljs-property">gender</span> = <span class="hljs-string">&quot;男&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteAge</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">delete</span> yk.<span class="hljs-property">age</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      yk,</span></span><br><span class="language-javascript"><span class="language-xml">      changeInfo,</span></span><br><span class="language-javascript"><span class="language-xml">      addGender,</span></span><br><span class="language-javascript"><span class="language-xml">      deleteAge,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>实现原理</p><ul><li><p>通过<strong>Proxy</strong>（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过  <strong>Reflect</strong>（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p></li></ul><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><p>模拟Vue3中实现响应式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;trumen&#x27;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(person,&#123;<br><span class="hljs-comment">//有人读取p的某个属性时调用</span><br><span class="hljs-title function_">get</span>(<span class="hljs-params">target,propName</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人读取了p身上的<span class="hljs-subst">$&#123;propName&#125;</span>属性`</span>)<br>       <span class="hljs-comment">// return target[propName]</span><br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target,propName)<br>&#125;,<br><span class="hljs-comment">//有人修改p的某个属性、或给p追加某个属性时调用</span><br><span class="hljs-title function_">set</span>(<span class="hljs-params">target,propName,value</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人修改了p身上的<span class="hljs-subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)<br>        <span class="hljs-comment">// target[propName] = value</span><br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target,propName,value)<br>&#125;,<br><span class="hljs-comment">//有人删除p的某个属性时调用</span><br><span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target,propName</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人删除了p身上的<span class="hljs-subst">$&#123;propName&#125;</span>属性，我要去更新界面了！`</span>)<br><span class="hljs-comment">// return delete target[propName]</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target,propName)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h5><p>从定义数据角度对比</p><ul><li><p>ref用来定义：基本类型数据</p></li><li><p>reactive用来定义：对象（或数组）类型数据。</p></li><li><p>备注：ref也可以用来定义对象（或数组）类型数据, 它内部会自动通过<strong>reactive</strong>转为代理对象。</p></li></ul><p>从原理角度对比</p><ul><li><p>ref通过类中的的getter与setter来实现响应式（数据劫持）。</p></li><li><p>reactive通过使用Proxy来实现响应式（数据劫持）, 并通过Reflect操作源对象内部的数据。</p></li></ul><p>从使用角度对比</p><ul><li><p>ref定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。</p></li><li><p>reactive定义的数据：操作数据与读取数据：均不需要.value。</p></li><li><p>reactive也可以定义基本类型，即把用到的数据封装在一个对象里，然后用reactive封装成响应式的对象。</p></li></ul><p><a href="https://postimg.cc/k6X7FfDx"><img src="https://i.postimg.cc/LXjhSWp0/image.png" alt="image.png"></a></p><h5 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h5><ul><li><p>setup执行的时机</p><p>在beforeCreate之前执行一次，this是undefined。</p></li><li><p>setup的参数</p><p>将setup接收的两个参数(props, context)打印在控制台，如下</p></li></ul><p><a href="https://postimg.cc/mcWYDFhx"><img src="https://i.postimg.cc/HLVB6wgL/image.png" alt="image.png"></a></p><p>  props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</p><p>  context：上下文对象</p><pre><code class="hljs">attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 this.$attrs。slots: 收到的插槽内容, 相当于 this.$slots。emit: 分发自定义事件的函数, 相当于 this.$emit。</code></pre><p>测试一下</p><p>App组件和HelloWorld组件</p><p>父组件向子组件传递属性参数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">msg</span>=<span class="hljs-string">&quot;你好啊&quot;</span> <span class="hljs-attr">school</span>=<span class="hljs-string">&quot;ABC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">HelloWorld</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123; p.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vue/reactivity&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;msg&#x27;</span>], <span class="hljs-comment">// 不写全会报警告</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, context</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> p = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;trumen&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;props-----&#x27;</span>,props);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;context.attrs-----&#x27;</span>, context.<span class="hljs-property">attrs</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123; p &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>自定义事件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> @<span class="hljs-attr">hello</span>=<span class="hljs-string">&quot;showHelloMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">showHelloMsg</span>(<span class="hljs-params">value</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">`你好啊，你触发了hello事件，我收到的参数是:<span class="hljs-subst">$&#123;value&#125;</span>！`</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123; showHelloMsg &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">HelloWorld</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123; p.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>测试触发一下HelloWorld组件的Hello事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vue/reactivity&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">emits</span>:[<span class="hljs-string">&quot;hello&quot;</span>], <span class="hljs-comment">// 不写能执行，但是会报警告</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, context</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> p = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;trumen&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      context.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;**子组件的信息**&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123; p,test &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>【如果不用emits选项接收，会报警告】</p><p><strong>插槽</strong></p><p>默认插槽</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>trumen，你好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123; p.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>$slot中的值<br>传入：<br><a href="https://postimg.cc/KRKfjqTZ"><img src="https://i.postimg.cc/gksTM1k6/image.png" alt="image.png"></a><br>未传入：<br><a href="https://postimg.cc/HJt4RFqt"><img src="https://i.postimg.cc/zfstbrp4/image.png" alt="image.png"></a></p><p>具名插槽</p><p>在vue3中推荐使用v-slot<br><a href="https://postimg.cc/14b6C9gQ"><img src="https://i.postimg.cc/RVZR0h4N/image.png" alt="image.png"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>博主的信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:ykMsg</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>trumen，你好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">HelloWorld</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123; p.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trumen&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h5><p><strong>computed</strong>函数</p><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br><span class="hljs-comment">//计算属性 —— 简写</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>    &#125;)<br>    <span class="hljs-comment">//计算属性 —— 完整</span><br>    <span class="hljs-keyword">let</span> fullName = <span class="hljs-title function_">computed</span>(&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">return</span> person.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + person.<span class="hljs-property">lastName</span><br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>            <span class="hljs-keyword">const</span> nameArr = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br>            person.<span class="hljs-property">firstName</span> = nameArr[<span class="hljs-number">0</span>]<br>            person.<span class="hljs-property">lastName</span> = nameArr[<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>watch</strong>函数</p><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li><p>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</p></li><li><p>监视reactive定义的响应式数据中某个属性时：deep配置有效。</p></li></ul></li></ul><p>·情况一：监视ref定义的响应式数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>(sum,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure><p>(person.value)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">如果用ref定义了一个对象<br><span class="hljs-title function_">watch</span>(person.<span class="hljs-property">value</span>,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;) <br></code></pre></td></tr></table></figure><p>或者这样(deep:true)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watch</span>(person,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>&#125;) <br></code></pre></td></tr></table></figure><p>情况二：监视多个ref定义的响应式数据<br>（用数组）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br><span class="hljs-title function_">watch</span>([sum,msg],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)<br>&#125;) <br></code></pre></td></tr></table></figure><p>情况三：监视reactive定义的响应式数据</p><p>若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</p><p>若watch监视的是reactive定义的响应式数据，则强制开启了深度监视</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watch</span>(person,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">false</span>&#125;) <span class="hljs-comment">//此处的deep配置不再奏效</span><br></code></pre></td></tr></table></figure><p>情况四：监视reactive定义的响应式数据中的某个属性<br>(箭头函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br><span class="hljs-title function_">watch</span>(<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <br></code></pre></td></tr></table></figure><p>情况五：监视reactive定义的响应式数据中的某些属性<br>(数组中放见体育函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br><span class="hljs-title function_">watch</span>([<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">name</span>],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure><p>特殊情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//特殊情况</span><br><span class="hljs-title function_">watch</span>(<span class="hljs-function">()=&gt;</span>person.<span class="hljs-property">job</span>,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)<br>&#125;,&#123;<span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>&#125;) <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure><p><strong>watchEffect</strong>函数</p><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li><p>但computed注重的是计算出来的值（回调函数的返回值），所以必须要写返回值。</p></li><li><p>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</p></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> x1 = sum.<span class="hljs-property">value</span><br>    <span class="hljs-keyword">const</span> x2 = person.<span class="hljs-property">age</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;watchEffect配置的回调执行了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h5><p><a href="https://postimg.cc/kVtDtScR"><img src="https://i.postimg.cc/nL3mgY92/image.png" alt="image.png"></a></p><p>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有两个被更名：</p><ul><li><p>beforeDestroy改名为 beforeUnmount</p></li><li><p>destroyed改名为 unmounted</p></li></ul><p>可以直接使用已配置项的形式使用生命周期钩子，也可以使用组合式API的形式使用，尽量统一</p><p>一般来说，组合式API里的钩子会比配置项的钩子先执行，组合式API的钩子名字有变化</p><p>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：</p><ul><li><p>beforeCreate&#x3D;&#x3D;&#x3D;&gt;setup()</p></li><li><p>created&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;setup()</p></li><li><p>beforeMount &#x3D;&#x3D;&#x3D;&gt;onBeforeMount</p></li><li><p>mounted&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onMounted</p></li><li><p>beforeUpdate&#x3D;&#x3D;&#x3D;&gt;onBeforeUpdate</p></li><li><p>updated &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onUpdated</p></li><li><p>beforeUnmount &#x3D;&#x3D;&gt;onBeforeUnmount</p></li><li><p>unmounted &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;onUnmounted</p></li></ul><h5 id="9-自定义hook函数（重点）"><a href="#9-自定义hook函数（重点）" class="headerlink" title="9.自定义hook函数（重点）"></a>9.自定义hook函数（重点）</h5><p>什么是<strong>hook</strong>？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p><p>类似于vue2.x中的mixin。</p><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p><p>创建一个hooks文件夹，里面创建文件usePoint.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; reactive, onMounted, onBeforeUnmount &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//实现鼠标“打点”相关的数据</span><br>  <span class="hljs-keyword">let</span> point = <span class="hljs-title function_">reactive</span>(&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>  &#125;);<br><br>  <span class="hljs-comment">//实现鼠标“打点”相关的方法</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">savePoint</span>(<span class="hljs-params">event</span>) &#123;<br>    point.<span class="hljs-property">x</span> = event.<span class="hljs-property">pageX</span>;<br>    point.<span class="hljs-property">y</span> = event.<span class="hljs-property">pageY</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">pageX</span>, event.<span class="hljs-property">pageY</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//实现鼠标“打点”相关的生命周期钩子</span><br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, savePoint);<br>  &#125;);<br><br>  <span class="hljs-title function_">onBeforeUnmount</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, savePoint);<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> point;<br>&#125;<br></code></pre></td></tr></table></figure><p>在组件种使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是HelloWorld组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前点击时鼠标的坐标为：x：&#123;&#123;point.x&#125;&#125;，y：&#123;&#123;point.y&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> usePoint <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../hooks/usePoint&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> point = <span class="hljs-title function_">usePoint</span>()</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;point&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h5><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p><p>语法：const name &#x3D; toRef(person,’name’)</p><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p><p>扩展：toRefs与toRef功能一致，但可以批量创建多个 ref 对象，语法：toRefs(person)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>&#123;&#123;person&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>薪资：&#123;&#123;job.j1.salary&#125;&#125;K<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;name+=&#x27;~&#x27;&quot;</span>&gt;</span>修改姓名<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;age++&quot;</span>&gt;</span>增长年龄<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;job.j1.salary++&quot;</span>&gt;</span>涨薪<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;ref,reactive,toRef,toRefs&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">job</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">j1</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">salary</span>:<span class="hljs-number">20</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// const name1 = person.name</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&#x27;%%%&#x27;,name1)</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// const name2 = toRef(person,&#x27;name&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// console.log(&#x27;####&#x27;,name2)</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> x = <span class="hljs-title function_">toRefs</span>(person)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;******&#x27;</span>,x)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">person,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// name:toRef(person,&#x27;name&#x27;),</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// age:toRef(person,&#x27;age&#x27;),</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// salary:toRef(person.job.j1,&#x27;salary&#x27;),</span></span></span><br><span class="language-javascript"><span class="language-xml">...<span class="hljs-title function_">toRefs</span>(person)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="5-其它-Composition-API"><a href="#5-其它-Composition-API" class="headerlink" title="5.其它 Composition API"></a>5.其它 Composition API</h3><h4 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1. shallowReactive 与 shallowRef"></a>1. shallowReactive 与 shallowRef</h4><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p><p>什么时候使用?</p><p>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</p><p>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</p><h4 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2. readonly 与 shallowReadonly"></a>2. readonly 与 shallowReadonly</h4><p>readonly: 让一个响应式数据变为只读的（深只读）。</p><p>shallowReadonly：让一个响应式数据变为只读的（浅只读）。【深层次可修改】</p><p>应用场景: 不希望数据被修改时。</p><h4 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3. toRaw 与 markRaw"></a>3. toRaw 与 markRaw</h4><p>toRaw</p><ul><li><p>作用：将一个由reactive生成的响应式对象转为普通对象。</p></li><li><p>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。【不需要追踪，不需要更新UI界面】</p></li></ul><p>markRaw</p><ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li></ul><p>*应用场景:</p><p>  *有些值不应被设置为响应式的，例如复杂的第三方类库等。</p><ul><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ul><h4 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4. customRef"></a>4. customRef</h4><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; keyWord &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; customRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//自定义一个ref——名为：myRef</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">myRef</span>(<span class="hljs-params">value, delay</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">let</span> timer;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-title function_">customRef</span>(<span class="hljs-function">(<span class="hljs-params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人从myRef这个容器中读取数据了，我把<span class="hljs-subst">$&#123;value&#125;</span>给他了`</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">track</span>(); <span class="hljs-comment">// 通知Vue追踪value的变化（提前和get商量一下，让他认为这个value是有用的）</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> value;</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`有人把myRef这个容器中数据改为了：<span class="hljs-subst">$&#123;newValue&#125;</span>`</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-built_in">clearTimeout</span>(timer);</span></span><br><span class="language-javascript"><span class="language-xml">            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              value = newValue;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-title function_">trigger</span>(); <span class="hljs-comment">// 通知Vue去重新解析模板</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;, delay);</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// let keyWord = ref(&#x27;hello&#x27;) //使用Vue提供的ref</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> keyWord = <span class="hljs-title function_">myRef</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">500</span>); <span class="hljs-comment">//使用程序员自定义的ref</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123; keyWord &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h4 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5. provide 与 inject"></a>5. provide 与 inject</h4><p>作用：实现祖与后代组件间通信</p><p>套路：父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来开始使用这些数据</p><p>具体写法：</p><p>祖组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>......<br>    <span class="hljs-keyword">let</span> car = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;car&#x27;</span>,car) <span class="hljs-comment">// 给自己的后代组件传递数据</span><br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>后代组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props,context</span>)&#123;<br>......<br>    <span class="hljs-keyword">const</span> car = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;car&#x27;</span>) <span class="hljs-comment">// 拿到祖先的数据</span><br>    <span class="hljs-keyword">return</span> &#123;car&#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6. 响应式数据的判断"></a>6. 响应式数据的判断</h4><p>isRef: 检查一个值是否为一个 ref 对象</p><p>isReactive: 检查一个对象是否是由 reactive 创建的响应式代理</p><p>isReadonly: 检查一个对象是否是由 readonly 创建的只读代理</p><p>isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理</p><p>Composition API 差不多就介绍完了，此时回去再看那个动图，就会感觉Vue3真香！</p><h3 id="6-新的组件"><a href="#6-新的组件" class="headerlink" title="6.新的组件"></a>6.新的组件</h3><h4 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1. Fragment"></a>1. Fragment</h4><p>在Vue2中: 组件必须有一个根标签</p><p>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</p><p>好处: 减少标签层级, 减小内存占用</p><h4 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2. Teleport"></a>2. Teleport</h4><p>什么是Teleport？—— Teleport 是一种能够将我们的组件html结构移动到指定位置的技术。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;teleport to=<span class="hljs-string">&quot;移动位置&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mask&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是一个弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/teleport&gt;<br></code></pre></td></tr></table></figure><p>以一个弹窗组件为示例来看看</p><p>我们来个嵌套的盒子，然后在最里面的盒子设置弹窗</p><p><strong>&gt;&gt;App</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是App组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Child&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Child</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.app</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: gray;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Child</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是Child组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Son&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Child&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Son</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.child</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: skyblue;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Son</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是Son组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Dialog</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Dialog</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Dialog.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Son&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Dialog</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.son</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: orange;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>&gt;&gt;Dialog</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = true&quot;</span>&gt;</span>点我弹个窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mask&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是一个弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Dialog&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> isShow = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123; isShow &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.mask</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: absolute;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.dialog</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: absolute;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: green;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>我故意给最里面的盒子加了定位，因为相对定位会找他外层最近的定位盒子进行定位，所以效果就是这样了，我们希望这个弹窗是在body下呈现的</p><p>我们在Dialog组件中加一个teleport标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = true&quot;</span>&gt;</span>点我弹个窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mask&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是一个弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>这样就好了</p><p><a href="https://postimg.cc/6Trbmwbc"><img src="https://i.postimg.cc/mZJxhgQv/image.png" alt="image.png"></a></p><p><a href="https://postimg.cc/CBLCrTRP"><img src="https://i.postimg.cc/76SB6qwk/image.png" alt="image.png"></a></p><h4 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3. Suspense"></a>3. Suspense</h4><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p><p>使用步骤：</p><p>异步引入组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;defineAsyncComponent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure><p> 使用Suspense包裹组件，并配置好default与 fallback</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是App组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:fallback</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载中.....<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>default：就是组件要显示的内容</p><p>fallback：就是组件没加载完全的“备胎”</p><p>延迟加载以测试方法1：控制台调整网速slow</p><p>延迟加载以测试方法2：promise</p><h3 id="7-其他"><a href="#7-其他" class="headerlink" title="7.其他"></a>7.其他</h3><h4 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h4><p>Vue 2.x 有许多全局 API 和配置。</p><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//注册全局组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyButton&#x27;</span>, &#123;<br>  <span class="hljs-attr">data</span>: <span class="hljs-function">() =&gt;</span> (&#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;),<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">//注册全局指令</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">focus</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>Vue3.0中对这些API做出了调整：</p><p>将全局的API，即：Vue.xxx调整到应用实例（app）上</p><p><a href="https://postimg.cc/jwLcdYRW"><img src="https://i.postimg.cc/gJKTsG5K/image.png" alt="image.png"></a></p><h4 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h4><h5 id="1-data选项应始终被声明为一个函数"><a href="#1-data选项应始终被声明为一个函数" class="headerlink" title="1.data选项应始终被声明为一个函数"></a>1.data选项应始终被声明为一个函数</h5><h5 id="2-过渡类名的更改"><a href="#2-过渡类名的更改" class="headerlink" title="2.过渡类名的更改"></a>2.过渡类名的更改</h5><p>Vue2.x写法</p><p>.v-enter,<br>.v-leave-to {<br>  opacity: 0;<br>}</p><p>.v-leave,<br>.v-enter-to {<br>  opacity: 1;<br>}</p><p>Vue3.x写法</p><p>.v-enter-from,<br>.v-leave-to {<br>  opacity: 0;<br>}</p><p>.v-leave-from,<br>.v-enter-to {<br>  opacity: 1;<br>}</p><h5 id="3-移除keyCode作为-v-on-的修饰符，同时也不再支持config-keyCodes"><a href="#3-移除keyCode作为-v-on-的修饰符，同时也不再支持config-keyCodes" class="headerlink" title="3.移除keyCode作为 v-on 的修饰符，同时也不再支持config.keyCodes"></a>3.移除keyCode作为 v-on 的修饰符，同时也不再支持config.keyCodes</h5><h5 id="4-移除v-on-native修饰符"><a href="#4-移除v-on-native修饰符" class="headerlink" title="4.移除v-on.native修饰符"></a>4.移除v-on.native修饰符</h5><ul><li><p>在 Vue 3.x v-on 的 .native 修饰符将被移除。</p></li><li><p>Vue 2.x 的 .native 修饰符</p><ul><li>在 Vue 2.x，如果想要在一个组件的根元素上直接监听一个原生事件，需要使用v-on 的 .native 修饰符。</li></ul></li></ul><p><base-input v-on:focus.native="onFocus"></base-input></p><ul><li>Vue 3.x 取消 .native 修饰符</li></ul><p>.native 修饰符在 Vue 3.x 已经移除掉了。取而代之的是，在新增的 emits 选项中定义当前组件真正触发的事件（即，组件事件）。此外，Vue 现在将所有未在组件emits 选项中定义的事件作为原生事件添加到子组件的根元素中（除非子组件选项中设置了 inheritAttrs: false）。</p><p><my-component  v-on:close="handleComponentEvent"  v-on:click="handleNativeClickEvent"/></p><p>MyComponent.vue</p><template>    <div>        <button v-on:click="$emit('click')">click</button>        <button v-on:click="$emit('close')">close</button>    </div></template><script>  export default {    emits: ['close']  }</script><p>上面代码的执行结果是：click事件会被自动添加到<div>中，所以当子组件被点击时，就会触发click事件。</p><p>若改成这样：</p><template>    <div>        <button v-on:click="$emit('click')">click</button>        <button v-on:click="$emit('close')">close</button>    </div></template><script>  export default {    emits: ['close', 'click']  }</script><p>则click事件不会被添加给<div>。</p><p>强烈建议组件中使用的所有通过emit触发的event都在emits中声明。</p><h5 id="5-移除过滤器（filter）"><a href="#5-移除过滤器（filter）" class="headerlink" title="5.移除过滤器（filter）"></a>5.移除过滤器（filter）</h5><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p><p>参考</p><p>Vue3官方文档 <a href="https://cn.vuejs.org/">Vue3</a><br>Vite官方文档 <a href="https://cn.vitejs.dev/">Vite</a><br>Vue-cli官方文档 <a href="https://cli.vuejs.org/zh/">Vue-cli</a><br>尚硅谷Vue3视频 <a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/?p=136&vd_source=366fdac7817f82df3dfc2cfe3da385cf">vue3-video</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2-Study</title>
    <link href="/2022/11/01/Vue2-Study/"/>
    <url>/2022/11/01/Vue2-Study/</url>
    
    <content type="html"><![CDATA[<p><img src="https://static.vue-js.com/6280b990-ff19-11ea-85f6-6fac77c0c9b3.png" alt="Vue3"></p><h1 id="vue核心"><a href="#vue核心" class="headerlink" title="vue核心"></a>vue核心</h1><h2 id="vue简介"><a href="#vue简介" class="headerlink" title="vue简介"></a>vue简介</h2><pre><code class="hljs">    ○ 概念：    动态构建用户界面的渐进式 JavaScript 框架    ○ 特点：        § 采用组件化模式，提高代码复用率、且让代码更好维护        § 声明式编码，让编码人员无需直接操作DOM，提高开发效率        § 使用虚拟DOM+优秀的Diff算法，尽量复用DOM节点    ○ 需掌握基础：        § ES6语法规范        § ES6模块化        § 包管理器（npm）        § 原型、原型链        § 数组常用方法        § axios        § Promise</code></pre><h2 id="vue安装"><a href="#vue安装" class="headerlink" title="vue安装"></a>vue安装</h2><pre><code class="hljs">    ○ 下载vue.js并引入    https://cn.vuejs.org/v2/guide/#%E8%B5%B7%E6%AD%A5        ○ 安装vue Devtools        (设置允许访问文件地址)        ○ 开发者模式调整        </code></pre><h2 id="Vue初识"><a href="#Vue初识" class="headerlink" title="Vue初识"></a>Vue初识</h2><p>Live server打开当前所处页面。选中的一瞬间，在本机5500的端口号上开通一台内置的小服务器，并且把整个工程里的所有的文件和文件夹都作为这台服务器的根资源去使用<br>    注：<br>            要安装live server才能报错<br>        a. 想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；<br>        b. root容器里的代码依然符合html规范，只不过混入一些特殊的Vue语法；<br>        c. root容器里的代码被称为【Vue模板】；<br>        d. 容器和Vue实例对象必须一一对应，即一个容器只能有一个对应的Vue，一个Vue只能找一个容器；<br>        e. 实际开发中只有一个Vue实例，并且会配合着组件一起使用；<br>        f. 中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；<br>        g. 一旦data中的数据发生改变，那么页面中用到该数据的地方会自动更新<br>        js表达式 vs js代码（js语句）</p><pre><code class="hljs">    ○ el的两种写法        § 一、new vue时配置el属性                i. 也可写成el:document.getElementById(&#39;root&#39;)        ii. el用于指定当前vue实例为哪个容器服务，值通常为css选择器样式字符串        iii. data用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象        iv. 不用写一个变量去接收        § 二、先创建Vue实例，随后通过v.$mount(&#39;#root&#39;)指定el的值            ○ data的两种写法        § 一、对象式                § 二、函数式                注：            □ 后续应用组件，data必须使用函数形式，负责会报错；            □ 由vue管理的函数，一定不要写成箭头函数，一旦写成箭头函数，this的指向就会为window，若写成普通函数，this的指向为vue实例对象    ○ MVVM模型        § M:模型(Model) ：对应 data 中的数据        § V：视图(View) ：模        § VM：视图模型(ViewModel) ： Vue 实例对象             注：        § data中所有的属性，最后都出现在vm身上        § vm身上所有的属性以及vue原型上所有的属性，在Vue模板中都可以直接使用                        • 模板语法    ○ 插值语法（双大括号表达式）        § 功能：用于解析标签体内容        § 语法: &#123;&#123;xxx&#125;&#125; ，xxxx 是js表达式，且可以直接读取到data中所有属性    ○ 指令语法        § 功能：解析标签属性、解析标签体内容、绑定事件        § 举例：v-bind:href = &#39;xxxx&#39; ，简写为：:href=“xxx”，xxxx 会作为 js 表达式被解析，且可以直接读取到data中所有属性        § 说明：Vue 中有有很多的指令，且形式都是v-？？？，此处只是拿v-bind举例子        • 数据绑定    ○ 单向数据绑定（v-bind）数据只能从data流向页面    ○ 双向数据绑定（v-model）数据不仅能从data流向页面，还可以从页面流向data    注：        § 双向绑定一般都应用于表单类元素上（如：input、select等）        § v-model：value可以简写为v-model，因为v-model默认收集的就是value的值        • 数据代理    ○ Object.defineProperty        ○ 数据代理        § 概念：        通过一个对象代理另一个对象中属性的操作（读/写）                § Vue中的数据代理        通过vm对象来代理data对象中属性的操作            □ Vue中数据代理的好处            更加方便操作data中的数据            □ 基本原理                ® 通过Object.defineProperty()把data中所有属性添加到vm上                ® 为每个添加到vm上的属性，都指定一个getter和setter                ® 在getter和setter内部操作（读/写）data中对应的属性                                ® (个人浅谈)：第三处的name,address是为了用户可以直接使用例如“name”，这样的而不必使用_data.name;                                            • 事件处理    ○ 事件的基本使用        § 使用v-on：xxx或@xxx 绑定事件，其中xxx是事件名称；        § 事件的回调需要配置在methods对象中，最终会在vm上；        § methods中配置的函数，都是被Vue所管理的函数，this指向是vm或者组件实例对象;        § @click=“demo”和@click=“demo（$event）效果一致，但是后者可以传参.            ○ 事件修饰符        § prevent：阻止默认行为（常用）        § stop：阻止事件冒泡（常用）        § once：事件只触发一次（常用）        § capture：使用事件的捕获模式（捕获-冒泡，可用于要求先捕获）        § self：只有event.target是当前操作的元素时才触发事件（不会冒泡啦）        § passive：事件的默认行为立即执行，无需等待事件回调执行完毕                注：修饰符可以连写：@click.stop.prevent = &quot;showInfo&quot;    ○ 键盘事件        § Vue中常用的按键别名            □ 回车：enter            □ 删除：delete（捕获”删除“和”退格“）            □ 退出：esc            □ 空格：space            □ 换行：tab（特殊：必须配合keydown使用）（切换焦点）            □ 上：up            □ 下：down            □ 左：left            □ 右：right                    注：            □ Vue未提供别名的按键，可以使用按键原始的key值去绑定，但要注意要转为kebab-case（短横线命名）            □ 系统修饰键（用法特殊）：ctrl、alt、shift、mata（win）                ® 配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发                ® 配合keydown使用：正常触发事件            □ 也可以使用keyCode去指定具体的按键（不推荐）例如：@keyup.13            □ Vue.config.keyCodes.自定义键名 = 键码（13），可以去定制按键别名            □ 当需要按下ctrl+y才能触发事件可以这样写：@keyup.ctrl.y=&quot;showInfo&quot;（同理可组合）    ○ 计算属性与监视        § 计算属性            □ 定义：要用的属性不存在，要通过已有的属性计算得来（通过data中的数据计算得来）            □ 原理：底层借助Object.defineProperty方法提供的getter和setter。            □ get函数什么时候执行？                ® 初次读取时会执行一次                ® 当依赖的函数改变时会再次调用            □ 优势：与methods相比，内部有缓存机制（复用）效率更高，调试方便            □ 备注：                ® 计算属性最终会出现在vm上，直接读取使用即可                ® 如果计算属性要被修改，必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。                计算属性：(存vm ①调get②存return于vm③名为fullname)(表面上是fullname()实际上执行后在vm上放值)                            □ 简写：（只有get，没有set才能简写）                    § 监视属性            □ 注：                ® 当被监视的属性变化时，回调函数自动调用，进行相关操作                ® 监视的属性必须存在，才能进行监视（若不存在则是undefined）                ® data中的属性可以被监视，计算属性computed中的属性也可以被监视                ® 监视的两种写法：                    ◊ new Vue时传入watch配置                    ◊ 通过vm.$watch监视                                        □ 深度监视                ® Vue中的watch默认不监视对象内部值得改变（一层）                ® 配置watch里面的deep：true可以监测到对象内部值得改变（多层）                ® Vue自身可以读取到或者改变多层的内部值，但是Vue提供的watch默认不能监视到                ® 使用watch时根据数据的具体结构，决定是否采用深度监视                            □ 监视简写                ® new Vue直接配置时简写第一种                                ® vm.$watch监视简写                            注：监视可以简写的前提条件是被监视这个属性里面只有handler（）&#123;&#125;            □ watch和computed的区别                ® computed能完成的功能，watch都可以完成                ® watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作                ® 两个重要的原则：                    ◊ 所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或者组件实例对象                    ◊ 所有不被Vue管理的函数（定时器函数、AJAX的回调函数，Promise的回调函数）最好写成箭头函数，这样this的指向才是vm或者组件实例对象。                ○ 绑定样式        § 绑定class样式            □ 写法            ：class=&quot;xxx&quot; xxx可以是字符串、对象、数组                ® 字符串写法，适用于：只选择一个样式（多选一），样式的类名不确定，需要动态指定                ® 数组写法，适用于：要绑定的样式个数不确定、名字也不确定                ® 数组写法，适用于：要绑定的样式个数确定、名字也确定,但是不确定用不用                        § 绑定style样式            □ 写法            ：style=&quot;xxx&quot; xxx可以是对象、数组                ® ：style=&quot;&#123;fontSize：xxx&#125;&quot; 其中xxx是动态值                                ® ：style=&quot;[a，b]&quot; 其中a、b是样式对象。                    ○ 条件渲染        § v-if            □ 写法：                ® v-if=“表达式”                ® v-else-if=“表达式”                ® v-else            □ 适用场景：切换频率较低的场景            □ 特点：不展示的DOM元素直接被移除            □ 注意：v-if可以和v-else-if、v-else一起使用，但要求结构不能被“打断”        § v-show            □ 写法：v-show=“表达式”            □ 适用场景：切换频率较高的场景            □ 特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉        § 注：            □ 使用v-if时，元素可能无法被获取到，而是用v-show一定可以被获取到            □ template临时容器，不会在结构中显示            ○ 列表渲染        § v-for指令（循环）：            □ 用于展示列表数据            □ 语法：v-for=“（item，index） in（或者of） xxx” ：key=“yyy”            □ 可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）                                § key作用与原理（react、vue中的key有什么作用？）            □ 虚拟DOM中key的作用：            key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：                ® 旧虚拟DOM中找到了与新虚拟DOM相同的key：                    ◊ 若虚拟DOM中内容没变, 直接使用之前的真实DOM！                    ◊ 若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。                ® 旧虚拟DOM中未找到与新虚拟DOM相同的key                    ◊ 创建新的真实DOM，随后渲染到到页面。            □ 用index作为key可能会引发的问题：                ® 若对数据进行：逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。                ® 如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题。            □ 开发中如何选择key?:                ® 最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。                ® 如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。                                        注：当未给v-for中的每个元素指定：key的值时，vue自动将：key的值指定为index        § 列表过滤（先收集、再比对）        用watch实现                用计算属性实现                § 列表排序                                这里的P1、P2是对象，而不是数字，所以要写成如上图的形式VU    ○ Vue监测数据的原理        § 问题        分开改属性奏效                一起改属性不奏效                § 总结：            □ Vue会监测data中所有层次的数据            □ Vue如何监测对象中的数据            通过setter实现监测，且要在new Vue时就传入要监测的数据。                ® 对象中后加入的属性，Vue默认不做响应式处理                ® 如需要给对象中后加入的属性做响应式，要使用如下API去添加对象中新的属性                    ◊ Vue.set(target,propertyName/index,value)                    ◊ vm.$set(target,propertyName/index,value)            □ Vue如何监测数组中的数据            通过包裹数组更新元素的方法实现，本质上做了两件事：                1.调用原生对应方法对数组进行更新；                2.重新解析模板，进而更新页面                ® 数组中的每一项没有单独为其服务的setter，所以整体修改数组中的每一项Vue不会监测，即arr[0] = …没有效果                ® 如需在Vue修改数组中某个元素一定要用如下方法：                    ◊ 使用这些数组本来的API：push（）、pop（）、shift（）、unshift（）、splice（）、sort（）、reverse（）                    ◊ Vue.set（）或者vm.$set（）            注：Vue.set（）或者vm.$set（）不能给vm或者vm的根数据对象添加属性，也就是括号内第一个值不能是vm                    § 示例：                            ○ 收集表单数据        § 若：&lt;input type=&quot;text&quot;/&gt;，则v-model收集的是value值，用户输入的就是value值。        § 若：&lt;input type=&quot;radio&quot;/&gt;，则v-model收集的是value值，且要给标签配置value值。        § 若：&lt;input type=&quot;checkbox&quot;/&gt;            □ 没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）            □ 配置input的value属性:                ® v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）                ® v-model的初始值是数组，那么收集的的就是value组成的数组        § 备注：v-model的三个修饰符：            □ lazy：失去焦点再收集数据            □ number：输入字符串转为有效的数字            □ trim：输入首尾空格过滤        § 示例：                    ○ 过滤器        § 定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。        § 语法：            □ 注册过滤器：Vue.filter(name,callback)【全局过滤器】 或 new Vue&#123;filters:&#123;&#125;&#125;【局部过滤器】            □ 使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xxx | 过滤器名&quot;        § 备注：            □ 过滤器也可以接收额外参数、多个过滤器也可以串联            □ 并没有改变原本的数据, 是产生新的对应的数据，所以要return        § 示例：                    ○ Vue内置指令        § 常用内置指令            □  v-text : 更新整个DOM元素的 textContent（不会解析标签）                                                □  v-html : 更新整个DOM元素的 innerHTML（会解析标签）            除了会解析标签之外与v-text一样                                                注：v-html有安全性问题！在网站上动态渲染任意HTML是非常危险的，容易受到XSS攻击，一定要在可信的内容上使用v-html，不要用在用户提交的内容上。            □  v-if : 如果为 true, 当前标签才会输出到页面             □ v-else: 如果为 false, 当前标签才会输出到页面             □ v-show : 通过控制 display 样式来控制显示/隐藏             □ v-for : 遍历数组/对象             □  v-on : 绑定事件监听, 一般简写为@             □ v-bind : 绑定解析表达式, 可以省略 v-bind             □ v-model : 双向数据绑定             □ v-cloak : 【没有值】防止闪现, 与 css 配合: [v-cloak] &#123; display: none&#125;（网速慢的时候，防止未经解析的模板渲染到页面上）                ® 本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。                ® 使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题。            □ v-once：【没有值】                ® v-once所在节点在初次动态渲染后，就视为静态内容了。                ® 以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。                                                            □ v-pre：【没有值】                ® 跳过其所在节点的编译过程。                ® 可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。    ○ Vue自定义指令（用vue实例里面的directives：&#123;&#125;配置）    函数形式        对象形式（适用于获取焦点、获取父元素；分为三个阶段：绑定阶段、插入页面阶段、更新依赖数据阶段）            ® 定义语法：                ® 配置对象中常用的3个回调:            □ bind:指令与元素成功绑定时调用。            □ inserted:指令所在元素被插入页面时调用。            □ update:指令所在模板结构被重新解析时调用。        ® 备注：            □ 指令定义时不加v-，但使用时要加v-；            □ 指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名，后面定义的时候要加引号’kebab-case‘。    ○ 生命周期        ® 又名：生命周期回调函数（没调用，但是执行了）、生命周期函数、生命周期钩子        ® 概念：Vue在关键时刻帮我们调用的一些特殊名称的函数        ® 生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的        ® 生命周期函数中的this指向是vm或者组件实例对象        ® 常用的生命周期钩子：            □ mounted：发送AJAX请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】            □ beforeDestroy：清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】        ® 关于销毁Vue实例            □ 销毁后借助Vue开发者工具看不到任何消息            □ 销毁后自定义事件会失效，但原生DOM事件依然有效            □ 一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。                                        8个钩子                            销毁定时器和vm                此处的事件是指自定义事件，类似于@click这种事件不奏效（原生事件）                        字体透明度变化        ①vm.$destory()        ②&lt;template&gt;&lt;/template&gt;不能作为根元素        ③template:`        &lt;div&gt;***&lt;/div&gt;        `        如有&lt;div id=&quot;root&quot;,则会被替代</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Vue2</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
